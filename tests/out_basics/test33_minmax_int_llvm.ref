jit_set_device(device=-1, stream=0): creating stream
jit_var_new_literal(1): $r0_0 = insertelement <$w x $t0> undef, $t0 2, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(1): 1
jit_var_new_literal(2): $r0_0 = insertelement <$w x $t0> undef, $t0 3, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(2): 1
jit_var_inc_ref_int(1): 1
jit_var_inc_ref_int(2): 1
jit_var_new(3 <- 1, 2): $r0 = icmp ult <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(3): 1
jit_var_inc_ref_int(3): 1
jit_var_inc_ref_int(1): 2
jit_var_inc_ref_int(2): 2
jit_var_new(4 <- 3, 1, 2): $r0 = select <$w x $t1> $r1, <$w x $t2> $r2, <$w x $t3> $r3
jit_var_inc_ref_ext(4): 1
jit_var_dec_ref_ext(3): 0
jit_var_inc_ref_int(1): 3
jit_var_inc_ref_int(2): 3
jit_var_dec_ref_int(1): 2
jit_var_dec_ref_int(2): 2
jit_var_new(3 <- 1, 2): $r0 = icmp ult <$w x $t1> $r1, $r2 (reused)
jit_var_inc_ref_ext(3): 1
jit_var_inc_ref_int(3): 2
jit_var_inc_ref_int(2): 3
jit_var_inc_ref_int(1): 3
jit_var_new(5 <- 3, 2, 1): $r0 = select <$w x $t1> $r1, <$w x $t2> $r2, <$w x $t3> $r3
jit_var_inc_ref_ext(5): 1
jit_var_dec_ref_ext(3): 0
jit_var_schedule(4)
jit_var_schedule(5)
jit_eval(): begin.
jit_assemble(size=1): register map:
   - %r0 -> 1 [scalar]
   - %r1 -> 2 [scalar]
   - %p2 -> 3 [scalar]
   - %r3 -> 4 [scalar] [out]
jit_malloc(type=host-async, size=64): <@> (new allocation)
   - %r4 -> 5 [scalar] [out]
jit_malloc(type=host-async, size=64): <@> (new allocation)
jit_run(): launching kernel (n=1, in=0, out=2, ops=5) ..
define void @enoki_@@@@@@@@@@@@@@@@(i64 %start, i64 %end, i8** %ptrs) #0 alignstack(32) {
entry:
    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*
    %a0_s = load i32, i32* %a0, align 4, !alias.scope !1

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*
    %a1_s = load i32, i32* %a1, align 4, !alias.scope !1
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = insertelement <8 x i32> undef, i32 2, i32 0
    %r0 = shufflevector <8 x i32> %r0_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %r1
    %r1_0 = insertelement <8 x i32> undef, i32 3, i32 0
    %r1 = shufflevector <8 x i32> %r1_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %p2
    %p2 = icmp ult <8 x i32> %r0, %r1

    ; Evaluate %r3
    %r3 = select <8 x i1> %p2, <8 x i32> %r0, <8 x i32> %r1

    ; Store %r3
    %r3_p = bitcast i32* %a0 to <8 x i32>*
    store <8 x i32> %r3, <8 x i32>* %r3_p, align 32, !noalias !1

    ; Evaluate %r4
    %r4 = select <8 x i1> %p2, <8 x i32> %r1, <8 x i32> %r0

    ; Store %r4
    %r4_p = bitcast i32* %a1 to <8 x i32>*
    store <8 x i32> %r4, <8 x i32>* %r4_p, align 32, !noalias !1

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): processing 1 packet and 0 scalar entries
jit_eval(): cleaning up..
jit_var_dec_ref_int(3): 1
jit_var_dec_ref_int(1): 2
jit_var_dec_ref_int(2): 2
jit_var_dec_ref_int(3): 0
jit_var_free(3)
jit_var_dec_ref_int(1): 1
jit_var_dec_ref_int(2): 1
jit_var_dec_ref_int(2): 0
jit_var_dec_ref_int(1): 0
jit_eval(): done.
jit_var_inc_ref_int(4): 1
jit_var_inc_ref_int(1): 1
jit_var_new(6 <- 4, 1): $r0 = icmp eq <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(6): 1
jit_eval(): begin.
jit_assemble(size=1): register map:
   - %r0 -> 4 [scalar] [in]
   - %r1 -> 1 [scalar]
   - %p2 -> 6 [scalar] [out]
jit_malloc(type=host-async, size=64): <@> (new allocation)
jit_run(): launching kernel (n=1, in=1, out=1, ops=3) ..
define void @enoki_@@@@@@@@@@@@@@@@(i64 %start, i64 %end, i8** %ptrs) #0 alignstack(32) {
entry:
    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*
    %a0_s = load i32, i32* %a0, align 4, !alias.scope !1

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i8*
    %a1_s = load i8, i8* %a1, align 1, !alias.scope !1
    %a1_s1 = trunc i8 %a1_s to i1
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Load %r0
    %r0_z = insertelement <8 x i32> undef, i32 %a0_s, i32 0
    %r0 = shufflevector <8 x i32> %r0_z, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %r1
    %r1_0 = insertelement <8 x i32> undef, i32 2, i32 0
    %r1 = shufflevector <8 x i32> %r1_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %p2
    %p2 = icmp eq <8 x i32> %r0, %r1

    ; Store %p2
    %p2_p = bitcast i8* %a1 to <8 x i8>*
    %p2_e = zext <8 x i1> %p2 to <8 x i8>
    store <8 x i8> %p2_e, <8 x i8>* %p2_p, align 8, !noalias !1

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): processing 1 packet and 0 scalar entries
jit_eval(): cleaning up..
jit_var_dec_ref_int(4): 0
jit_var_dec_ref_int(1): 0
jit_eval(): done.
jit_all(<@>, size=1)
jit_memset_async(<@>, isize=1, size=3)
jit_reduce(<@>, type=uint32, rtype=and, size=1)
jit_var_dec_ref_ext(6): 0
jit_var_free(6)
jit_free(<@>, type=host-async, size=64)
jit_var_inc_ref_int(5): 1
jit_var_inc_ref_int(2): 1
jit_var_new(7 <- 5, 2): $r0 = icmp eq <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(7): 1
jit_eval(): begin.
jit_assemble(size=1): register map:
   - %r0 -> 5 [scalar] [in]
   - %r1 -> 2 [scalar]
   - %p2 -> 7 [scalar] [out]
jit_malloc(type=host-async, size=64): <@> (reused local)
jit_run(): launching kernel (n=1, in=1, out=1, ops=3) ..
define void @enoki_@@@@@@@@@@@@@@@@(i64 %start, i64 %end, i8** %ptrs) #0 alignstack(32) {
entry:
    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*
    %a0_s = load i32, i32* %a0, align 4, !alias.scope !1

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i8*
    %a1_s = load i8, i8* %a1, align 1, !alias.scope !1
    %a1_s1 = trunc i8 %a1_s to i1
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Load %r0
    %r0_z = insertelement <8 x i32> undef, i32 %a0_s, i32 0
    %r0 = shufflevector <8 x i32> %r0_z, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %r1
    %r1_0 = insertelement <8 x i32> undef, i32 3, i32 0
    %r1 = shufflevector <8 x i32> %r1_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %p2
    %p2 = icmp eq <8 x i32> %r0, %r1

    ; Store %p2
    %p2_p = bitcast i8* %a1 to <8 x i8>*
    %p2_e = zext <8 x i1> %p2 to <8 x i8>
    store <8 x i8> %p2_e, <8 x i8>* %p2_p, align 8, !noalias !1

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): processing 1 packet and 0 scalar entries
jit_eval(): cleaning up..
jit_var_dec_ref_int(5): 0
jit_var_dec_ref_int(2): 0
jit_eval(): done.
jit_all(<@>, size=1)
jit_memset_async(<@>, isize=1, size=3)
jit_reduce(<@>, type=uint32, rtype=and, size=1)
jit_var_dec_ref_ext(7): 0
jit_var_free(7)
jit_free(<@>, type=host-async, size=64)
jit_var_dec_ref_ext(5): 0
jit_var_free(5)
jit_free(<@>, type=host-async, size=64)
jit_var_dec_ref_ext(4): 0
jit_var_free(4)
jit_free(<@>, type=host-async, size=64)
jit_var_dec_ref_ext(2): 0
jit_var_free(2)
jit_var_dec_ref_ext(1): 0
jit_var_free(1)
jit_shutdown(): releasing 1 stream ..
jit_free_flush(): scheduling 3 deallocations
jit_shutdown(): releasing 3 kernels ..
jit_malloc_trim(): freed
 - host-async memory: 192 B in 3 allocations
jit_shutdown(): done
