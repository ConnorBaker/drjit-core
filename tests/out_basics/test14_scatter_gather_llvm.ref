jit_trace_append(1): $r0_0 = trunc i64 $i to $t0$n$r0_1 = insertelement <$w x $t0> undef, $t0 $r0_0, i32 0$n$r0_2 = shufflevector <$w x $t0> $r0_1, <$w x $t0> undef, <$w x i32> $z$n$r0 = add <$w x $t0> $r0_2, $l0
jit_var_inc_ref_ext(1): 1
jit_var_inc_ref_ext(1): 2
jit_var_dec_ref_ext(1): 1
jit_var_inc_ref_int(1): 1
jit_trace_append(2 <- 1): $r0 = sub <$w x $t0> $z, $r1
jit_var_inc_ref_ext(2): 1
jit_var_dec_ref_ext(1): 0
jit_malloc(type=host, size=64): <@> (new allocation)
jit_var_map(3): <@>, size=4, free=1
jit_var_inc_ref_ext(3): 1
jit_var_copy(3, size=4)
jit_trace_append(4): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(4): 1
jit_eval(): begin.
jit_assemble(size=1024): register map:
   - %r0 -> 1
   - %r1 -> 2 [out]
jit_malloc(type=host, size=4096): <@> (new allocation)
jit_run(): launching kernel (n=1024, in=0, out=1, ops=2) ..
define void @enoki_@@@@@@@@@@@@@@@@(i64 %start, i64 %end, i8** %ptrs) #0 alignstack(32) {
entry:
    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = trunc i64 %index to i32
    %r0_1 = insertelement <8 x i32> undef, i32 %r0_0, i32 0
    %r0_2 = shufflevector <8 x i32> %r0_1, <8 x i32> undef, <8 x i32> zeroinitializer
    %r0 = add <8 x i32> %r0_2, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>

    ; Evaluate %r1
    %r1 = sub <8 x i32> zeroinitializer, %r0

    ; Store %r1
    %r1_i = getelementptr inbounds i32, i32* %a0, i64 %index
    %r1_p = bitcast i32* %r1_i to <8 x i32>*
    store <8 x i32> %r1, <8 x i32>* %r1_p, align 32, !noalias !1

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" }
jit_run(): processing 128 packets and 0 scalar entries
jit_assemble(size=1): register map:
   - %p0 -> 4 [scalar] [out]
jit_malloc(type=host, size=64): <@> (new allocation)
jit_run(): launching kernel (n=1, in=0, out=1, ops=1) ..
define void @enoki_@@@@@@@@@@@@@@@@(i64 %start, i64 %end, i8** %ptrs) #0 alignstack(32) {
entry:
    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i8*
    %a0_s = load i8, i8* %a0, align 1, !alias.scope !1
    %a0_s1 = trunc i8 %a0_s to i1
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Evaluate %p0
    %p0_0 = insertelement <8 x i1> undef, i1 1, i32 0
    %p0 = shufflevector <8 x i1> %p0_0, <8 x i1> undef, <8 x i32> zeroinitializer

    ; Store %p0
    %p0_p = bitcast i8* %a0 to <8 x i8>*
    %p0_e = zext <8 x i1> %p0 to <8 x i8>
    store <8 x i8> %p0_e, <8 x i8>* %p0_p, align 8, !noalias !1

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" }
jit_run(): processing 1 packet and 0 scalar entries
jit_eval(): cleaning up..
jit_var_dec_ref_int(1): 0
jit_var_free(1)
jit_eval(): done.
jit_var_copy_ptr(5): <@>
jit_var_inc_ref_ext(5): 1
jit_var_inc_ref_int(5): 1
jit_var_inc_ref_int(3): 1
jit_var_inc_ref_int(4): 1
jit_trace_append(6 <- 5, 3, 4): $r0_0 = bitcast $t1 $r1 to $t0*$n$r0_1 = getelementptr $t0, $t0* $r0_0, <$w x $t2> $r2$n$r0 = call <$w x $t0> @llvm.masked.gather.v$w$a0(<$w x $t0*> $r0$S_1, i32 $s0, <$w x $t3> $r3, <$w x $t0> $z)
jit_var_inc_ref_ext(6): 1
jit_var_dec_ref_ext(5): 0
jit_var_set_extra_dep(6, 2)
jit_var_inc_ref_ext(2): 2
jit_var_dec_ref_ext(4): 0
jit_eval(): begin.
jit_assemble(size=4): register map:
   - %r0 -> 3 [in]
   - %p1 -> 4 [scalar] [in]
   - %rd2 -> 5 [scalar] [in]
   - %r3 -> 6 [out]
jit_malloc(type=host, size=64): <@> (new allocation)
jit_run(): launching kernel (n=4, in=3, out=1, ops=4) ..
define void @enoki_@@@@@@@@@@@@@@@@(i64 %start, i64 %end, i8** %ptrs) #0 alignstack(32) {
entry:
    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i8*
    %a1_s = load i8, i8* %a1, align 1, !alias.scope !1
    %a1_s1 = trunc i8 %a1_s to i1

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %rd2 = load i8*, i8** %a2_i, align 8, !alias.scope !1

    ; Prepare argument 3
    %a3_i = getelementptr inbounds i8*, i8** %ptrs, i32 3
    %a3_p = load i8*, i8** %a3_i, align 8, !alias.scope !1
    %a3 = bitcast i8* %a3_p to i32*
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Load %r0
    %r0_i = getelementptr inbounds i32, i32* %a0, i64 %index
    %r0_p = bitcast i32* %r0_i to <8 x i32>*
    %r0 = load <8 x i32>, <8 x i32>* %r0_p, align 32, !alias.scope !1

    ; Load %p1
    %p1_z = insertelement <8 x i1> undef, i1 %a1_s1, i32 0
    %p1 = shufflevector <8 x i1> %p1_z, <8 x i1> undef, <8 x i32> zeroinitializer

    ; Evaluate %r3
    %r3_0 = bitcast i8* %rd2 to i32*
    %r3_1 = getelementptr i32, i32* %r3_0, <8 x i32> %r0
    %r3 = call <8 x i32> @llvm.masked.gather.v8i32(<8 x i32*> %r3_1, i32 4, <8 x i1> %p1, <8 x i32> zeroinitializer)

    ; Store %r3
    %r3_i = getelementptr inbounds i32, i32* %a3, i64 %index
    %r3_p = bitcast i32* %r3_i to <8 x i32>*
    store <8 x i32> %r3, <8 x i32>* %r3_p, align 32, !noalias !1

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2
}

define void @enoki_@@@@@@@@@@@@@@@@_scalar(i64 %start, i64 %end, i8** %ptrs) #0 {
entry:
    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i8*
    %a1_s = load i8, i8* %a1, align 1, !alias.scope !1
    %a1_s1 = trunc i8 %a1_s to i1

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %rd2 = load i8*, i8** %a2_i, align 8, !alias.scope !1

    ; Prepare argument 3
    %a3_i = getelementptr inbounds i8*, i8** %ptrs, i32 3
    %a3_p = load i8*, i8** %a3_i, align 8, !alias.scope !1
    %a3 = bitcast i8* %a3_p to i32*
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Load %r0
    %r0_i = getelementptr inbounds i32, i32* %a0, i64 %index
    %r0_p = bitcast i32* %r0_i to <1 x i32>*
    %r0 = load <1 x i32>, <1 x i32>* %r0_p, align 4, !alias.scope !1

    ; Load %p1
    %p1_z = insertelement <1 x i1> undef, i1 %a1_s1, i32 0
    %p1 = shufflevector <1 x i1> %p1_z, <1 x i1> undef, <1 x i32> zeroinitializer

    ; Evaluate %r3
    %r3_0 = bitcast i8* %rd2 to i32*
    %r3_1 = getelementptr i32, i32* %r3_0, <1 x i32> %r0
    %r3 = call <1 x i32> @llvm.masked.gather.v1i32(<1 x i32*> %r3_1, i32 4, <1 x i1> %p1, <1 x i32> zeroinitializer)

    ; Store %r3
    %r3_i = getelementptr inbounds i32, i32* %a3, i64 %index
    %r3_p = bitcast i32* %r3_i to <1 x i32>*
    store <1 x i32> %r3, <1 x i32>* %r3_p, align 4, !noalias !1

    %index_next = add i64 %index, 1
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2
}

declare <8 x i32> @llvm.masked.gather.v8i32(<8 x i32*>, i32, <8 x i1>, <8 x i32>)
declare <1 x i32> @llvm.masked.gather.v1i32(<1 x i32*>, i32, <1 x i1>, <1 x i32>)

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" }
jit_run(): processing 0 packets and 4 scalar entries
jit_eval(): cleaning up..
jit_var_dec_ref_int(5): 0
jit_var_free(5)
jit_var_dec_ref_int(3): 0
jit_var_dec_ref_int(4): 0
jit_var_free(4)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(2): 1
jit_eval(): done.
[-34, -62, -75, -2]
jit_trace_append(7): $r0_0 = insertelement <$w x $t0> undef, $t0 3, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(7): 1
jit_var_inc_ref_int(6): 1
jit_var_inc_ref_int(7): 1
jit_trace_append(8 <- 6, 7): $r0 = mul <$w x $t0> $r1, $r2
jit_var_inc_ref_ext(8): 1
jit_trace_append(9): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(9): 1
jit_var_copy_ptr(10): <@>
jit_var_inc_ref_ext(10): 1
jit_var_inc_ref_int(10): 1
jit_var_inc_ref_int(8): 1
jit_var_inc_ref_int(3): 1
jit_trace_append(11 <- 10, 8, 3): $r0_0 = bitcast $t1 $r1 to $t2*$n$r0_1 = getelementptr $t2, $t2* $r0_0, <$w x $t3> $r3$ncall void @llvm.masked.scatter.v$w$a2(<$w x $t2> $r2, <$w x $t2*> $r0$S_1, i32 $s1, <$w x i1> $O)
jit_var_inc_ref_ext(11): 1
jit_var_mark_side_effect(11)
jit_var_inc_ref_ext(11): 2
jit_var_dec_ref_ext(10): 0
jit_var_set_extra_dep(11, 2)
jit_var_inc_ref_ext(2): 2
jit_var_mark_dirty(2)
jit_var_dec_ref_ext(11): 1
jit_var_dec_ref_ext(9): 0
jit_var_free(9)
jit_var_dec_ref_ext(8): 0
jit_var_dec_ref_ext(7): 0
jit_trace_append(12): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(12): 1
jit_eval(): begin.
jit_assemble(size=4): register map:
   - %r0 -> 6 [in]
   - %r1 -> 7 [scalar]
   - %r2 -> 8
   - %r3 -> 3 [in]
   - %rd4 -> 10 [scalar] [in]
   - %u5 -> 11 [se]
jit_run(): launching kernel (n=4, in=3, out=0, ops=6) ..
define void @enoki_@@@@@@@@@@@@@@@@(i64 %start, i64 %end, i8** %ptrs) #0 alignstack(32) {
entry:
    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %rd4 = load i8*, i8** %a2_i, align 8, !alias.scope !1
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Load %r0
    %r0_i = getelementptr inbounds i32, i32* %a0, i64 %index
    %r0_p = bitcast i32* %r0_i to <8 x i32>*
    %r0 = load <8 x i32>, <8 x i32>* %r0_p, align 32, !alias.scope !1

    ; Evaluate %r1
    %r1_0 = insertelement <8 x i32> undef, i32 3, i32 0
    %r1 = shufflevector <8 x i32> %r1_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %r2
    %r2 = mul <8 x i32> %r0, %r1

    ; Load %r3
    %r3_i = getelementptr inbounds i32, i32* %a1, i64 %index
    %r3_p = bitcast i32* %r3_i to <8 x i32>*
    %r3 = load <8 x i32>, <8 x i32>* %r3_p, align 32, !alias.scope !1

    ; Evaluate %u5
    %u5_0 = bitcast i8* %rd4 to i32*
    %u5_1 = getelementptr i32, i32* %u5_0, <8 x i32> %r3
    call void @llvm.masked.scatter.v8i32(<8 x i32> %r2, <8 x i32*> %u5_1, i32 8, <8 x i1> <i1 1, i1 1, i1 1, i1 1, i1 1, i1 1, i1 1, i1 1>)

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2
}

define void @enoki_@@@@@@@@@@@@@@@@_scalar(i64 %start, i64 %end, i8** %ptrs) #0 {
entry:
    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %rd4 = load i8*, i8** %a2_i, align 8, !alias.scope !1
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Load %r0
    %r0_i = getelementptr inbounds i32, i32* %a0, i64 %index
    %r0_p = bitcast i32* %r0_i to <1 x i32>*
    %r0 = load <1 x i32>, <1 x i32>* %r0_p, align 4, !alias.scope !1

    ; Evaluate %r1
    %r1_0 = insertelement <1 x i32> undef, i32 3, i32 0
    %r1 = shufflevector <1 x i32> %r1_0, <1 x i32> undef, <1 x i32> zeroinitializer

    ; Evaluate %r2
    %r2 = mul <1 x i32> %r0, %r1

    ; Load %r3
    %r3_i = getelementptr inbounds i32, i32* %a1, i64 %index
    %r3_p = bitcast i32* %r3_i to <1 x i32>*
    %r3 = load <1 x i32>, <1 x i32>* %r3_p, align 4, !alias.scope !1

    ; Evaluate %u5
    %u5_0 = bitcast i8* %rd4 to i32*
    %u5_1 = getelementptr i32, i32* %u5_0, <1 x i32> %r3
    call void @llvm.masked.scatter.v1i32(<1 x i32> %r2, <1 x i32*> %u5_1, i32 8, <1 x i1> <i1 1>)

    %index_next = add i64 %index, 1
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2
}

declare void @llvm.masked.scatter.v8i32(<8 x i32>, <8 x i32*>, i32, <8 x i1>)
declare void @llvm.masked.scatter.v1i32(<1 x i32>, <1 x i32*>, i32, <1 x i1>)

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" }
jit_run(): processing 0 packets and 4 scalar entries
jit_assemble(size=1): register map:
   - %p0 -> 12 [scalar] [out]
jit_malloc(type=host, size=64): <@> (reused global)
jit_run(): launching kernel (n=1, in=0, out=1, ops=1) ..
define void @enoki_@@@@@@@@@@@@@@@@(i64 %start, i64 %end, i8** %ptrs) #0 alignstack(32) {
entry:
    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i8*
    %a0_s = load i8, i8* %a0, align 1, !alias.scope !1
    %a0_s1 = trunc i8 %a0_s to i1
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Evaluate %p0
    %p0_0 = insertelement <8 x i1> undef, i1 1, i32 0
    %p0 = shufflevector <8 x i1> %p0_0, <8 x i1> undef, <8 x i32> zeroinitializer

    ; Store %p0
    %p0_p = bitcast i8* %a0 to <8 x i8>*
    %p0_e = zext <8 x i1> %p0 to <8 x i8>
    store <8 x i8> %p0_e, <8 x i8>* %p0_p, align 8, !noalias !1

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" }
jit_run(): processing 1 packet and 0 scalar entries
jit_eval(): cleaning up..
jit_var_dec_ref_int(6): 0
jit_var_dec_ref_int(7): 0
jit_var_free(7)
jit_var_dec_ref_int(10): 0
jit_var_free(10)
jit_var_dec_ref_int(8): 0
jit_var_free(8)
jit_var_dec_ref_int(3): 0
jit_var_dec_ref_ext(2): 1
jit_var_dec_ref_ext(11): 0
jit_var_free(11)
jit_eval(): done.
jit_var_copy_ptr(13): <@>
jit_var_inc_ref_ext(13): 1
jit_var_inc_ref_int(13): 1
jit_var_inc_ref_int(3): 1
jit_var_inc_ref_int(12): 1
jit_trace_append(14 <- 13, 3, 12): $r0_0 = bitcast $t1 $r1 to $t0*$n$r0_1 = getelementptr $t0, $t0* $r0_0, <$w x $t2> $r2$n$r0 = call <$w x $t0> @llvm.masked.gather.v$w$a0(<$w x $t0*> $r0$S_1, i32 $s0, <$w x $t3> $r3, <$w x $t0> $z)
jit_var_inc_ref_ext(14): 1
jit_var_dec_ref_ext(13): 0
jit_var_set_extra_dep(14, 2)
jit_var_inc_ref_ext(2): 2
jit_var_dec_ref_ext(6): 0
jit_var_free(6)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(12): 0
jit_eval(): begin.
jit_assemble(size=4): register map:
   - %r0 -> 3 [in]
   - %p1 -> 12 [scalar] [in]
   - %rd2 -> 13 [scalar] [in]
   - %r3 -> 14 [out]
jit_malloc(type=host, size=64): <@> (reused global)
jit_run(): launching kernel (n=4, in=3, out=1, ops=4) ..
define void @enoki_@@@@@@@@@@@@@@@@(i64 %start, i64 %end, i8** %ptrs) #0 alignstack(32) {
entry:
    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i8*
    %a1_s = load i8, i8* %a1, align 1, !alias.scope !1
    %a1_s1 = trunc i8 %a1_s to i1

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %rd2 = load i8*, i8** %a2_i, align 8, !alias.scope !1

    ; Prepare argument 3
    %a3_i = getelementptr inbounds i8*, i8** %ptrs, i32 3
    %a3_p = load i8*, i8** %a3_i, align 8, !alias.scope !1
    %a3 = bitcast i8* %a3_p to i32*
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Load %r0
    %r0_i = getelementptr inbounds i32, i32* %a0, i64 %index
    %r0_p = bitcast i32* %r0_i to <8 x i32>*
    %r0 = load <8 x i32>, <8 x i32>* %r0_p, align 32, !alias.scope !1

    ; Load %p1
    %p1_z = insertelement <8 x i1> undef, i1 %a1_s1, i32 0
    %p1 = shufflevector <8 x i1> %p1_z, <8 x i1> undef, <8 x i32> zeroinitializer

    ; Evaluate %r3
    %r3_0 = bitcast i8* %rd2 to i32*
    %r3_1 = getelementptr i32, i32* %r3_0, <8 x i32> %r0
    %r3 = call <8 x i32> @llvm.masked.gather.v8i32(<8 x i32*> %r3_1, i32 4, <8 x i1> %p1, <8 x i32> zeroinitializer)

    ; Store %r3
    %r3_i = getelementptr inbounds i32, i32* %a3, i64 %index
    %r3_p = bitcast i32* %r3_i to <8 x i32>*
    store <8 x i32> %r3, <8 x i32>* %r3_p, align 32, !noalias !1

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2
}

define void @enoki_@@@@@@@@@@@@@@@@_scalar(i64 %start, i64 %end, i8** %ptrs) #0 {
entry:
    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i8*
    %a1_s = load i8, i8* %a1, align 1, !alias.scope !1
    %a1_s1 = trunc i8 %a1_s to i1

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %rd2 = load i8*, i8** %a2_i, align 8, !alias.scope !1

    ; Prepare argument 3
    %a3_i = getelementptr inbounds i8*, i8** %ptrs, i32 3
    %a3_p = load i8*, i8** %a3_i, align 8, !alias.scope !1
    %a3 = bitcast i8* %a3_p to i32*
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Load %r0
    %r0_i = getelementptr inbounds i32, i32* %a0, i64 %index
    %r0_p = bitcast i32* %r0_i to <1 x i32>*
    %r0 = load <1 x i32>, <1 x i32>* %r0_p, align 4, !alias.scope !1

    ; Load %p1
    %p1_z = insertelement <1 x i1> undef, i1 %a1_s1, i32 0
    %p1 = shufflevector <1 x i1> %p1_z, <1 x i1> undef, <1 x i32> zeroinitializer

    ; Evaluate %r3
    %r3_0 = bitcast i8* %rd2 to i32*
    %r3_1 = getelementptr i32, i32* %r3_0, <1 x i32> %r0
    %r3 = call <1 x i32> @llvm.masked.gather.v1i32(<1 x i32*> %r3_1, i32 4, <1 x i1> %p1, <1 x i32> zeroinitializer)

    ; Store %r3
    %r3_i = getelementptr inbounds i32, i32* %a3, i64 %index
    %r3_p = bitcast i32* %r3_i to <1 x i32>*
    store <1 x i32> %r3, <1 x i32>* %r3_p, align 4, !noalias !1

    %index_next = add i64 %index, 1
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2
}

declare <8 x i32> @llvm.masked.gather.v8i32(<8 x i32*>, i32, <8 x i1>, <8 x i32>)
declare <1 x i32> @llvm.masked.gather.v1i32(<1 x i32*>, i32, <1 x i1>, <1 x i32>)

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" }
jit_run(): processing 0 packets and 4 scalar entries
jit_eval(): cleaning up..
jit_var_dec_ref_int(13): 0
jit_var_free(13)
jit_var_dec_ref_int(3): 0
jit_var_dec_ref_int(12): 0
jit_var_free(12)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(2): 1
jit_eval(): done.
[-102, -186, -225, -6]
[0, -1, -6, -3, -4, .. 1014 skipped .., -1019, -1020, -1021, -1022, -1023]
jit_var_dec_ref_ext(14): 0
jit_var_free(14)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(3): 0
jit_var_free(3)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(2): 0
jit_var_free(2)
jit_free(<@>, type=host, size=4096)
jit_malloc_trim(): freed
 - host memory: 4.19 KiB in 4 allocations
jit_shutdown(): done
