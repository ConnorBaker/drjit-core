jit_trace_append(1): $r0_0 = trunc i64 %index to $t0$n$r0_1 = insertelement <$w x $t0> undef, $t0 $r0_0, i32 0$n$r0_2 = shufflevector <$w x $t0> $r0_1, <$w x $t0> undef, <$w x i32> zeroinitializer$n$r0 = add <$w x $t0> $r0_2, $l0
jit_var_inc_ref_ext(1): 1
jit_var_set_size(1): 1024
jit_var_inc_ref_ext(1): 2
jit_var_dec_ref_ext(1): 1
jit_var_inc_ref_int(1): 1
jit_trace_append(2 <- 1): $r0 = sub <$w x $t0> zeroinitializer, $r1
jit_var_inc_ref_ext(2): 1
jit_var_dec_ref_ext(1): 0
jit_malloc(type=host, size=64): <@> (new allocation)
jit_var_map(3): <@>, size=4, free=1
jit_var_inc_ref_ext(3): 1
jit_var_copy(3, size=4)
jit_trace_append(4): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> zeroinitializer
jit_var_inc_ref_ext(4): 1
jit_set_scatter_gather_operand(index=2, gather=1)
jit_eval(): begin.
jit_assemble(size=1024): register map:
   - %r0 -> 1
   - %r1 -> 2 [out]
jit_malloc(type=host, size=4096): <@> (new allocation)
jit_run(): launching kernel (n=1024, in=0, out=1, ops=2) ..
define void @enoki_74f394bb(i64 %start, i64 %end, i8** %ptrs) norecurse nounwind alignstack(32) "target-cpu"="skylake" {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = trunc i64 %index to i32
    %r0_1 = insertelement <8 x i32> undef, i32 %r0_0, i32 0
    %r0_2 = shufflevector <8 x i32> %r0_1, <8 x i32> undef, <8 x i32> zeroinitializer
    %r0 = add <8 x i32> %r0_2, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>

    ; Evaluate %r1
    %r1 = sub <8 x i32> zeroinitializer, %r0

    ; Store %r1
    %r1_i = getelementptr inbounds i32, i32* %a0, i64 %index
    %r1_p = bitcast i32* %r1_i to <8 x i32>*
    store <8 x i32> %r1, <8 x i32>* %r1_p, align 32, !noalias !1

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}
}

!0 = !{!0}
!1 = !{!1, !0}

jit_assemble(size=1): register map:
   - %p0 -> 4 [scalar] [out]
jit_malloc(type=host, size=64): <@> (new allocation)
jit_run(): launching kernel (n=1, in=0, out=1, ops=1) ..
define void @enoki_2ba69159(i64 %start, i64 %end, i8** %ptrs) norecurse nounwind alignstack(32) "target-cpu"="skylake" {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i8*
    %a0_s = load i8, i8* %a0, align 1, !alias.scope !1
    %a0_s1 = trunc i8 %a0_s to i1
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Evaluate %p0
    %p0_0 = insertelement <8 x i1> undef, i1 1, i32 0
    %p0 = shufflevector <8 x i1> %p0_0, <8 x i1> undef, <8 x i32> zeroinitializer

    ; Store %p0
    %p0_p = bitcast i8* %a0 to <8 x i8>*
    %p0_e = zext <8 x i1> %p0 to <8 x i8>
    store <8 x i8> %p0_e, <8 x i8>* %p0_p, align 8, !noalias !1

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}
}

!0 = !{!0}
!1 = !{!1, !0}

jit_eval(): cleaning up..
jit_var_dec_ref_int(1): 0
jit_var_free(1)
jit_eval(): done.
jit_var_inc_ref_ext(4): 2
jit_var_copy_ptr(5): <@>
jit_var_inc_ref_ext(5): 1
jit_trace_append(6): $r0_0 = trunc i64 %index to $t0$n$r0_1 = insertelement <$w x $t0> undef, $t0 $r0_0, i32 0$n$r0_2 = shufflevector <$w x $t0> $r0_1, <$w x $t0> undef, <$w x i32> zeroinitializer$n$r0 = add <$w x $t0> $r0_2, $l0
jit_var_inc_ref_ext(6): 1
jit_var_set_size(6): 4
jit_trace_append(7): $r0_0 = trunc i64 %end to $t0$n$r0_1 = insertelement <$w x $t0> undef, $t0 $r0_0, i32 0$n$r0 = shufflevector <$w x $t0> $r0_1, <$w x $t0> undef, <$w x i32> zeroinitializer
jit_var_inc_ref_ext(7): 1
jit_var_inc_ref_int(6): 1
jit_var_inc_ref_int(7): 1
jit_trace_append(8 <- 6, 7): $r0 = icmp ult <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(8): 1
jit_var_dec_ref_ext(7): 0
jit_var_dec_ref_ext(6): 0
jit_var_inc_ref_int(4): 1
jit_var_inc_ref_int(8): 1
jit_trace_append(9 <- 4, 8): $r0 = and <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(9): 1
jit_var_dec_ref_ext(4): 1
jit_var_dec_ref_ext(8): 0
jit_var_inc_ref_int(5): 1
jit_var_inc_ref_int(3): 1
jit_trace_append(10 <- 5, 3): $r0_0 = inttoptr $t1 $r1 to $t0*$n$r0 = getelementptr $t0, $t0* $r0_0, <$w x $t2> $r2
jit_var_inc_ref_ext(10): 1
jit_var_inc_ref_int(10): 1
jit_var_inc_ref_int(9): 1
jit_var_inc_ref_ext(2): 2
jit_trace_append(11 <- 10, 9): $r0 = call <$w x $t0> @llvm.masked.gather.v$w$a0(<$w x $t0*> $r1, i32$s 4, <$w x $t2> $r2, <$w x $t0> $z0)
jit_var_inc_ref_ext(11): 1
jit_var_dec_ref_ext(10): 0
jit_var_dec_ref_ext(5): 0
jit_var_dec_ref_ext(9): 0
jit_set_scatter_gather_operand(index=0, gather=0)
jit_var_dec_ref_ext(4): 0
jit_eval(): begin.
jit_assemble(size=4): register map:
   - %r0 -> 6
   - %r1 -> 7 [scalar]
   - %p2 -> 8
   - %p3 -> 4 [scalar] [in]
   - %p4 -> 9
   - %r5 -> 3 [in]
   - %rd6 -> 5 [scalar] [in]
   - %r7 -> 10
   - %r8 -> 11 [out]
jit_malloc(type=host, size=64): <@> (new allocation)
jit_run(): launching kernel (n=4, in=3, out=1, ops=9) ..
define void @enoki_977bb2d8(i64 %start, i64 %end, i8** %ptrs) norecurse nounwind alignstack(32) "target-cpu"="skylake" {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i8*
    %a0_s = load i8, i8* %a0, align 1, !alias.scope !1
    %a0_s1 = trunc i8 %a0_s to i1

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %a2_p = load i8*, i8** %a2_i, align 8, !alias.scope !1

    ; Prepare argument 3
    %a3_i = getelementptr inbounds i8*, i8** %ptrs, i32 3
    %a3_p = load i8*, i8** %a3_i, align 8, !alias.scope !1
    %a3 = bitcast i8* %a3_p to i32*
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = trunc i64 %index to i32
    %r0_1 = insertelement <8 x i32> undef, i32 %r0_0, i32 0
    %r0_2 = shufflevector <8 x i32> %r0_1, <8 x i32> undef, <8 x i32> zeroinitializer
    %r0 = add <8 x i32> %r0_2, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>

    ; Evaluate %r1
    %r1_0 = trunc i64 %end to i32
    %r1_1 = insertelement <8 x i32> undef, i32 %r1_0, i32 0
    %r1 = shufflevector <8 x i32> %r1_1, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %p2
    %p2 = icmp ult <8 x i32> %r0, %r1

    ; Load %p3
    %p3_z = insertelement <8 x i1> undef, i1 %a0_s1, i32 0
    %p3 = shufflevector <8 x i1> %p3_z, <8 x i1> undef, <8 x i32> zeroinitializer

    ; Evaluate %p4
    %p4 = and <8 x i1> %p3, %p2

    ; Load %r5
    %r5_i = getelementptr inbounds i32, i32* %a1, i64 %index
    %r5_p = bitcast i32* %r5_i to <8 x i32>*
    %r5 = load <8 x i32>, <8 x i32>* %r5_p, align 32, !alias.scope !1

    ; Load %rd6
    %rd6 = ptrtoint i8* %a2_p to i64

    ; Evaluate %r7
    %r7_0 = inttoptr i64 %rd6 to i32*
    %r7 = getelementptr i32, i32* %r7_0, <8 x i32> %r5

    ; Evaluate %r8
    %r8 = call <8 x i32> @llvm.masked.gather.v8i32(<8 x i32*> %r7, i32 4, <8 x i1> %p4, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>)

    ; Store %r8
    %r8_i = getelementptr inbounds i32, i32* %a3, i64 %index
    %r8_p = bitcast i32* %r8_i to <8 x i32>*
    store <8 x i32> %r8, <8 x i32>* %r8_p, align 32, !noalias !1

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}
}

!0 = !{!0}
!1 = !{!1, !0}

declare <8 x i32> @llvm.masked.gather.v8i32(<8 x i32*>, i32, <8 x i1>, <8 x i32> )

jit_eval(): cleaning up..
jit_var_dec_ref_int(6): 0
jit_var_free(6)
jit_var_dec_ref_int(7): 0
jit_var_free(7)
jit_var_dec_ref_int(4): 0
jit_var_free(4)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_int(8): 0
jit_var_free(8)
jit_var_dec_ref_int(5): 0
jit_var_free(5)
jit_var_dec_ref_int(3): 0
jit_var_dec_ref_int(10): 0
jit_var_free(10)
jit_var_dec_ref_int(9): 0
jit_var_free(9)
jit_var_dec_ref_ext(2): 1
jit_eval(): done.
[-34, -62, -75, -2]
jit_trace_append(12): $r0_0 = insertelement <$w x $t0> undef, $t0 3, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> zeroinitializer
jit_var_inc_ref_ext(12): 1
jit_var_inc_ref_int(11): 1
jit_var_inc_ref_int(12): 1
jit_trace_append(13 <- 11, 12): $r0 = mul <$w x $t0> $r1, $r2
jit_var_inc_ref_ext(13): 1
jit_trace_append(14): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> zeroinitializer
jit_var_inc_ref_ext(14): 1
jit_set_scatter_gather_operand(index=2, gather=0)
jit_var_inc_ref_ext(14): 2
jit_var_copy_ptr(15): <@>
jit_var_inc_ref_ext(15): 1
jit_trace_append(16): $r0_0 = trunc i64 %index to $t0$n$r0_1 = insertelement <$w x $t0> undef, $t0 $r0_0, i32 0$n$r0_2 = shufflevector <$w x $t0> $r0_1, <$w x $t0> undef, <$w x i32> zeroinitializer$n$r0 = add <$w x $t0> $r0_2, $l0
jit_var_inc_ref_ext(16): 1
jit_var_set_size(16): 4
jit_trace_append(17): $r0_0 = trunc i64 %end to $t0$n$r0_1 = insertelement <$w x $t0> undef, $t0 $r0_0, i32 0$n$r0 = shufflevector <$w x $t0> $r0_1, <$w x $t0> undef, <$w x i32> zeroinitializer
jit_var_inc_ref_ext(17): 1
jit_var_inc_ref_int(16): 1
jit_var_inc_ref_int(17): 1
jit_trace_append(18 <- 16, 17): $r0 = icmp ult <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(18): 1
jit_var_dec_ref_ext(17): 0
jit_var_dec_ref_ext(16): 0
jit_var_inc_ref_int(14): 1
jit_var_inc_ref_int(18): 1
jit_trace_append(19 <- 14, 18): $r0 = and <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(19): 1
jit_var_dec_ref_ext(14): 1
jit_var_dec_ref_ext(18): 0
jit_var_inc_ref_int(15): 1
jit_var_inc_ref_int(3): 1
jit_trace_append(20 <- 15, 3): $r0_0 = inttoptr $t1 $r1 to $t0*$n$r0 = getelementptr $t0, $t0* $r0_0, <$w x $t2> $r2
jit_var_inc_ref_ext(20): 1
jit_var_inc_ref_int(13): 1
jit_var_inc_ref_int(20): 1
jit_var_inc_ref_int(19): 1
jit_var_inc_ref_ext(2): 2
jit_trace_append(21 <- 13, 20, 19): call <$w x $t1> @llvm.masked.scatter.v$w$a1(<$w x $t1> $r1, <$w x $t1*> $r2, i32$s 4, <$w x $t3> $r3)
jit_var_inc_ref_ext(21): 1
jit_var_mark_side_effect(21)
jit_var_dec_ref_ext(20): 0
jit_var_dec_ref_ext(15): 0
jit_var_dec_ref_ext(19): 0
jit_set_scatter_gather_operand(index=0, gather=0)
jit_var_mark_dirty(2)
jit_var_dec_ref_ext(14): 0
jit_var_dec_ref_ext(13): 0
jit_var_dec_ref_ext(12): 0
jit_trace_append(14): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> zeroinitializer (reused)
jit_var_inc_ref_ext(14): 1
jit_set_scatter_gather_operand(index=2, gather=1)
jit_eval(): begin.
jit_assemble(size=4): register map:
   - %r0 -> 16
   - %r1 -> 17 [scalar]
   - %p2 -> 18
   - %p3 -> 14 [scalar]
   - %p4 -> 19
   - %r5 -> 11 [in]
   - %r6 -> 12 [scalar]
   - %r7 -> 13
   - %r8 -> 3 [in]
   - %rd9 -> 15 [scalar] [in]
   - %r10 -> 20
   - 11 -> 21 [se]
jit_run(): launching kernel (n=4, in=3, out=0, ops=12) ..
define void @enoki_b073033d(i64 %start, i64 %end, i8** %ptrs) norecurse nounwind alignstack(32) "target-cpu"="skylake" {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %a2_p = load i8*, i8** %a2_i, align 8, !alias.scope !1
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = trunc i64 %index to i32
    %r0_1 = insertelement <8 x i32> undef, i32 %r0_0, i32 0
    %r0_2 = shufflevector <8 x i32> %r0_1, <8 x i32> undef, <8 x i32> zeroinitializer
    %r0 = add <8 x i32> %r0_2, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>

    ; Evaluate %r1
    %r1_0 = trunc i64 %end to i32
    %r1_1 = insertelement <8 x i32> undef, i32 %r1_0, i32 0
    %r1 = shufflevector <8 x i32> %r1_1, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %p2
    %p2 = icmp ult <8 x i32> %r0, %r1

    ; Evaluate %p3
    %p3_0 = insertelement <8 x i1> undef, i1 1, i32 0
    %p3 = shufflevector <8 x i1> %p3_0, <8 x i1> undef, <8 x i32> zeroinitializer

    ; Evaluate %p4
    %p4 = and <8 x i1> %p3, %p2

    ; Load %r5
    %r5_i = getelementptr inbounds i32, i32* %a0, i64 %index
    %r5_p = bitcast i32* %r5_i to <8 x i32>*
    %r5 = load <8 x i32>, <8 x i32>* %r5_p, align 32, !alias.scope !1

    ; Evaluate %r6
    %r6_0 = insertelement <8 x i32> undef, i32 3, i32 0
    %r6 = shufflevector <8 x i32> %r6_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %r7
    %r7 = mul <8 x i32> %r5, %r6

    ; Load %r8
    %r8_i = getelementptr inbounds i32, i32* %a1, i64 %index
    %r8_p = bitcast i32* %r8_i to <8 x i32>*
    %r8 = load <8 x i32>, <8 x i32>* %r8_p, align 32, !alias.scope !1

    ; Load %rd9
    %rd9 = ptrtoint i8* %a2_p to i64

    ; Evaluate %r10
    %r10_0 = inttoptr i64 %rd9 to i32*
    %r10 = getelementptr i32, i32* %r10_0, <8 x i32> %r8

    ; Evaluate 11
    call <8 x i32> @llvm.masked.scatter.v8i32(<8 x i32> %r7, <8 x i32*> %r10, i32 4, <8 x i1> %p4)

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}
}

!0 = !{!0}
!1 = !{!1, !0}

declare <8 x i32> @llvm.masked.scatter.v8i32(<8 x i32>, <8 x i32*>, i32, <8 x i1>)

jit_assemble(size=1): register map:
   - %p0 -> 14 [scalar] [out]
jit_malloc(type=host, size=64): <@> (reused global)
jit_run(): launching kernel (n=1, in=0, out=1, ops=1) ..
define void @enoki_2ba69159(i64 %start, i64 %end, i8** %ptrs) norecurse nounwind alignstack(32) "target-cpu"="skylake" {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i8*
    %a0_s = load i8, i8* %a0, align 1, !alias.scope !1
    %a0_s1 = trunc i8 %a0_s to i1
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Evaluate %p0
    %p0_0 = insertelement <8 x i1> undef, i1 1, i32 0
    %p0 = shufflevector <8 x i1> %p0_0, <8 x i1> undef, <8 x i32> zeroinitializer

    ; Store %p0
    %p0_p = bitcast i8* %a0 to <8 x i8>*
    %p0_e = zext <8 x i1> %p0 to <8 x i8>
    store <8 x i8> %p0_e, <8 x i8>* %p0_p, align 8, !noalias !1

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}
}

!0 = !{!0}
!1 = !{!1, !0}

jit_eval(): cleaning up..
jit_var_dec_ref_int(16): 0
jit_var_free(16)
jit_var_dec_ref_int(17): 0
jit_var_free(17)
jit_var_dec_ref_int(14): 0
jit_var_dec_ref_int(18): 0
jit_var_free(18)
jit_var_dec_ref_int(11): 0
jit_var_dec_ref_int(12): 0
jit_var_free(12)
jit_var_dec_ref_int(15): 0
jit_var_free(15)
jit_var_dec_ref_int(3): 0
jit_var_dec_ref_int(13): 0
jit_var_free(13)
jit_var_dec_ref_int(20): 0
jit_var_free(20)
jit_var_dec_ref_int(19): 0
jit_var_free(19)
jit_var_dec_ref_ext(2): 1
jit_var_dec_ref_ext(21): 0
jit_var_free(21)
jit_eval(): done.
jit_var_inc_ref_ext(14): 2
jit_var_copy_ptr(22): <@>
jit_var_inc_ref_ext(22): 1
jit_trace_append(23): $r0_0 = trunc i64 %index to $t0$n$r0_1 = insertelement <$w x $t0> undef, $t0 $r0_0, i32 0$n$r0_2 = shufflevector <$w x $t0> $r0_1, <$w x $t0> undef, <$w x i32> zeroinitializer$n$r0 = add <$w x $t0> $r0_2, $l0
jit_var_inc_ref_ext(23): 1
jit_var_set_size(23): 4
jit_trace_append(24): $r0_0 = trunc i64 %end to $t0$n$r0_1 = insertelement <$w x $t0> undef, $t0 $r0_0, i32 0$n$r0 = shufflevector <$w x $t0> $r0_1, <$w x $t0> undef, <$w x i32> zeroinitializer
jit_var_inc_ref_ext(24): 1
jit_var_inc_ref_int(23): 1
jit_var_inc_ref_int(24): 1
jit_trace_append(25 <- 23, 24): $r0 = icmp ult <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(25): 1
jit_var_dec_ref_ext(24): 0
jit_var_dec_ref_ext(23): 0
jit_var_inc_ref_int(14): 1
jit_var_inc_ref_int(25): 1
jit_trace_append(26 <- 14, 25): $r0 = and <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(26): 1
jit_var_dec_ref_ext(14): 1
jit_var_dec_ref_ext(25): 0
jit_var_inc_ref_int(22): 1
jit_var_inc_ref_int(3): 1
jit_trace_append(27 <- 22, 3): $r0_0 = inttoptr $t1 $r1 to $t0*$n$r0 = getelementptr $t0, $t0* $r0_0, <$w x $t2> $r2
jit_var_inc_ref_ext(27): 1
jit_var_inc_ref_int(27): 1
jit_var_inc_ref_int(26): 1
jit_var_inc_ref_ext(2): 2
jit_trace_append(28 <- 27, 26): $r0 = call <$w x $t0> @llvm.masked.gather.v$w$a0(<$w x $t0*> $r1, i32$s 4, <$w x $t2> $r2, <$w x $t0> $z0)
jit_var_inc_ref_ext(28): 1
jit_var_dec_ref_ext(27): 0
jit_var_dec_ref_ext(22): 0
jit_var_dec_ref_ext(26): 0
jit_set_scatter_gather_operand(index=0, gather=0)
jit_var_dec_ref_ext(11): 0
jit_var_free(11)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(14): 0
jit_eval(): begin.
jit_assemble(size=4): register map:
   - %r0 -> 23
   - %r1 -> 24 [scalar]
   - %p2 -> 25
   - %p3 -> 14 [scalar] [in]
   - %p4 -> 26
   - %r5 -> 3 [in]
   - %rd6 -> 22 [scalar] [in]
   - %r7 -> 27
   - %r8 -> 28 [out]
jit_malloc(type=host, size=64): <@> (reused global)
jit_run(): launching kernel (n=4, in=3, out=1, ops=9) ..
define void @enoki_977bb2d8(i64 %start, i64 %end, i8** %ptrs) norecurse nounwind alignstack(32) "target-cpu"="skylake" {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i8*
    %a0_s = load i8, i8* %a0, align 1, !alias.scope !1
    %a0_s1 = trunc i8 %a0_s to i1

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %a2_p = load i8*, i8** %a2_i, align 8, !alias.scope !1

    ; Prepare argument 3
    %a3_i = getelementptr inbounds i8*, i8** %ptrs, i32 3
    %a3_p = load i8*, i8** %a3_i, align 8, !alias.scope !1
    %a3 = bitcast i8* %a3_p to i32*
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = trunc i64 %index to i32
    %r0_1 = insertelement <8 x i32> undef, i32 %r0_0, i32 0
    %r0_2 = shufflevector <8 x i32> %r0_1, <8 x i32> undef, <8 x i32> zeroinitializer
    %r0 = add <8 x i32> %r0_2, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>

    ; Evaluate %r1
    %r1_0 = trunc i64 %end to i32
    %r1_1 = insertelement <8 x i32> undef, i32 %r1_0, i32 0
    %r1 = shufflevector <8 x i32> %r1_1, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %p2
    %p2 = icmp ult <8 x i32> %r0, %r1

    ; Load %p3
    %p3_z = insertelement <8 x i1> undef, i1 %a0_s1, i32 0
    %p3 = shufflevector <8 x i1> %p3_z, <8 x i1> undef, <8 x i32> zeroinitializer

    ; Evaluate %p4
    %p4 = and <8 x i1> %p3, %p2

    ; Load %r5
    %r5_i = getelementptr inbounds i32, i32* %a1, i64 %index
    %r5_p = bitcast i32* %r5_i to <8 x i32>*
    %r5 = load <8 x i32>, <8 x i32>* %r5_p, align 32, !alias.scope !1

    ; Load %rd6
    %rd6 = ptrtoint i8* %a2_p to i64

    ; Evaluate %r7
    %r7_0 = inttoptr i64 %rd6 to i32*
    %r7 = getelementptr i32, i32* %r7_0, <8 x i32> %r5

    ; Evaluate %r8
    %r8 = call <8 x i32> @llvm.masked.gather.v8i32(<8 x i32*> %r7, i32 4, <8 x i1> %p4, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>)

    ; Store %r8
    %r8_i = getelementptr inbounds i32, i32* %a3, i64 %index
    %r8_p = bitcast i32* %r8_i to <8 x i32>*
    store <8 x i32> %r8, <8 x i32>* %r8_p, align 32, !noalias !1

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}
}

!0 = !{!0}
!1 = !{!1, !0}

declare <8 x i32> @llvm.masked.gather.v8i32(<8 x i32*>, i32, <8 x i1>, <8 x i32> )

jit_eval(): cleaning up..
jit_var_dec_ref_int(23): 0
jit_var_free(23)
jit_var_dec_ref_int(24): 0
jit_var_free(24)
jit_var_dec_ref_int(14): 0
jit_var_free(14)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_int(25): 0
jit_var_free(25)
jit_var_dec_ref_int(22): 0
jit_var_free(22)
jit_var_dec_ref_int(3): 0
jit_var_dec_ref_int(27): 0
jit_var_free(27)
jit_var_dec_ref_int(26): 0
jit_var_free(26)
jit_var_dec_ref_ext(2): 1
jit_eval(): done.
[-102, -186, -225, -6]
[0, -1, -6, -3, -4, .. 1014 skipped .., -1019, -1020, -1021, -1022, -1023]
jit_var_dec_ref_ext(28): 0
jit_var_free(28)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(3): 0
jit_var_free(3)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(2): 0
jit_var_free(2)
jit_free(<@>, type=host, size=4096)
jit_malloc_trim(): freed
 - host memory: 4.19 KiB in 4 allocations
jit_shutdown(): done
