jit_var_new(1): $r0_0 = insertelement <$w x $t0> undef, i32 $i, i32 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n$r0 = add <$w x $t0> $r0_1, $l0
jit_var_inc_ref_ext(1): 1
jit_var_inc_ref_ext(1): 2
jit_var_dec_ref_ext(1): 1
jit_var_inc_ref_ext(1): 2
jit_var_inc_ref_ext(1): 3
jit_var_inc_ref_int(1): 1
jit_var_new(2 <- 1): $r0 = zext <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(2): 1
jit_var_inc_ref_int(1): 2
jit_var_new(3 <- 1): $r0 = zext <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(3): 1
jit_var_inc_ref_int(1): 3
jit_var_new(4 <- 1): $r0 = uitofp <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(4): 1
jit_var_inc_ref_int(1): 4
jit_var_new(5 <- 1): $r0 = uitofp <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(5): 1
jit_var_schedule(1)
jit_var_schedule(1)
jit_var_schedule(2)
jit_var_schedule(3)
jit_var_schedule(4)
jit_var_schedule(5)
jit_eval(): launching 1 kernel.
jit_assemble(size=1024): register map:
   - %r0 -> 1 [out]
jit_malloc(type=host-async, size=4096): <@> (new allocation)
   - %rd1 -> 2 [out]
jit_malloc(type=host-async, size=8192): <@> (new allocation)
   - %rd2 -> 3 [out]
jit_malloc(type=host-async, size=8192): <@> (new allocation)
   - %f3 -> 4 [out]
jit_malloc(type=host-async, size=4096): <@> (new allocation)
   - %d4 -> 5 [out]
jit_malloc(type=host-async, size=8192): <@> (new allocation)
  -> launching <@> (n=1024, in=0, out=5, ops=5):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i64*

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %a2_p = load i8*, i8** %a2_i, align 8, !alias.scope !1
    %a2 = bitcast i8* %a2_p to i64*

    ; Prepare argument 3
    %a3_i = getelementptr inbounds i8*, i8** %ptrs, i32 3
    %a3_p = load i8*, i8** %a3_i, align 8, !alias.scope !1
    %a3 = bitcast i8* %a3_p to float*

    ; Prepare argument 4
    %a4_i = getelementptr inbounds i8*, i8** %ptrs, i32 4
    %a4_p = load i8*, i8** %a4_i, align 8, !alias.scope !1
    %a4 = bitcast i8* %a4_p to double*
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = insertelement <8 x i32> undef, i32 %index, i32 0
    %r0_1 = shufflevector <8 x i32> %r0_0, <8 x i32> undef, <8 x i32> zeroinitializer
    %r0 = add <8 x i32> %r0_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>

    ; Store %r0
    %r0_i = getelementptr inbounds i32, i32* %a0, i32 %index
    %r0_p = bitcast i32* %r0_i to <8 x i32>*
    store <8 x i32> %r0, <8 x i32>* %r0_p, align 32, !noalias !1

    ; Evaluate %rd1
    %rd1 = zext <8 x i32> %r0 to <8 x i64>

    ; Store %rd1
    %rd1_i = getelementptr inbounds i64, i64* %a1, i32 %index
    %rd1_p = bitcast i64* %rd1_i to <8 x i64>*
    store <8 x i64> %rd1, <8 x i64>* %rd1_p, align 64, !noalias !1

    ; Evaluate %rd2
    %rd2 = zext <8 x i32> %r0 to <8 x i64>

    ; Store %rd2
    %rd2_i = getelementptr inbounds i64, i64* %a2, i32 %index
    %rd2_p = bitcast i64* %rd2_i to <8 x i64>*
    store <8 x i64> %rd2, <8 x i64>* %rd2_p, align 64, !noalias !1

    ; Evaluate %f3
    %f3 = uitofp <8 x i32> %r0 to <8 x float>

    ; Store %f3
    %f3_i = getelementptr inbounds float, float* %a3, i32 %index
    %f3_p = bitcast float* %f3_i to <8 x float>*
    store <8 x float> %f3, <8 x float>* %f3_p, align 32, !noalias !1

    ; Evaluate %d4
    %d4 = uitofp <8 x i32> %r0 to <8 x double>

    ; Store %d4
    %d4_i = getelementptr inbounds double, double* %a4, i32 %index
    %d4_p = bitcast double* %d4_i to <8 x double>*
    store <8 x double> %d4, <8 x double>* %d4_p, align 64, !noalias !1

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 128 packets in 1 block ..
jit_eval(): cleaning up..
jit_var_dec_ref_int(1): 3
jit_var_dec_ref_int(1): 2
jit_var_dec_ref_int(1): 1
jit_var_dec_ref_int(1): 0
jit_eval(): done.
value=[0, 1, 2, 3, 4, .. 1014 skipped .., 1019, 1020, 1021, 1022, 1023]
value=[0, 1, 2, 3, 4, .. 1014 skipped .., 1019, 1020, 1021, 1022, 1023]
value=[0, 1, 2, 3, 4, .. 1014 skipped .., 1019, 1020, 1021, 1022, 1023]
value=[0, 1, 2, 3, 4, .. 1014 skipped .., 1019, 1020, 1021, 1022, 1023]
value=[0, 1, 2, 3, 4, .. 1014 skipped .., 1019, 1020, 1021, 1022, 1023]
value=[0, 1, 2, 3, 4, .. 1014 skipped .., 1019, 1020, 1021, 1022, 1023]
jit_var_dec_ref_ext(5): 0
jit_var_free(5)
jit_free(<@>, type=host-async, size=8192)
jit_var_dec_ref_ext(4): 0
jit_var_free(4)
jit_free(<@>, type=host-async, size=4096)
jit_var_dec_ref_ext(3): 0
jit_var_free(3)
jit_free(<@>, type=host-async, size=8192)
jit_var_dec_ref_ext(2): 0
jit_var_free(2)
jit_free(<@>, type=host-async, size=8192)
jit_var_dec_ref_ext(1): 2
jit_var_dec_ref_ext(1): 1
jit_var_dec_ref_ext(1): 0
jit_var_free(1)
jit_free(<@>, type=host-async, size=4096)
jit_var_new(6): $r0_0 = insertelement <$w x $t0> undef, i32 $i, i32 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n$r0 = add <$w x $t0> $r0_1, $l0
jit_var_inc_ref_ext(6): 1
jit_var_inc_ref_ext(6): 2
jit_var_dec_ref_ext(6): 1
jit_var_new_literal(7): $r0_0 = insertelement <$w x $t0> undef, $t0 512, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(7): 1
jit_var_inc_ref_int(6): 1
jit_var_inc_ref_int(7): 1
jit_var_new(8 <- 6, 7): $r0 = sub <$w x $t0> $r1, $r2
jit_var_inc_ref_ext(8): 1
jit_var_dec_ref_ext(7): 0
jit_var_dec_ref_ext(6): 0
jit_var_inc_ref_ext(8): 2
jit_var_inc_ref_int(8): 1
jit_var_new(9 <- 8): $r0 = sext <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(9): 1
jit_var_inc_ref_int(8): 2
jit_var_new(10 <- 8): $r0 = sitofp <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(10): 1
jit_var_inc_ref_int(8): 3
jit_var_new(11 <- 8): $r0 = sitofp <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(11): 1
jit_var_schedule(8)
jit_var_schedule(9)
jit_var_schedule(10)
jit_var_schedule(11)
jit_eval(): launching 1 kernel.
jit_assemble(size=1024): register map:
   - %r0 -> 6
   - %r1 -> 7 [scalar]
   - %r2 -> 8 [out]
jit_malloc(type=host-async, size=4096): <@> (reused local)
   - %rd3 -> 9 [out]
jit_malloc(type=host-async, size=8192): <@> (reused local)
   - %f4 -> 10 [out]
jit_malloc(type=host-async, size=4096): <@> (reused local)
   - %d5 -> 11 [out]
jit_malloc(type=host-async, size=8192): <@> (reused local)
  -> launching <@> (n=1024, in=0, out=4, ops=6):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i64*

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %a2_p = load i8*, i8** %a2_i, align 8, !alias.scope !1
    %a2 = bitcast i8* %a2_p to float*

    ; Prepare argument 3
    %a3_i = getelementptr inbounds i8*, i8** %ptrs, i32 3
    %a3_p = load i8*, i8** %a3_i, align 8, !alias.scope !1
    %a3 = bitcast i8* %a3_p to double*
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = insertelement <8 x i32> undef, i32 %index, i32 0
    %r0_1 = shufflevector <8 x i32> %r0_0, <8 x i32> undef, <8 x i32> zeroinitializer
    %r0 = add <8 x i32> %r0_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>

    ; Evaluate %r1
    %r1_0 = insertelement <8 x i32> undef, i32 512, i32 0
    %r1 = shufflevector <8 x i32> %r1_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %r2
    %r2 = sub <8 x i32> %r0, %r1

    ; Store %r2
    %r2_i = getelementptr inbounds i32, i32* %a0, i32 %index
    %r2_p = bitcast i32* %r2_i to <8 x i32>*
    store <8 x i32> %r2, <8 x i32>* %r2_p, align 32, !noalias !1

    ; Evaluate %rd3
    %rd3 = sext <8 x i32> %r2 to <8 x i64>

    ; Store %rd3
    %rd3_i = getelementptr inbounds i64, i64* %a1, i32 %index
    %rd3_p = bitcast i64* %rd3_i to <8 x i64>*
    store <8 x i64> %rd3, <8 x i64>* %rd3_p, align 64, !noalias !1

    ; Evaluate %f4
    %f4 = sitofp <8 x i32> %r2 to <8 x float>

    ; Store %f4
    %f4_i = getelementptr inbounds float, float* %a2, i32 %index
    %f4_p = bitcast float* %f4_i to <8 x float>*
    store <8 x float> %f4, <8 x float>* %f4_p, align 32, !noalias !1

    ; Evaluate %d5
    %d5 = sitofp <8 x i32> %r2 to <8 x double>

    ; Store %d5
    %d5_i = getelementptr inbounds double, double* %a3, i32 %index
    %d5_p = bitcast double* %d5_i to <8 x double>*
    store <8 x double> %d5, <8 x double>* %d5_p, align 64, !noalias !1

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 128 packets in 1 block ..
jit_eval(): cleaning up..
jit_var_dec_ref_int(6): 0
jit_var_free(6)
jit_var_dec_ref_int(7): 0
jit_var_free(7)
jit_var_dec_ref_int(8): 2
jit_var_dec_ref_int(8): 1
jit_var_dec_ref_int(8): 0
jit_free_flush(): scheduling 1 deallocation
jit_eval(): done.
value=[-512, -511, -510, -509, -508, .. 1014 skipped .., 507, 508, 509, 510, 511]
value=[-512, -511, -510, -509, -508, .. 1014 skipped .., 507, 508, 509, 510, 511]
value=[-512, -511, -510, -509, -508, .. 1014 skipped .., 507, 508, 509, 510, 511]
value=[-512, -511, -510, -509, -508, .. 1014 skipped .., 507, 508, 509, 510, 511]
jit_var_dec_ref_ext(11): 0
jit_var_free(11)
jit_free(<@>, type=host-async, size=8192)
jit_var_dec_ref_ext(10): 0
jit_var_free(10)
jit_free(<@>, type=host-async, size=4096)
jit_var_dec_ref_ext(9): 0
jit_var_free(9)
jit_free(<@>, type=host-async, size=8192)
jit_var_dec_ref_ext(8): 1
jit_var_dec_ref_ext(8): 0
jit_var_free(8)
jit_free(<@>, type=host-async, size=4096)
jit_var_new(12): $r0_0 = insertelement <$w x $t0> undef, i32 $i, i32 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n$r0 = add <$w x $t0> $r0_1, $l0
jit_var_inc_ref_ext(12): 1
jit_var_inc_ref_int(12): 1
jit_var_new(13 <- 12): $r0 = zext <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(13): 1
jit_var_dec_ref_ext(12): 0
jit_var_inc_ref_int(13): 1
jit_var_new(14 <- 13): $r0 = trunc <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(14): 1
jit_var_inc_ref_int(13): 2
jit_var_new(15 <- 13): $r0 = trunc <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(15): 1
jit_var_inc_ref_ext(13): 2
jit_var_inc_ref_ext(13): 3
jit_var_inc_ref_int(13): 3
jit_var_new(16 <- 13): $r0 = uitofp <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(16): 1
jit_var_inc_ref_int(13): 4
jit_var_new(17 <- 13): $r0 = uitofp <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(17): 1
jit_var_schedule(14)
jit_var_schedule(15)
jit_var_schedule(13)
jit_var_schedule(13)
jit_var_schedule(16)
jit_var_schedule(17)
jit_eval(): launching 1 kernel.
jit_assemble(size=1024): register map:
   - %r0 -> 12
   - %rd1 -> 13 [out]
jit_malloc(type=host-async, size=8192): <@> (reused local)
   - %r2 -> 14 [out]
jit_malloc(type=host-async, size=4096): <@> (reused local)
   - %r3 -> 15 [out]
jit_malloc(type=host-async, size=4096): <@> (reused local)
   - %f4 -> 16 [out]
jit_malloc(type=host-async, size=4096): <@> (new allocation)
   - %d5 -> 17 [out]
jit_malloc(type=host-async, size=8192): <@> (reused local)
  -> launching <@> (n=1024, in=0, out=5, ops=6):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i64*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %a2_p = load i8*, i8** %a2_i, align 8, !alias.scope !1
    %a2 = bitcast i8* %a2_p to i32*

    ; Prepare argument 3
    %a3_i = getelementptr inbounds i8*, i8** %ptrs, i32 3
    %a3_p = load i8*, i8** %a3_i, align 8, !alias.scope !1
    %a3 = bitcast i8* %a3_p to float*

    ; Prepare argument 4
    %a4_i = getelementptr inbounds i8*, i8** %ptrs, i32 4
    %a4_p = load i8*, i8** %a4_i, align 8, !alias.scope !1
    %a4 = bitcast i8* %a4_p to double*
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = insertelement <8 x i32> undef, i32 %index, i32 0
    %r0_1 = shufflevector <8 x i32> %r0_0, <8 x i32> undef, <8 x i32> zeroinitializer
    %r0 = add <8 x i32> %r0_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>

    ; Evaluate %rd1
    %rd1 = zext <8 x i32> %r0 to <8 x i64>

    ; Store %rd1
    %rd1_i = getelementptr inbounds i64, i64* %a0, i32 %index
    %rd1_p = bitcast i64* %rd1_i to <8 x i64>*
    store <8 x i64> %rd1, <8 x i64>* %rd1_p, align 64, !noalias !1

    ; Evaluate %r2
    %r2 = trunc <8 x i64> %rd1 to <8 x i32>

    ; Store %r2
    %r2_i = getelementptr inbounds i32, i32* %a1, i32 %index
    %r2_p = bitcast i32* %r2_i to <8 x i32>*
    store <8 x i32> %r2, <8 x i32>* %r2_p, align 32, !noalias !1

    ; Evaluate %r3
    %r3 = trunc <8 x i64> %rd1 to <8 x i32>

    ; Store %r3
    %r3_i = getelementptr inbounds i32, i32* %a2, i32 %index
    %r3_p = bitcast i32* %r3_i to <8 x i32>*
    store <8 x i32> %r3, <8 x i32>* %r3_p, align 32, !noalias !1

    ; Evaluate %f4
    %f4 = uitofp <8 x i64> %rd1 to <8 x float>

    ; Store %f4
    %f4_i = getelementptr inbounds float, float* %a3, i32 %index
    %f4_p = bitcast float* %f4_i to <8 x float>*
    store <8 x float> %f4, <8 x float>* %f4_p, align 32, !noalias !1

    ; Evaluate %d5
    %d5 = uitofp <8 x i64> %rd1 to <8 x double>

    ; Store %d5
    %d5_i = getelementptr inbounds double, double* %a4, i32 %index
    %d5_p = bitcast double* %d5_i to <8 x double>*
    store <8 x double> %d5, <8 x double>* %d5_p, align 64, !noalias !1

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 128 packets in 1 block ..
jit_eval(): cleaning up..
jit_var_dec_ref_int(12): 0
jit_var_free(12)
jit_var_dec_ref_int(13): 3
jit_var_dec_ref_int(13): 2
jit_var_dec_ref_int(13): 1
jit_var_dec_ref_int(13): 0
jit_eval(): done.
value=[0, 1, 2, 3, 4, .. 1014 skipped .., 1019, 1020, 1021, 1022, 1023]
value=[0, 1, 2, 3, 4, .. 1014 skipped .., 1019, 1020, 1021, 1022, 1023]
value=[0, 1, 2, 3, 4, .. 1014 skipped .., 1019, 1020, 1021, 1022, 1023]
value=[0, 1, 2, 3, 4, .. 1014 skipped .., 1019, 1020, 1021, 1022, 1023]
value=[0, 1, 2, 3, 4, .. 1014 skipped .., 1019, 1020, 1021, 1022, 1023]
value=[0, 1, 2, 3, 4, .. 1014 skipped .., 1019, 1020, 1021, 1022, 1023]
jit_var_dec_ref_ext(17): 0
jit_var_free(17)
jit_free(<@>, type=host-async, size=8192)
jit_var_dec_ref_ext(16): 0
jit_var_free(16)
jit_free(<@>, type=host-async, size=4096)
jit_var_dec_ref_ext(13): 2
jit_var_dec_ref_ext(13): 1
jit_var_dec_ref_ext(15): 0
jit_var_free(15)
jit_free(<@>, type=host-async, size=4096)
jit_var_dec_ref_ext(14): 0
jit_var_free(14)
jit_free(<@>, type=host-async, size=4096)
jit_var_dec_ref_ext(13): 0
jit_var_free(13)
jit_free(<@>, type=host-async, size=8192)
jit_var_new(18): $r0_0 = insertelement <$w x $t0> undef, i32 $i, i32 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n$r0 = add <$w x $t0> $r0_1, $l0
jit_var_inc_ref_ext(18): 1
jit_var_inc_ref_int(18): 1
jit_var_new(19 <- 18): $r0 = zext <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(19): 1
jit_var_dec_ref_ext(18): 0
jit_var_new_literal(20): $r0_0 = insertelement <$w x $t0> undef, $t0 512, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(20): 1
jit_var_inc_ref_int(19): 1
jit_var_inc_ref_int(20): 1
jit_var_new(21 <- 19, 20): $r0 = sub <$w x $t0> $r1, $r2
jit_var_inc_ref_ext(21): 1
jit_var_dec_ref_ext(20): 0
jit_var_dec_ref_ext(19): 0
jit_var_inc_ref_int(21): 1
jit_var_new(22 <- 21): $r0 = trunc <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(22): 1
jit_var_inc_ref_ext(21): 2
jit_var_inc_ref_int(21): 2
jit_var_new(23 <- 21): $r0 = sitofp <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(23): 1
jit_var_inc_ref_int(21): 3
jit_var_new(24 <- 21): $r0 = sitofp <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(24): 1
jit_var_schedule(22)
jit_var_schedule(21)
jit_var_schedule(23)
jit_var_schedule(24)
jit_eval(): launching 1 kernel.
jit_assemble(size=1024): register map:
   - %r0 -> 18
   - %rd1 -> 19
   - %rd2 -> 20 [scalar]
   - %rd3 -> 21 [out]
jit_malloc(type=host-async, size=8192): <@> (reused local)
   - %r4 -> 22 [out]
jit_malloc(type=host-async, size=4096): <@> (reused local)
   - %f5 -> 23 [out]
jit_malloc(type=host-async, size=4096): <@> (reused local)
   - %d6 -> 24 [out]
jit_malloc(type=host-async, size=8192): <@> (reused local)
  -> launching <@> (n=1024, in=0, out=4, ops=7):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i64*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %a2_p = load i8*, i8** %a2_i, align 8, !alias.scope !1
    %a2 = bitcast i8* %a2_p to float*

    ; Prepare argument 3
    %a3_i = getelementptr inbounds i8*, i8** %ptrs, i32 3
    %a3_p = load i8*, i8** %a3_i, align 8, !alias.scope !1
    %a3 = bitcast i8* %a3_p to double*
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = insertelement <8 x i32> undef, i32 %index, i32 0
    %r0_1 = shufflevector <8 x i32> %r0_0, <8 x i32> undef, <8 x i32> zeroinitializer
    %r0 = add <8 x i32> %r0_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>

    ; Evaluate %rd1
    %rd1 = zext <8 x i32> %r0 to <8 x i64>

    ; Evaluate %rd2
    %rd2_0 = insertelement <8 x i64> undef, i64 512, i32 0
    %rd2 = shufflevector <8 x i64> %rd2_0, <8 x i64> undef, <8 x i32> zeroinitializer

    ; Evaluate %rd3
    %rd3 = sub <8 x i64> %rd1, %rd2

    ; Store %rd3
    %rd3_i = getelementptr inbounds i64, i64* %a0, i32 %index
    %rd3_p = bitcast i64* %rd3_i to <8 x i64>*
    store <8 x i64> %rd3, <8 x i64>* %rd3_p, align 64, !noalias !1

    ; Evaluate %r4
    %r4 = trunc <8 x i64> %rd3 to <8 x i32>

    ; Store %r4
    %r4_i = getelementptr inbounds i32, i32* %a1, i32 %index
    %r4_p = bitcast i32* %r4_i to <8 x i32>*
    store <8 x i32> %r4, <8 x i32>* %r4_p, align 32, !noalias !1

    ; Evaluate %f5
    %f5 = sitofp <8 x i64> %rd3 to <8 x float>

    ; Store %f5
    %f5_i = getelementptr inbounds float, float* %a2, i32 %index
    %f5_p = bitcast float* %f5_i to <8 x float>*
    store <8 x float> %f5, <8 x float>* %f5_p, align 32, !noalias !1

    ; Evaluate %d6
    %d6 = sitofp <8 x i64> %rd3 to <8 x double>

    ; Store %d6
    %d6_i = getelementptr inbounds double, double* %a3, i32 %index
    %d6_p = bitcast double* %d6_i to <8 x double>*
    store <8 x double> %d6, <8 x double>* %d6_p, align 64, !noalias !1

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 128 packets in 1 block ..
jit_eval(): cleaning up..
jit_var_dec_ref_int(19): 0
jit_var_free(19)
jit_var_dec_ref_int(18): 0
jit_var_free(18)
jit_var_dec_ref_int(20): 0
jit_var_free(20)
jit_var_dec_ref_int(21): 2
jit_var_dec_ref_int(21): 1
jit_var_dec_ref_int(21): 0
jit_free_flush(): scheduling 1 deallocation
jit_eval(): done.
value=[-512, -511, -510, -509, -508, .. 1014 skipped .., 507, 508, 509, 510, 511]
value=[-512, -511, -510, -509, -508, .. 1014 skipped .., 507, 508, 509, 510, 511]
value=[-512, -511, -510, -509, -508, .. 1014 skipped .., 507, 508, 509, 510, 511]
value=[-512, -511, -510, -509, -508, .. 1014 skipped .., 507, 508, 509, 510, 511]
jit_var_dec_ref_ext(24): 0
jit_var_free(24)
jit_free(<@>, type=host-async, size=8192)
jit_var_dec_ref_ext(23): 0
jit_var_free(23)
jit_free(<@>, type=host-async, size=4096)
jit_var_dec_ref_ext(21): 1
jit_var_dec_ref_ext(22): 0
jit_var_free(22)
jit_free(<@>, type=host-async, size=4096)
jit_var_dec_ref_ext(21): 0
jit_var_free(21)
jit_free(<@>, type=host-async, size=8192)
jit_var_new(25): $r0_0 = insertelement <$w x $t0> undef, i32 $i, i32 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n$r0 = add <$w x $t0> $r0_1, $l0
jit_var_inc_ref_ext(25): 1
jit_var_inc_ref_int(25): 1
jit_var_new(26 <- 25): $r0 = uitofp <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(26): 1
jit_var_dec_ref_ext(25): 0
jit_var_new_literal(27): $r0_0 = insertelement <$w x $t0> undef, $t0 0x4080000000000000, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(27): 1
jit_var_inc_ref_int(26): 1
jit_var_inc_ref_int(27): 1
jit_var_new(28 <- 26, 27): $r0 = fsub <$w x $t0> $r1, $r2
jit_var_inc_ref_ext(28): 1
jit_var_dec_ref_ext(27): 0
jit_var_dec_ref_ext(26): 0
jit_var_inc_ref_int(28): 1
jit_var_new(29 <- 28): $r0 = fptosi <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(29): 1
jit_var_inc_ref_int(28): 2
jit_var_new(30 <- 28): $r0 = fptosi <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(30): 1
jit_var_inc_ref_ext(28): 2
jit_var_inc_ref_int(28): 3
jit_var_new(31 <- 28): $r0 = fpext <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(31): 1
jit_var_schedule(29)
jit_var_schedule(30)
jit_var_schedule(28)
jit_var_schedule(31)
jit_eval(): launching 1 kernel.
jit_assemble(size=1024): register map:
   - %r0 -> 25
   - %f1 -> 26
   - %f2 -> 27 [scalar]
   - %f3 -> 28 [out]
jit_malloc(type=host-async, size=4096): <@> (reused local)
   - %r4 -> 29 [out]
jit_malloc(type=host-async, size=4096): <@> (reused local)
   - %rd5 -> 30 [out]
jit_malloc(type=host-async, size=8192): <@> (reused local)
   - %d6 -> 31 [out]
jit_malloc(type=host-async, size=8192): <@> (reused local)
  -> launching <@> (n=1024, in=0, out=4, ops=7):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to float*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %a2_p = load i8*, i8** %a2_i, align 8, !alias.scope !1
    %a2 = bitcast i8* %a2_p to i64*

    ; Prepare argument 3
    %a3_i = getelementptr inbounds i8*, i8** %ptrs, i32 3
    %a3_p = load i8*, i8** %a3_i, align 8, !alias.scope !1
    %a3 = bitcast i8* %a3_p to double*
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = insertelement <8 x i32> undef, i32 %index, i32 0
    %r0_1 = shufflevector <8 x i32> %r0_0, <8 x i32> undef, <8 x i32> zeroinitializer
    %r0 = add <8 x i32> %r0_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>

    ; Evaluate %f1
    %f1 = uitofp <8 x i32> %r0 to <8 x float>

    ; Evaluate %f2
    %f2_0 = insertelement <8 x float> undef, float 0x4080000000000000, i32 0
    %f2 = shufflevector <8 x float> %f2_0, <8 x float> undef, <8 x i32> zeroinitializer

    ; Evaluate %f3
    %f3 = fsub <8 x float> %f1, %f2

    ; Store %f3
    %f3_i = getelementptr inbounds float, float* %a0, i32 %index
    %f3_p = bitcast float* %f3_i to <8 x float>*
    store <8 x float> %f3, <8 x float>* %f3_p, align 32, !noalias !1

    ; Evaluate %r4
    %r4 = fptosi <8 x float> %f3 to <8 x i32>

    ; Store %r4
    %r4_i = getelementptr inbounds i32, i32* %a1, i32 %index
    %r4_p = bitcast i32* %r4_i to <8 x i32>*
    store <8 x i32> %r4, <8 x i32>* %r4_p, align 32, !noalias !1

    ; Evaluate %rd5
    %rd5 = fptosi <8 x float> %f3 to <8 x i64>

    ; Store %rd5
    %rd5_i = getelementptr inbounds i64, i64* %a2, i32 %index
    %rd5_p = bitcast i64* %rd5_i to <8 x i64>*
    store <8 x i64> %rd5, <8 x i64>* %rd5_p, align 64, !noalias !1

    ; Evaluate %d6
    %d6 = fpext <8 x float> %f3 to <8 x double>

    ; Store %d6
    %d6_i = getelementptr inbounds double, double* %a3, i32 %index
    %d6_p = bitcast double* %d6_i to <8 x double>*
    store <8 x double> %d6, <8 x double>* %d6_p, align 64, !noalias !1

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 128 packets in 1 block ..
jit_eval(): cleaning up..
jit_var_dec_ref_int(26): 0
jit_var_free(26)
jit_var_dec_ref_int(25): 0
jit_var_free(25)
jit_var_dec_ref_int(27): 0
jit_var_free(27)
jit_var_dec_ref_int(28): 2
jit_var_dec_ref_int(28): 1
jit_var_dec_ref_int(28): 0
jit_eval(): done.
value=[-512, -511, -510, -509, -508, .. 1014 skipped .., 507, 508, 509, 510, 511]
value=[-512, -511, -510, -509, -508, .. 1014 skipped .., 507, 508, 509, 510, 511]
value=[-512, -511, -510, -509, -508, .. 1014 skipped .., 507, 508, 509, 510, 511]
value=[-512, -511, -510, -509, -508, .. 1014 skipped .., 507, 508, 509, 510, 511]
jit_var_dec_ref_ext(31): 0
jit_var_free(31)
jit_free(<@>, type=host-async, size=8192)
jit_var_dec_ref_ext(28): 1
jit_var_dec_ref_ext(30): 0
jit_var_free(30)
jit_free(<@>, type=host-async, size=8192)
jit_var_dec_ref_ext(29): 0
jit_var_free(29)
jit_free(<@>, type=host-async, size=4096)
jit_var_dec_ref_ext(28): 0
jit_var_free(28)
jit_free(<@>, type=host-async, size=4096)
jit_var_new(32): $r0_0 = insertelement <$w x $t0> undef, i32 $i, i32 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n$r0 = add <$w x $t0> $r0_1, $l0
jit_var_inc_ref_ext(32): 1
jit_var_inc_ref_int(32): 1
jit_var_new(33 <- 32): $r0 = uitofp <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(33): 1
jit_var_dec_ref_ext(32): 0
jit_var_new_literal(34): $r0_0 = insertelement <$w x $t0> undef, $t0 0x4080000000000000, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(34): 1
jit_var_inc_ref_int(33): 1
jit_var_inc_ref_int(34): 1
jit_var_new(35 <- 33, 34): $r0 = fsub <$w x $t0> $r1, $r2
jit_var_inc_ref_ext(35): 1
jit_var_dec_ref_ext(34): 0
jit_var_dec_ref_ext(33): 0
jit_var_inc_ref_int(35): 1
jit_var_new(36 <- 35): $r0 = fptosi <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(36): 1
jit_var_inc_ref_int(35): 2
jit_var_new(37 <- 35): $r0 = fptosi <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(37): 1
jit_var_inc_ref_int(35): 3
jit_var_new(38 <- 35): $r0 = fptrunc <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(38): 1
jit_var_inc_ref_ext(35): 2
jit_var_schedule(36)
jit_var_schedule(37)
jit_var_schedule(38)
jit_var_schedule(35)
jit_eval(): launching 1 kernel.
jit_assemble(size=1024): register map:
   - %r0 -> 32
   - %d1 -> 33
   - %d2 -> 34 [scalar]
   - %d3 -> 35 [out]
jit_malloc(type=host-async, size=8192): <@> (reused local)
   - %r4 -> 36 [out]
jit_malloc(type=host-async, size=4096): <@> (reused local)
   - %rd5 -> 37 [out]
jit_malloc(type=host-async, size=8192): <@> (reused local)
   - %f6 -> 38 [out]
jit_malloc(type=host-async, size=4096): <@> (reused local)
  -> launching <@> (n=1024, in=0, out=4, ops=7):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to double*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %a2_p = load i8*, i8** %a2_i, align 8, !alias.scope !1
    %a2 = bitcast i8* %a2_p to i64*

    ; Prepare argument 3
    %a3_i = getelementptr inbounds i8*, i8** %ptrs, i32 3
    %a3_p = load i8*, i8** %a3_i, align 8, !alias.scope !1
    %a3 = bitcast i8* %a3_p to float*
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = insertelement <8 x i32> undef, i32 %index, i32 0
    %r0_1 = shufflevector <8 x i32> %r0_0, <8 x i32> undef, <8 x i32> zeroinitializer
    %r0 = add <8 x i32> %r0_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>

    ; Evaluate %d1
    %d1 = uitofp <8 x i32> %r0 to <8 x double>

    ; Evaluate %d2
    %d2_0 = insertelement <8 x double> undef, double 0x4080000000000000, i32 0
    %d2 = shufflevector <8 x double> %d2_0, <8 x double> undef, <8 x i32> zeroinitializer

    ; Evaluate %d3
    %d3 = fsub <8 x double> %d1, %d2

    ; Store %d3
    %d3_i = getelementptr inbounds double, double* %a0, i32 %index
    %d3_p = bitcast double* %d3_i to <8 x double>*
    store <8 x double> %d3, <8 x double>* %d3_p, align 64, !noalias !1

    ; Evaluate %r4
    %r4 = fptosi <8 x double> %d3 to <8 x i32>

    ; Store %r4
    %r4_i = getelementptr inbounds i32, i32* %a1, i32 %index
    %r4_p = bitcast i32* %r4_i to <8 x i32>*
    store <8 x i32> %r4, <8 x i32>* %r4_p, align 32, !noalias !1

    ; Evaluate %rd5
    %rd5 = fptosi <8 x double> %d3 to <8 x i64>

    ; Store %rd5
    %rd5_i = getelementptr inbounds i64, i64* %a2, i32 %index
    %rd5_p = bitcast i64* %rd5_i to <8 x i64>*
    store <8 x i64> %rd5, <8 x i64>* %rd5_p, align 64, !noalias !1

    ; Evaluate %f6
    %f6 = fptrunc <8 x double> %d3 to <8 x float>

    ; Store %f6
    %f6_i = getelementptr inbounds float, float* %a3, i32 %index
    %f6_p = bitcast float* %f6_i to <8 x float>*
    store <8 x float> %f6, <8 x float>* %f6_p, align 32, !noalias !1

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 128 packets in 1 block ..
jit_eval(): cleaning up..
jit_var_dec_ref_int(33): 0
jit_var_free(33)
jit_var_dec_ref_int(32): 0
jit_var_free(32)
jit_var_dec_ref_int(34): 0
jit_var_free(34)
jit_var_dec_ref_int(35): 2
jit_var_dec_ref_int(35): 1
jit_var_dec_ref_int(35): 0
jit_eval(): done.
value=[-512, -511, -510, -509, -508, .. 1014 skipped .., 507, 508, 509, 510, 511]
value=[-512, -511, -510, -509, -508, .. 1014 skipped .., 507, 508, 509, 510, 511]
value=[-512, -511, -510, -509, -508, .. 1014 skipped .., 507, 508, 509, 510, 511]
value=[-512, -511, -510, -509, -508, .. 1014 skipped .., 507, 508, 509, 510, 511]
jit_var_dec_ref_ext(35): 1
jit_var_dec_ref_ext(38): 0
jit_var_free(38)
jit_free(<@>, type=host-async, size=4096)
jit_var_dec_ref_ext(37): 0
jit_var_free(37)
jit_free(<@>, type=host-async, size=8192)
jit_var_dec_ref_ext(36): 0
jit_var_free(36)
jit_free(<@>, type=host-async, size=4096)
jit_var_dec_ref_ext(35): 0
jit_var_free(35)
jit_free(<@>, type=host-async, size=8192)
jit_shutdown(): releasing 1 thread state ..
jit_free_flush(): scheduling 4 deallocations
jit_shutdown(): releasing 6 kernels ..
jit_malloc_trim(): freed
 - host-async memory: 36 KiB in 6 allocations
jit_shutdown(): done
