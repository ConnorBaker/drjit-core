jit_set_device(device=-1, stream=0): creating stream
jit_var_new_literal(1): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(1): 1
jit_var_new_literal(1): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z (reused)
jit_var_inc_ref_ext(1): 2
jit_var_inc_ref_int(1): 1
jit_var_inc_ref_int(1): 2
jit_var_new(2 <- 1, 1): $r0 = add <$w x $t0> $r1, $r2
jit_var_inc_ref_ext(2): 1
jit_var_dec_ref_ext(1): 1
jit_var_dec_ref_ext(1): 0
jit_var_set_size(2): 3
jit_var_inc_ref_ext(2): 2
jit_var_dec_ref_ext(2): 1
jit_eval(): launching 1 kernel.
jit_assemble(size=3): register map:
   - %r0 -> 1 [scalar]
   - %r1 -> 2 [out]
jit_malloc(type=host-async, size=64): <@> (new allocation)
  -> launching <@> (n=3, in=0, out=1, ops=2):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = insertelement <8 x i32> undef, i32 1, i32 0
    %r0 = shufflevector <8 x i32> %r0_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %r1
    %r1 = add <8 x i32> %r0, %r0

    ; Store %r1
    %r1_i = getelementptr inbounds i32, i32* %a0, i32 %index
    %r1_p = bitcast i32* %r1_i to <8 x i32>*
    store <8 x i32> %r1, <8 x i32>* %r1_p, align 32, !noalias !1

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 1 packet
jit_eval(): cleaning up..
jit_var_dec_ref_int(1): 1
jit_var_dec_ref_int(1): 0
jit_var_free(1)
jit_eval(): done.
[2, 2, 2]
jit_var_dec_ref_ext(2): 0
jit_var_free(2)
jit_free(<@>, type=host-async, size=64)
jit_var_new_literal(3): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(3): 1
jit_var_new_literal(3): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z (reused)
jit_var_inc_ref_ext(3): 2
jit_var_inc_ref_int(3): 1
jit_var_inc_ref_int(3): 2
jit_var_new(4 <- 3, 3): $r0 = add <$w x $t0> $r1, $r2
jit_var_inc_ref_ext(4): 1
jit_var_dec_ref_ext(3): 1
jit_var_set_size(3): 3
jit_var_inc_ref_int(3): 3
jit_var_new(5 <- 3): $r0 = add <$w x $t0> $r1, $z
jit_var_inc_ref_ext(5): 1
jit_var_dec_ref_ext(3): 0
jit_eval(): launching 1 kernel.
jit_assemble(size=3): register map:
   - %r0 -> 3 [scalar]
   - %r1 -> 5 [out]
jit_malloc(type=host-async, size=64): <@> (reused local)
  -> launching <@> (n=3, in=0, out=1, ops=2):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = insertelement <8 x i32> undef, i32 1, i32 0
    %r0 = shufflevector <8 x i32> %r0_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %r1
    %r1 = add <8 x i32> %r0, zeroinitializer

    ; Store %r1
    %r1_i = getelementptr inbounds i32, i32* %a0, i32 %index
    %r1_p = bitcast i32* %r1_i to <8 x i32>*
    store <8 x i32> %r1, <8 x i32>* %r1_p, align 32, !noalias !1

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 1 packet
jit_eval(): cleaning up..
jit_var_dec_ref_int(3): 2
jit_eval(): done.
[1, 1, 1]
jit_var_dec_ref_ext(4): 0
jit_var_free(4)
jit_var_dec_ref_int(3): 1
jit_var_dec_ref_int(3): 0
jit_var_free(3)
jit_var_dec_ref_ext(5): 0
jit_var_free(5)
jit_free(<@>, type=host-async, size=64)
jit_var_new_literal(6): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(6): 1
jit_eval(): launching 1 kernel.
jit_assemble(size=1): register map:
   - %r0 -> 6 [scalar] [out]
jit_malloc(type=host-async, size=64): <@> (reused local)
  -> launching <@> (n=1, in=0, out=1, ops=1):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*
    %a0_s = load i32, i32* %a0, align 4, !alias.scope !1
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = insertelement <8 x i32> undef, i32 1, i32 0
    %r0 = shufflevector <8 x i32> %r0_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Store %r0
    %r0_p = bitcast i32* %a0 to <8 x i32>*
    store <8 x i32> %r0, <8 x i32>* %r0_p, align 32, !noalias !1

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 1 packet
jit_eval(): cleaning up..
jit_eval(): done.
jit_var_set_size(6): 3
jit_var_inc_ref_int(6): 1
jit_var_new(7 <- 6): $r0 = add <$w x $t0> $r1, $z
jit_var_inc_ref_ext(7): 1
jit_var_dec_ref_ext(6): 0
jit_eval(): launching 1 kernel.
jit_assemble(size=3): register map:
   - %r0 -> 6 [scalar] [in]
   - %r1 -> 7 [out]
jit_malloc(type=host-async, size=64): <@> (new allocation)
  -> launching <@> (n=3, in=1, out=1, ops=2):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*
    %a0_s = load i32, i32* %a0, align 4, !alias.scope !1

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Load %r0
    %r0_z = insertelement <8 x i32> undef, i32 %a0_s, i32 0
    %r0 = shufflevector <8 x i32> %r0_z, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %r1
    %r1 = add <8 x i32> %r0, zeroinitializer

    ; Store %r1
    %r1_i = getelementptr inbounds i32, i32* %a1, i32 %index
    %r1_p = bitcast i32* %r1_i to <8 x i32>*
    store <8 x i32> %r1, <8 x i32>* %r1_p, align 32, !noalias !1

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 1 packet
jit_eval(): cleaning up..
jit_var_dec_ref_int(6): 0
jit_var_free(6)
jit_free(<@>, type=host-async, size=64)
jit_free_flush(): scheduling 1 deallocation
jit_eval(): done.
[1, 1, 1]
jit_var_dec_ref_ext(7): 0
jit_var_free(7)
jit_free(<@>, type=host-async, size=64)
jit_shutdown(): releasing 1 stream ..
jit_free_flush(): scheduling 1 deallocation
jit_shutdown(): releasing 4 kernels ..
jit_malloc_trim(): freed
 - host-async memory: 128 B in 2 allocations
jit_shutdown(): done
