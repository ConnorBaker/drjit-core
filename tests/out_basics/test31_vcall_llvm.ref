jit_set_device(device=-1, stream=0): creating stream
jit_registry_put(<@>, domain="MyKey"): 1 (new)
jit_registry_put(<@>, domain="MyKey"): 2 (new)
jit_registry_put(<@>, domain="MyKey"): 3 (new)
jit_malloc(type=host, size=64): <@> (new allocation)
jit_var_map_mem(1): <@>, size=10, free=1
jit_var_inc_ref_ext(1): 1
jit_var_copy_mem(1, size=10)
jit_vcall(1, domain="MyKey")
jit_malloc(type=host, size=128): <@> (new allocation)
jit_malloc(type=host-async, size=64): <@> (new allocation)
jit_malloc(type=host, size=64): <@> (new allocation)
jit_malloc(type=host, size=64): <@> (new allocation)
jit_free(<@>, type=host, size=64)
jit_free(<@>, type=host, size=64)
jit_var_map_mem(2): <@>, size=10, free=1
jit_var_inc_ref_ext(2): 1
jit_var_inc_ref_int(2): 1
jit_var_inc_ref_ext(3): 1
jit_vcall(): registered variable 3: bucket 0 ((nil)) of size 2.
jit_var_inc_ref_int(2): 2
jit_var_inc_ref_ext(4): 1
jit_vcall(): registered variable 4: bucket 1 (0xa) of size 2.
jit_var_inc_ref_int(2): 3
jit_var_inc_ref_ext(5): 1
jit_vcall(): registered variable 5: bucket 2 (0xb) of size 4.
jit_var_inc_ref_int(2): 4
jit_var_inc_ref_ext(6): 1
jit_vcall(): registered variable 6: bucket 3 (0xc) of size 2.
jit_var_dec_ref_ext(2): 0
jit_var_inc_ref_ext(3): 2
jit_var_inc_ref_ext(4): 2
jit_var_inc_ref_ext(5): 2
jit_var_inc_ref_ext(6): 2
jit_var_inc_ref_ext(3): 3
jit_var_inc_ref_ext(4): 3
jit_var_inc_ref_ext(5): 3
jit_var_inc_ref_ext(6): 3
jit_malloc(type=host, size=64): <@> (reused global)
jit_var_map_mem(7): <@>, size=2, free=1
jit_var_inc_ref_ext(7): 1
jit_var_copy_mem(7, size=2)
jit_var_inc_ref_int(3): 1
jit_var_inc_ref_int(7): 1
jit_var_new(8 <- 3, 7): $r0 = icmp eq <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(8): 1
jit_eval(): launching 1 kernel.
jit_assemble(size=2): register map:
   - %r0 -> 3 [in]
   - %r1 -> 7 [in]
   - %p2 -> 8 [out]
jit_malloc(type=host-async, size=64): <@> (new allocation)
  -> launching <@> (n=2, in=2, out=1, ops=3):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %a2_p = load i8*, i8** %a2_i, align 8, !alias.scope !1
    %a2 = bitcast i8* %a2_p to i8*
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Load %r0
    %r0_i = getelementptr inbounds i32, i32* %a0, i32 %index
    %r0_p = bitcast i32* %r0_i to <8 x i32>*
    %r0 = load <8 x i32>, <8 x i32>* %r0_p, align 1, !alias.scope !1

    ; Load %r1
    %r1_i = getelementptr inbounds i32, i32* %a1, i32 %index
    %r1_p = bitcast i32* %r1_i to <8 x i32>*
    %r1 = load <8 x i32>, <8 x i32>* %r1_p, align 32, !alias.scope !1

    ; Evaluate %p2
    %p2 = icmp eq <8 x i32> %r0, %r1

    ; Store %p2
    %p2_i = getelementptr inbounds i8, i8* %a2, i32 %index
    %p2_p = bitcast i8* %p2_i to <8 x i8>*
    %p2_e = zext <8 x i1> %p2 to <8 x i8>
    store <8 x i8> %p2_e, <8 x i8>* %p2_p, align 8, !noalias !1

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 1 packet
jit_eval(): cleaning up..
jit_var_dec_ref_int(3): 0
jit_var_dec_ref_int(7): 0
jit_eval(): done.
jit_all(<@>, size=2)
jit_memset_async(<@>, isize=1, size=2)
jit_reduce(<@>, type=uint32, rtype=and, size=1)
jit_var_dec_ref_ext(8): 0
jit_var_free(8)
jit_free(<@>, type=host-async, size=64)
jit_var_dec_ref_ext(7): 0
jit_var_free(7)
jit_free(<@>, type=host-async, size=64)
jit_malloc(type=host, size=64): <@> (reused global)
jit_var_map_mem(9): <@>, size=2, free=1
jit_var_inc_ref_ext(9): 1
jit_var_copy_mem(9, size=2)
jit_var_inc_ref_int(4): 1
jit_var_inc_ref_int(9): 1
jit_var_new(10 <- 4, 9): $r0 = icmp eq <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(10): 1
jit_eval(): launching 1 kernel.
jit_assemble(size=2): register map:
   - %r0 -> 4 [in]
   - %r1 -> 9 [in]
   - %p2 -> 10 [out]
jit_malloc(type=host-async, size=64): <@> (reused local)
  -> launching <@> (n=2, in=2, out=1, ops=3):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %a2_p = load i8*, i8** %a2_i, align 8, !alias.scope !1
    %a2 = bitcast i8* %a2_p to i8*
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Load %r0
    %r0_i = getelementptr inbounds i32, i32* %a0, i32 %index
    %r0_p = bitcast i32* %r0_i to <8 x i32>*
    %r0 = load <8 x i32>, <8 x i32>* %r0_p, align 1, !alias.scope !1

    ; Load %r1
    %r1_i = getelementptr inbounds i32, i32* %a1, i32 %index
    %r1_p = bitcast i32* %r1_i to <8 x i32>*
    %r1 = load <8 x i32>, <8 x i32>* %r1_p, align 32, !alias.scope !1

    ; Evaluate %p2
    %p2 = icmp eq <8 x i32> %r0, %r1

    ; Store %p2
    %p2_i = getelementptr inbounds i8, i8* %a2, i32 %index
    %p2_p = bitcast i8* %p2_i to <8 x i8>*
    %p2_e = zext <8 x i1> %p2 to <8 x i8>
    store <8 x i8> %p2_e, <8 x i8>* %p2_p, align 8, !noalias !1

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 1 packet
jit_eval(): cleaning up..
jit_var_dec_ref_int(4): 0
jit_var_dec_ref_int(9): 0
jit_free_flush(): scheduling 1 deallocation
jit_eval(): done.
jit_all(<@>, size=2)
jit_memset_async(<@>, isize=1, size=2)
jit_reduce(<@>, type=uint32, rtype=and, size=1)
jit_var_dec_ref_ext(10): 0
jit_var_free(10)
jit_free(<@>, type=host-async, size=64)
jit_var_dec_ref_ext(9): 0
jit_var_free(9)
jit_free(<@>, type=host-async, size=64)
jit_malloc(type=host, size=64): <@> (new allocation)
jit_var_map_mem(11): <@>, size=4, free=1
jit_var_inc_ref_ext(11): 1
jit_var_copy_mem(11, size=4)
jit_var_inc_ref_int(5): 1
jit_var_inc_ref_int(11): 1
jit_var_new(12 <- 5, 11): $r0 = icmp eq <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(12): 1
jit_eval(): launching 1 kernel.
jit_assemble(size=4): register map:
   - %r0 -> 5 [in]
   - %r1 -> 11 [in]
   - %p2 -> 12 [out]
jit_malloc(type=host-async, size=64): <@> (reused local)
  -> launching <@> (n=4, in=2, out=1, ops=3):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %a2_p = load i8*, i8** %a2_i, align 8, !alias.scope !1
    %a2 = bitcast i8* %a2_p to i8*
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Load %r0
    %r0_i = getelementptr inbounds i32, i32* %a0, i32 %index
    %r0_p = bitcast i32* %r0_i to <8 x i32>*
    %r0 = load <8 x i32>, <8 x i32>* %r0_p, align 1, !alias.scope !1

    ; Load %r1
    %r1_i = getelementptr inbounds i32, i32* %a1, i32 %index
    %r1_p = bitcast i32* %r1_i to <8 x i32>*
    %r1 = load <8 x i32>, <8 x i32>* %r1_p, align 32, !alias.scope !1

    ; Evaluate %p2
    %p2 = icmp eq <8 x i32> %r0, %r1

    ; Store %p2
    %p2_i = getelementptr inbounds i8, i8* %a2, i32 %index
    %p2_p = bitcast i8* %p2_i to <8 x i8>*
    %p2_e = zext <8 x i1> %p2 to <8 x i8>
    store <8 x i8> %p2_e, <8 x i8>* %p2_p, align 8, !noalias !1

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 1 packet
jit_eval(): cleaning up..
jit_var_dec_ref_int(5): 0
jit_var_dec_ref_int(11): 0
jit_free_flush(): scheduling 1 deallocation
jit_eval(): done.
jit_all(<@>, size=4)
jit_reduce(<@>, type=uint32, rtype=and, size=1)
jit_var_dec_ref_ext(12): 0
jit_var_free(12)
jit_free(<@>, type=host-async, size=64)
jit_var_dec_ref_ext(11): 0
jit_var_free(11)
jit_free(<@>, type=host-async, size=64)
jit_malloc(type=host, size=64): <@> (new allocation)
jit_var_map_mem(13): <@>, size=2, free=1
jit_var_inc_ref_ext(13): 1
jit_var_copy_mem(13, size=2)
jit_var_inc_ref_int(6): 1
jit_var_inc_ref_int(13): 1
jit_var_new(14 <- 6, 13): $r0 = icmp eq <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(14): 1
jit_eval(): launching 1 kernel.
jit_assemble(size=2): register map:
   - %r0 -> 6 [in]
   - %r1 -> 13 [in]
   - %p2 -> 14 [out]
jit_malloc(type=host-async, size=64): <@> (reused local)
  -> launching <@> (n=2, in=2, out=1, ops=3):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %a2_p = load i8*, i8** %a2_i, align 8, !alias.scope !1
    %a2 = bitcast i8* %a2_p to i8*
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Load %r0
    %r0_i = getelementptr inbounds i32, i32* %a0, i32 %index
    %r0_p = bitcast i32* %r0_i to <8 x i32>*
    %r0 = load <8 x i32>, <8 x i32>* %r0_p, align 1, !alias.scope !1

    ; Load %r1
    %r1_i = getelementptr inbounds i32, i32* %a1, i32 %index
    %r1_p = bitcast i32* %r1_i to <8 x i32>*
    %r1 = load <8 x i32>, <8 x i32>* %r1_p, align 32, !alias.scope !1

    ; Evaluate %p2
    %p2 = icmp eq <8 x i32> %r0, %r1

    ; Store %p2
    %p2_i = getelementptr inbounds i8, i8* %a2, i32 %index
    %p2_p = bitcast i8* %p2_i to <8 x i8>*
    %p2_e = zext <8 x i1> %p2 to <8 x i8>
    store <8 x i8> %p2_e, <8 x i8>* %p2_p, align 8, !noalias !1

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 1 packet
jit_eval(): cleaning up..
jit_var_dec_ref_int(6): 0
jit_var_dec_ref_int(13): 0
jit_free_flush(): scheduling 1 deallocation
jit_eval(): done.
jit_all(<@>, size=2)
jit_memset_async(<@>, isize=1, size=2)
jit_reduce(<@>, type=uint32, rtype=and, size=1)
jit_var_dec_ref_ext(14): 0
jit_var_free(14)
jit_free(<@>, type=host-async, size=64)
jit_var_dec_ref_ext(13): 0
jit_var_free(13)
jit_free(<@>, type=host-async, size=64)
jit_registry_remove(<@>)
jit_registry_remove(<@>)
jit_registry_remove(<@>)
jit_var_dec_ref_ext(6): 2
jit_var_dec_ref_ext(5): 2
jit_var_dec_ref_ext(4): 2
jit_var_dec_ref_ext(3): 2
jit_var_dec_ref_ext(6): 1
jit_var_dec_ref_ext(5): 1
jit_var_dec_ref_ext(4): 1
jit_var_dec_ref_ext(3): 1
jit_var_dec_ref_ext(1): 0
jit_var_free(1)
jit_free(<@>, type=host-async, size=64)
jit_var_dec_ref_ext(3): 0
jit_var_free(3)
jit_var_dec_ref_int(2): 3
jit_var_dec_ref_ext(4): 0
jit_var_free(4)
jit_var_dec_ref_int(2): 2
jit_var_dec_ref_ext(5): 0
jit_var_free(5)
jit_var_dec_ref_int(2): 1
jit_var_dec_ref_ext(6): 0
jit_var_free(6)
jit_var_dec_ref_int(2): 0
jit_var_free(2)
jit_free(<@>, type=host-async, size=64)
jit_free(<@>, type=host, size=128)
jit_shutdown(): releasing 1 stream ..
jit_free_flush(): scheduling 4 deallocations
jit_shutdown(): releasing 1 kernel ..
jit_registry_trim(): removed 4 / 4 entries.
jit_malloc_trim(): freed
 - host memory: 128 B in 1 allocation
 - host-async memory: 448 B in 7 allocations
jit_shutdown(): done
