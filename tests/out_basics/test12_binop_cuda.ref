jit_device_set(device=0, stream=0): creating stream
jit_malloc(type=device, device=0, size=64): <@> (new allocation)
jit_malloc(type=host-pinned, size=64): <@> (new allocation)
jit_free(<@>, type=host-pinned, size=64)
jit_var_map(1): <@>, size=2, free=1
jit_var_inc_ref_ext(1): 1
jit_var_copy(1, size=2)
jit_malloc(type=device, device=0, size=64): <@> (new allocation)
jit_malloc(type=host-pinned, size=64): <@> (new allocation)
jit_free(<@>, type=host-pinned, size=64)
jit_var_map(2): <@>, size=2, free=1
jit_var_inc_ref_ext(2): 1
jit_var_copy(2, size=2)
jit_malloc(type=device, device=0, size=64): <@> (new allocation)
jit_malloc(type=host-pinned, size=64): <@> (new allocation)
jit_free(<@>, type=host-pinned, size=64)
jit_var_map(3): <@>, size=2, free=1
jit_var_inc_ref_ext(3): 1
jit_var_copy(3, size=2)
jit_var_inc_ref_int(1): 1
jit_trace_append(4 <- 1): not.$b0 $r0, $r1
jit_var_inc_ref_ext(4): 1
jit_var_dec_ref_ext(1): 0
jit_var_inc_ref_int(2): 1
jit_trace_append(5 <- 2): not.$b0 $r0, $r1
jit_var_inc_ref_ext(5): 1
jit_var_dec_ref_ext(2): 0
jit_var_inc_ref_int(3): 1
jit_trace_append(6 <- 3): not.$b0 $r0, $r1
jit_var_inc_ref_ext(6): 1
jit_var_dec_ref_ext(3): 0
jit_eval(): begin.
jit_assemble(size=2): register map:
   - %r4 -> 1 [in]
   - %r5 -> 4 [out]
jit_malloc(type=device, device=0, size=64): <@> (new allocation)
   - %f6 -> 2 [in]
   - %f7 -> 5 [out]
jit_malloc(type=device, device=0, size=64): <@> (new allocation)
   - %p8 -> 3 [in]
   - %p9 -> 6 [out]
jit_malloc(type=device, device=0, size=64): <@> (new allocation)
jit_run(): launching kernel (n=2, in=3, out=3, ops=10) ..
.version 6.3
.address_size 64
.entry enoki_@@@@@@@@@@@@@@@@(.param .u32 size,
                              .param .u64 arg0,
                              .param .u64 arg1,
                              .param .u64 arg2,
                              .param .u64 arg3,
                              .param .u64 arg4,
                              .param .u64 arg5) {
    .reg.b8 %b<10>;
    .reg.b16 %w<10>;
    .reg.b32 %r<10>;
    .reg.b64 %rd<10>;
    .reg.f32 %f<10>;
    .reg.f64 %d<10>;
    .reg.pred %p<10>;

    // Grid-stride loop setup
    mov.u32 %r0, %ctaid.x;
    mov.u32 %r1, %ntid.x;
    mov.u32 %r2, %tid.x;
    mad.lo.u32 %r0, %r0, %r1, %r2;
    ld.param.u32 %r2, [size];
    setp.ge.u32 %p0, %r0, %r2;
    @%p0 bra L0;

    mov.u32 %r3, %nctaid.x;
    mul.lo.u32 %r1, %r3, %r1;

L1: // Loop body

    // Load %r4
    ld.param.u64 %rd0, [arg0];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    ld.global.cs.u32 %r4, [%rd0];

    // Evaluate %r5
    not.b32 %r5, %r4;

    // Store %r5
    ld.param.u64 %rd0, [arg1];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    st.global.cs.u32 [%rd0], %r5;

    // Load %f6
    ld.param.u64 %rd0, [arg2];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    ld.global.cs.f32 %f6, [%rd0];

    // Evaluate %f7
    not.b32 %f7, %f6;

    // Store %f7
    ld.param.u64 %rd0, [arg3];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    st.global.cs.f32 [%rd0], %f7;

    // Load %p8
    ld.param.u64 %rd0, [arg4];
    mul.wide.u32 %rd1, %r0, 1;
    add.u64 %rd0, %rd0, %rd1;
    ld.global.cs.u8 %w0, [%rd0];
    setp.ne.u16 %p8, %w0, 0;

    // Evaluate %p9
    not.pred %p9, %p8;

    // Store %p9
    ld.param.u64 %rd0, [arg5];
    mul.wide.u32 %rd1, %r0, 1;
    add.u64 %rd0, %rd0, %rd1;
    selp.u16 %w0, 1, 0, %p9;
    st.global.cs.u8 [%rd0], %w0;

    add.u32 %r0, %r0, %r1;
    setp.ge.u32 %p0, %r0, %r2;
    @!%p0 bra L1;

L0:
    ret;
}
jit_eval(): cleaning up..
jit_var_dec_ref_int(1): 0
jit_var_free(1)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_int(2): 0
jit_var_free(2)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_int(3): 0
jit_var_free(3)
jit_free(<@>, type=device, device=0, size=64)
jit_free_flush(): scheduling 6 deallocations
jit_eval(): done.
XOR: value_1=[4294967294, 4294966061]
XOR: value_2=[-4, -0.00350571]
XOR: value_3=[0, 1]
jit_var_inc_ref_int(4): 1
jit_trace_append(7 <- 4): not.$b0 $r0, $r1
jit_var_inc_ref_ext(7): 1
jit_var_dec_ref_ext(4): 0
jit_var_inc_ref_int(5): 1
jit_trace_append(8 <- 5): not.$b0 $r0, $r1
jit_var_inc_ref_ext(8): 1
jit_var_dec_ref_ext(5): 0
jit_var_inc_ref_int(6): 1
jit_trace_append(9 <- 6): not.$b0 $r0, $r1
jit_var_inc_ref_ext(9): 1
jit_var_dec_ref_ext(6): 0
jit_eval(): begin.
jit_assemble(size=2): register map:
   - %r4 -> 4 [in]
   - %r5 -> 7 [out]
jit_malloc(type=device, device=0, size=64): <@> (reused global)
   - %f6 -> 5 [in]
   - %f7 -> 8 [out]
jit_malloc(type=device, device=0, size=64): <@> (reused global)
   - %p8 -> 6 [in]
   - %p9 -> 9 [out]
jit_malloc(type=device, device=0, size=64): <@> (reused global)
jit_run(): launching kernel (n=2, in=3, out=3, ops=10) ..
.version 6.3
.address_size 64
.entry enoki_@@@@@@@@@@@@@@@@(.param .u32 size,
                              .param .u64 arg0,
                              .param .u64 arg1,
                              .param .u64 arg2,
                              .param .u64 arg3,
                              .param .u64 arg4,
                              .param .u64 arg5) {
    .reg.b8 %b<10>;
    .reg.b16 %w<10>;
    .reg.b32 %r<10>;
    .reg.b64 %rd<10>;
    .reg.f32 %f<10>;
    .reg.f64 %d<10>;
    .reg.pred %p<10>;

    // Grid-stride loop setup
    mov.u32 %r0, %ctaid.x;
    mov.u32 %r1, %ntid.x;
    mov.u32 %r2, %tid.x;
    mad.lo.u32 %r0, %r0, %r1, %r2;
    ld.param.u32 %r2, [size];
    setp.ge.u32 %p0, %r0, %r2;
    @%p0 bra L0;

    mov.u32 %r3, %nctaid.x;
    mul.lo.u32 %r1, %r3, %r1;

L1: // Loop body

    // Load %r4
    ld.param.u64 %rd0, [arg0];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    ld.global.cs.u32 %r4, [%rd0];

    // Evaluate %r5
    not.b32 %r5, %r4;

    // Store %r5
    ld.param.u64 %rd0, [arg1];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    st.global.cs.u32 [%rd0], %r5;

    // Load %f6
    ld.param.u64 %rd0, [arg2];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    ld.global.cs.f32 %f6, [%rd0];

    // Evaluate %f7
    not.b32 %f7, %f6;

    // Store %f7
    ld.param.u64 %rd0, [arg3];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    st.global.cs.f32 [%rd0], %f7;

    // Load %p8
    ld.param.u64 %rd0, [arg4];
    mul.wide.u32 %rd1, %r0, 1;
    add.u64 %rd0, %rd0, %rd1;
    ld.global.cs.u8 %w0, [%rd0];
    setp.ne.u16 %p8, %w0, 0;

    // Evaluate %p9
    not.pred %p9, %p8;

    // Store %p9
    ld.param.u64 %rd0, [arg5];
    mul.wide.u32 %rd1, %r0, 1;
    add.u64 %rd0, %rd0, %rd1;
    selp.u16 %w0, 1, 0, %p9;
    st.global.cs.u8 [%rd0], %w0;

    add.u32 %r0, %r0, %r1;
    setp.ge.u32 %p0, %r0, %r2;
    @!%p0 bra L1;

L0:
    ret;
}
jit_eval(): cleaning up..
jit_var_dec_ref_int(4): 0
jit_var_free(4)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_int(5): 0
jit_var_free(5)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_int(6): 0
jit_var_free(6)
jit_free(<@>, type=device, device=0, size=64)
jit_free_flush(): scheduling 3 deallocations
jit_eval(): done.
XOR2: value_1=[1, 1234]
XOR2: value_2=[1, 1234]
XOR2: value_3=[1, 0]
jit_malloc(type=device, device=0, size=64): <@> (reused global)
jit_malloc(type=host-pinned, size=64): <@> (reused global)
jit_free(<@>, type=host-pinned, size=64)
jit_var_map(10): <@>, size=2, free=1
jit_var_inc_ref_ext(10): 1
jit_var_copy(10, size=2)
jit_malloc(type=device, device=0, size=64): <@> (reused global)
jit_malloc(type=host-pinned, size=64): <@> (reused global)
jit_free(<@>, type=host-pinned, size=64)
jit_var_map(11): <@>, size=2, free=1
jit_var_inc_ref_ext(11): 1
jit_var_copy(11, size=2)
jit_malloc(type=device, device=0, size=64): <@> (reused global)
jit_malloc(type=host-pinned, size=64): <@> (reused global)
jit_free(<@>, type=host-pinned, size=64)
jit_var_map(12): <@>, size=2, free=1
jit_var_inc_ref_ext(12): 1
jit_var_copy(12, size=2)
jit_var_inc_ref_int(7): 1
jit_var_inc_ref_int(10): 1
jit_trace_append(13 <- 7, 10): or.$b0 $r0, $r1, $r2
jit_var_inc_ref_ext(13): 1
jit_var_inc_ref_int(8): 1
jit_var_inc_ref_int(11): 1
jit_trace_append(14 <- 8, 11): or.$b0 $r0, $r1, $r2
jit_var_inc_ref_ext(14): 1
jit_var_inc_ref_int(9): 1
jit_var_inc_ref_int(12): 1
jit_trace_append(15 <- 9, 12): or.$b0 $r0, $r1, $r2
jit_var_inc_ref_ext(15): 1
jit_eval(): begin.
jit_assemble(size=2): register map:
   - %r4 -> 7 [in]
   - %r5 -> 10 [in]
   - %r6 -> 13 [out]
jit_malloc(type=device, device=0, size=64): <@> (new allocation)
   - %f7 -> 8 [in]
   - %f8 -> 11 [in]
   - %f9 -> 14 [out]
jit_malloc(type=device, device=0, size=64): <@> (new allocation)
   - %p10 -> 9 [in]
   - %p11 -> 12 [in]
   - %p12 -> 15 [out]
jit_malloc(type=device, device=0, size=64): <@> (new allocation)
jit_run(): launching kernel (n=2, in=6, out=3, ops=13) ..
.version 6.3
.address_size 64
.entry enoki_@@@@@@@@@@@@@@@@(.param .u32 size,
                              .param .u64 arg0,
                              .param .u64 arg1,
                              .param .u64 arg2,
                              .param .u64 arg3,
                              .param .u64 arg4,
                              .param .u64 arg5,
                              .param .u64 arg6,
                              .param .u64 arg7,
                              .param .u64 arg8) {
    .reg.b8 %b<13>;
    .reg.b16 %w<13>;
    .reg.b32 %r<13>;
    .reg.b64 %rd<13>;
    .reg.f32 %f<13>;
    .reg.f64 %d<13>;
    .reg.pred %p<13>;

    // Grid-stride loop setup
    mov.u32 %r0, %ctaid.x;
    mov.u32 %r1, %ntid.x;
    mov.u32 %r2, %tid.x;
    mad.lo.u32 %r0, %r0, %r1, %r2;
    ld.param.u32 %r2, [size];
    setp.ge.u32 %p0, %r0, %r2;
    @%p0 bra L0;

    mov.u32 %r3, %nctaid.x;
    mul.lo.u32 %r1, %r3, %r1;

L1: // Loop body

    // Load %r4
    ld.param.u64 %rd0, [arg0];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    ld.global.cs.u32 %r4, [%rd0];

    // Load %r5
    ld.param.u64 %rd0, [arg1];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    ld.global.cs.u32 %r5, [%rd0];

    // Evaluate %r6
    or.b32 %r6, %r4, %r5;

    // Store %r6
    ld.param.u64 %rd0, [arg2];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    st.global.cs.u32 [%rd0], %r6;

    // Load %f7
    ld.param.u64 %rd0, [arg3];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    ld.global.cs.f32 %f7, [%rd0];

    // Load %f8
    ld.param.u64 %rd0, [arg4];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    ld.global.cs.f32 %f8, [%rd0];

    // Evaluate %f9
    or.b32 %f9, %f7, %f8;

    // Store %f9
    ld.param.u64 %rd0, [arg5];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    st.global.cs.f32 [%rd0], %f9;

    // Load %p10
    ld.param.u64 %rd0, [arg6];
    mul.wide.u32 %rd1, %r0, 1;
    add.u64 %rd0, %rd0, %rd1;
    ld.global.cs.u8 %w0, [%rd0];
    setp.ne.u16 %p10, %w0, 0;

    // Load %p11
    ld.param.u64 %rd0, [arg7];
    mul.wide.u32 %rd1, %r0, 1;
    add.u64 %rd0, %rd0, %rd1;
    ld.global.cs.u8 %w0, [%rd0];
    setp.ne.u16 %p11, %w0, 0;

    // Evaluate %p12
    or.pred %p12, %p10, %p11;

    // Store %p12
    ld.param.u64 %rd0, [arg8];
    mul.wide.u32 %rd1, %r0, 1;
    add.u64 %rd0, %rd0, %rd1;
    selp.u16 %w0, 1, 0, %p12;
    st.global.cs.u8 [%rd0], %w0;

    add.u32 %r0, %r0, %r1;
    setp.ge.u32 %p0, %r0, %r2;
    @!%p0 bra L1;

L0:
    ret;
}
jit_eval(): cleaning up..
jit_var_dec_ref_int(7): 0
jit_var_dec_ref_int(10): 0
jit_var_dec_ref_int(8): 0
jit_var_dec_ref_int(11): 0
jit_var_dec_ref_int(9): 0
jit_var_dec_ref_int(12): 0
jit_free_flush(): scheduling 3 deallocations
jit_eval(): done.
OR: value_1=[1, 4294967295]
OR: value_2=[1, nan]
OR: value_3=[1, 1]
jit_var_inc_ref_int(7): 1
jit_var_inc_ref_int(10): 1
jit_trace_append(16 <- 7, 10): and.$b0 $r0, $r1, $r2
jit_var_inc_ref_ext(16): 1
jit_var_inc_ref_int(8): 1
jit_var_inc_ref_int(11): 1
jit_trace_append(17 <- 8, 11): and.$b0 $r0, $r1, $r2
jit_var_inc_ref_ext(17): 1
jit_var_inc_ref_int(9): 1
jit_var_inc_ref_int(12): 1
jit_trace_append(18 <- 9, 12): and.$b0 $r0, $r1, $r2
jit_var_inc_ref_ext(18): 1
jit_eval(): begin.
jit_assemble(size=2): register map:
   - %r4 -> 7 [in]
   - %r5 -> 10 [in]
   - %r6 -> 16 [out]
jit_malloc(type=device, device=0, size=64): <@> (new allocation)
   - %f7 -> 8 [in]
   - %f8 -> 11 [in]
   - %f9 -> 17 [out]
jit_malloc(type=device, device=0, size=64): <@> (new allocation)
   - %p10 -> 9 [in]
   - %p11 -> 12 [in]
   - %p12 -> 18 [out]
jit_malloc(type=device, device=0, size=64): <@> (new allocation)
jit_run(): launching kernel (n=2, in=6, out=3, ops=13) ..
.version 6.3
.address_size 64
.entry enoki_@@@@@@@@@@@@@@@@(.param .u32 size,
                              .param .u64 arg0,
                              .param .u64 arg1,
                              .param .u64 arg2,
                              .param .u64 arg3,
                              .param .u64 arg4,
                              .param .u64 arg5,
                              .param .u64 arg6,
                              .param .u64 arg7,
                              .param .u64 arg8) {
    .reg.b8 %b<13>;
    .reg.b16 %w<13>;
    .reg.b32 %r<13>;
    .reg.b64 %rd<13>;
    .reg.f32 %f<13>;
    .reg.f64 %d<13>;
    .reg.pred %p<13>;

    // Grid-stride loop setup
    mov.u32 %r0, %ctaid.x;
    mov.u32 %r1, %ntid.x;
    mov.u32 %r2, %tid.x;
    mad.lo.u32 %r0, %r0, %r1, %r2;
    ld.param.u32 %r2, [size];
    setp.ge.u32 %p0, %r0, %r2;
    @%p0 bra L0;

    mov.u32 %r3, %nctaid.x;
    mul.lo.u32 %r1, %r3, %r1;

L1: // Loop body

    // Load %r4
    ld.param.u64 %rd0, [arg0];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    ld.global.cs.u32 %r4, [%rd0];

    // Load %r5
    ld.param.u64 %rd0, [arg1];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    ld.global.cs.u32 %r5, [%rd0];

    // Evaluate %r6
    and.b32 %r6, %r4, %r5;

    // Store %r6
    ld.param.u64 %rd0, [arg2];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    st.global.cs.u32 [%rd0], %r6;

    // Load %f7
    ld.param.u64 %rd0, [arg3];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    ld.global.cs.f32 %f7, [%rd0];

    // Load %f8
    ld.param.u64 %rd0, [arg4];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    ld.global.cs.f32 %f8, [%rd0];

    // Evaluate %f9
    and.b32 %f9, %f7, %f8;

    // Store %f9
    ld.param.u64 %rd0, [arg5];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    st.global.cs.f32 [%rd0], %f9;

    // Load %p10
    ld.param.u64 %rd0, [arg6];
    mul.wide.u32 %rd1, %r0, 1;
    add.u64 %rd0, %rd0, %rd1;
    ld.global.cs.u8 %w0, [%rd0];
    setp.ne.u16 %p10, %w0, 0;

    // Load %p11
    ld.param.u64 %rd0, [arg7];
    mul.wide.u32 %rd1, %r0, 1;
    add.u64 %rd0, %rd0, %rd1;
    ld.global.cs.u8 %w0, [%rd0];
    setp.ne.u16 %p11, %w0, 0;

    // Evaluate %p12
    and.pred %p12, %p10, %p11;

    // Store %p12
    ld.param.u64 %rd0, [arg8];
    mul.wide.u32 %rd1, %r0, 1;
    add.u64 %rd0, %rd0, %rd1;
    selp.u16 %w0, 1, 0, %p12;
    st.global.cs.u8 [%rd0], %w0;

    add.u32 %r0, %r0, %r1;
    setp.ge.u32 %p0, %r0, %r2;
    @!%p0 bra L1;

L0:
    ret;
}
jit_eval(): cleaning up..
jit_var_dec_ref_int(7): 0
jit_var_dec_ref_int(10): 0
jit_var_dec_ref_int(8): 0
jit_var_dec_ref_int(11): 0
jit_var_dec_ref_int(9): 0
jit_var_dec_ref_int(12): 0
jit_eval(): done.
AND: value_1=[0, 1234]
AND: value_2=[0, 1234]
AND: value_3=[0, 0]
jit_var_inc_ref_int(7): 1
jit_var_inc_ref_int(10): 1
jit_trace_append(19 <- 7, 10): xor.$b0 $r0, $r1, $r2
jit_var_inc_ref_ext(19): 1
jit_var_inc_ref_int(8): 1
jit_var_inc_ref_int(11): 1
jit_trace_append(20 <- 8, 11): xor.$b0 $r0, $r1, $r2
jit_var_inc_ref_ext(20): 1
jit_var_inc_ref_int(9): 1
jit_var_inc_ref_int(12): 1
jit_trace_append(21 <- 9, 12): xor.$b0 $r0, $r1, $r2
jit_var_inc_ref_ext(21): 1
jit_eval(): begin.
jit_assemble(size=2): register map:
   - %r4 -> 7 [in]
   - %r5 -> 10 [in]
   - %r6 -> 19 [out]
jit_malloc(type=device, device=0, size=64): <@> (new allocation)
   - %f7 -> 8 [in]
   - %f8 -> 11 [in]
   - %f9 -> 20 [out]
jit_malloc(type=device, device=0, size=64): <@> (new allocation)
   - %p10 -> 9 [in]
   - %p11 -> 12 [in]
   - %p12 -> 21 [out]
jit_malloc(type=device, device=0, size=64): <@> (new allocation)
jit_run(): launching kernel (n=2, in=6, out=3, ops=13) ..
.version 6.3
.address_size 64
.entry enoki_@@@@@@@@@@@@@@@@(.param .u32 size,
                              .param .u64 arg0,
                              .param .u64 arg1,
                              .param .u64 arg2,
                              .param .u64 arg3,
                              .param .u64 arg4,
                              .param .u64 arg5,
                              .param .u64 arg6,
                              .param .u64 arg7,
                              .param .u64 arg8) {
    .reg.b8 %b<13>;
    .reg.b16 %w<13>;
    .reg.b32 %r<13>;
    .reg.b64 %rd<13>;
    .reg.f32 %f<13>;
    .reg.f64 %d<13>;
    .reg.pred %p<13>;

    // Grid-stride loop setup
    mov.u32 %r0, %ctaid.x;
    mov.u32 %r1, %ntid.x;
    mov.u32 %r2, %tid.x;
    mad.lo.u32 %r0, %r0, %r1, %r2;
    ld.param.u32 %r2, [size];
    setp.ge.u32 %p0, %r0, %r2;
    @%p0 bra L0;

    mov.u32 %r3, %nctaid.x;
    mul.lo.u32 %r1, %r3, %r1;

L1: // Loop body

    // Load %r4
    ld.param.u64 %rd0, [arg0];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    ld.global.cs.u32 %r4, [%rd0];

    // Load %r5
    ld.param.u64 %rd0, [arg1];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    ld.global.cs.u32 %r5, [%rd0];

    // Evaluate %r6
    xor.b32 %r6, %r4, %r5;

    // Store %r6
    ld.param.u64 %rd0, [arg2];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    st.global.cs.u32 [%rd0], %r6;

    // Load %f7
    ld.param.u64 %rd0, [arg3];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    ld.global.cs.f32 %f7, [%rd0];

    // Load %f8
    ld.param.u64 %rd0, [arg4];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    ld.global.cs.f32 %f8, [%rd0];

    // Evaluate %f9
    xor.b32 %f9, %f7, %f8;

    // Store %f9
    ld.param.u64 %rd0, [arg5];
    mul.wide.u32 %rd1, %r0, 4;
    add.u64 %rd0, %rd0, %rd1;
    st.global.cs.f32 [%rd0], %f9;

    // Load %p10
    ld.param.u64 %rd0, [arg6];
    mul.wide.u32 %rd1, %r0, 1;
    add.u64 %rd0, %rd0, %rd1;
    ld.global.cs.u8 %w0, [%rd0];
    setp.ne.u16 %p10, %w0, 0;

    // Load %p11
    ld.param.u64 %rd0, [arg7];
    mul.wide.u32 %rd1, %r0, 1;
    add.u64 %rd0, %rd0, %rd1;
    ld.global.cs.u8 %w0, [%rd0];
    setp.ne.u16 %p11, %w0, 0;

    // Evaluate %p12
    xor.pred %p12, %p10, %p11;

    // Store %p12
    ld.param.u64 %rd0, [arg8];
    mul.wide.u32 %rd1, %r0, 1;
    add.u64 %rd0, %rd0, %rd1;
    selp.u16 %w0, 1, 0, %p12;
    st.global.cs.u8 [%rd0], %w0;

    add.u32 %r0, %r0, %r1;
    setp.ge.u32 %p0, %r0, %r2;
    @!%p0 bra L1;

L0:
    ret;
}
jit_eval(): cleaning up..
jit_var_dec_ref_int(7): 0
jit_var_dec_ref_int(10): 0
jit_var_dec_ref_int(8): 0
jit_var_dec_ref_int(11): 0
jit_var_dec_ref_int(9): 0
jit_var_dec_ref_int(12): 0
jit_eval(): done.
XOR: value_1=[1, 4294966061]
XOR: value_2=[1, 0.00350571]
XOR: value_3=[1, 1]
jit_var_dec_ref_ext(21): 0
jit_var_free(21)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_ext(20): 0
jit_var_free(20)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_ext(19): 0
jit_var_free(19)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_ext(18): 0
jit_var_free(18)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_ext(17): 0
jit_var_free(17)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_ext(16): 0
jit_var_free(16)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_ext(15): 0
jit_var_free(15)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_ext(14): 0
jit_var_free(14)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_ext(13): 0
jit_var_free(13)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_ext(12): 0
jit_var_free(12)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_ext(11): 0
jit_var_free(11)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_ext(10): 0
jit_var_free(10)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_ext(9): 0
jit_var_free(9)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_ext(8): 0
jit_var_free(8)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_ext(7): 0
jit_var_free(7)
jit_free(<@>, type=device, device=0, size=64)
jit_shutdown(): releasing 1 stream ..
jit_free_flush(): scheduling 15 deallocations
jit_shutdown(): releasing 4 kernels ..
jit_malloc_trim(): freed
 - host-pinned memory: 192 B in 3 allocations
 - device memory: 960 B in 15 allocations
jit_shutdown(): done
