jit_var_new_literal(1): $r0_0 = insertelement <$w x $t0> undef, $t0 0, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(1): 1
jit_var_new_literal(2): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(2): 1
jit_var_inc_ref_int(1): 1
jit_var_inc_ref_int(2): 1
jit_var_new(3 <- 1, 2): $r0 = add <$w x $t0> $r1, $r2
jit_var_inc_ref_ext(3): 1
jit_var_dec_ref_ext(2): 0
jit_malloc(type=host, size=64): <@> (new allocation)
jit_var_map_mem(4): <@>, size=3, free=1
jit_var_inc_ref_ext(4): 1
jit_var_copy_mem(4, size=3)
jit_var_new_literal(2): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z (reused)
jit_var_inc_ref_ext(2): 1
jit_var_new_literal(5): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(5): 1
jit_malloc(type=host-async, size=64): <@> (new allocation)
jit_memset_async(<@>, isize=4, size=16)
jit_malloc(type=host-async, size=64): <@> (new allocation)
jit_var_map_mem(6): <@>, size=16, free=1
jit_var_inc_ref_ext(6): 1
jit_var_copy_mem(6, size=16)
jit_var_dec_ref_ext(1): 0
jit_var_inc_ref_ext(6): 2
jit_var_copy_ptr(7 <- 6): <@>
jit_var_inc_ref_ext(7): 1
jit_var_new(8): 
jit_var_inc_ref_ext(8): 1
jit_var_inc_ref_int(8): 1
jit_var_dec_ref_ext(8): 0
jit_var_new(9 <- 8, 0, 0, 0): declare void @llvm.masked.scatter.v$w$a1(<$w x $t1>, <$w x $t1*>, i32, <$w x i1>)
jit_var_inc_ref_ext(9): 1
jit_var_new(10): $r0_0 = insertelement <$w x $t0> undef, $t0 $i, $t0 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x $t0> $z$n$r0 = add <$w x $t0> $r0_1, $l0
jit_var_inc_ref_ext(10): 1
jit_var_inc_ref_int(10): 1
jit_var_new(11 <- 10): $r0_0 = insertelement <$w x $t1> undef, $t1 %end, $t1 0$n$r0_1 = shufflevector <$w x $t1> $r0_0, <$w x $t1> undef, <$w x $t1> $z$n$r0 = icmp ult <$w x $t1> $r1, $r0_1
jit_var_inc_ref_ext(11): 1
jit_var_dec_ref_ext(10): 0
jit_var_inc_ref_ext(11): 2
jit_var_dec_ref_ext(11): 1
jit_var_inc_ref_int(11): 1
jit_var_inc_ref_int(9): 1
jit_var_new(12 <- 11, 9): $r0 = bitcast <$w x $t1> $r1 to <$w x $t1>
jit_var_inc_ref_ext(12): 1
jit_var_inc_ref_int(7): 1
jit_var_inc_ref_int(2): 2
jit_var_inc_ref_int(4): 1
jit_var_inc_ref_int(12): 1
jit_var_new(13 <- 7, 2, 4, 12): $r0_0 = bitcast $t1 $r1 to $t2*$n$r0_1 = getelementptr $t2, $t2* $r0_0, <$w x $t3> $r3$ncall void @llvm.masked.scatter.v$w$a2(<$w x $t2> $r2, <$w x $t2*> $r0_1, i32 $s1, <$w x $t4> $r4)
jit_var_inc_ref_ext(13): 1
jit_var_mark_scatter(13, 6)
jit_var_dec_ref_ext(12): 0
jit_var_dec_ref_ext(11): 0
jit_var_dec_ref_ext(9): 0
jit_var_dec_ref_ext(7): 0
jit_var_dec_ref_ext(5): 0
jit_var_free(5)
jit_var_dec_ref_ext(2): 0
jit_var_new_literal(2): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z (reused)
jit_var_inc_ref_ext(2): 1
jit_eval(): launching 1 kernel.
jit_assemble(size=3): register map:
   - gl0 -> 9 [scalar]
   - %r1 -> 10 [scalar]
   - %p2 -> 11 [scalar]
   - %p3 -> 12 [scalar]
   - %r4 -> 4 [in]
   - %r5 -> 2 [scalar]
   - %rd6 -> 7 [scalar] [direct_pointer]
   - %u7 -> 13 [scat]
  -> launching <@> (n=3, in=2, out=1, ops=8):
declare void @llvm.masked.scatter.v8i32(<8 x i32>, <8 x i32*>, i32, <8 x i1>)

define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %rd6 = load i8*, i8** %a1_i, align 8, !alias.scope !1
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Evaluate %r1
    %r1_0 = insertelement <8 x i32> undef, i32 %index, i32 0
    %r1_1 = shufflevector <8 x i32> %r1_0, <8 x i32> undef, <8 x i32> zeroinitializer
    %r1 = add <8 x i32> %r1_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>

    ; Evaluate %p2
    %p2_0 = insertelement <8 x i32> undef, i32 %end, i32 0
    %p2_1 = shufflevector <8 x i32> %p2_0, <8 x i32> undef, <8 x i32> zeroinitializer
    %p2 = icmp ult <8 x i32> %r1, %p2_1

    ; Evaluate %p3
    %p3 = bitcast <8 x i1> %p2 to <8 x i1>

    ; Load %r4
    %r4_i = getelementptr inbounds i32, i32* %a0, i32 %index
    %r4_p = bitcast i32* %r4_i to <8 x i32>*
    %r4 = load <8 x i32>, <8 x i32>* %r4_p, align 32, !alias.scope !1

    ; Evaluate %r5
    %r5_0 = insertelement <8 x i32> undef, i32 1, i32 0
    %r5 = shufflevector <8 x i32> %r5_0, <8 x i32> undef, <8 x i32> zeroinitializer
    %u7_0 = bitcast i8* %rd6 to i32*
    %u7_1 = getelementptr i32, i32* %u7_0, <8 x i32> %r4
    call void @llvm.masked.scatter.v8i32(<8 x i32> %r5, <8 x i32*> %u7_1, i32 8, <8 x i1> %p3)

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 1 packet in 1 block ..
jit_eval(): cleaning up..
jit_var_dec_ref_ext(13): 0
jit_var_free(13)
jit_var_dec_ref_int(7): 0
jit_var_free(7)
jit_var_dec_ref_ext(6): 1
jit_var_dec_ref_int(2): 1
jit_var_dec_ref_int(4): 0
jit_var_dec_ref_int(12): 0
jit_var_free(12)
jit_var_dec_ref_int(11): 0
jit_var_free(11)
jit_var_dec_ref_int(10): 0
jit_var_free(10)
jit_var_dec_ref_int(9): 0
jit_var_free(9)
jit_var_dec_ref_int(8): 0
jit_var_free(8)
jit_eval(): done.
jit_var_inc_ref_int(6): 1
jit_var_inc_ref_int(2): 2
jit_var_new(14 <- 6, 2): $r0 = add <$w x $t0> $r1, $r2
jit_var_inc_ref_ext(14): 1
jit_var_dec_ref_ext(2): 0
x:[0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
jit_eval(): launching 1 kernel.
jit_assemble(size=16): register map:
   - %r0 -> 1 [in]
   - %r1 -> 2 [scalar]
   - %r2 -> 3 [out]
jit_malloc(type=host-async, size=64): <@> (new allocation)
  -> launching <@> (n=16, in=1, out=1, ops=3):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Load %r0
    %r0_i = getelementptr inbounds i32, i32* %a0, i32 %index
    %r0_p = bitcast i32* %r0_i to <8 x i32>*
    %r0 = load <8 x i32>, <8 x i32>* %r0_p, align 32, !alias.scope !1

    ; Evaluate %r1
    %r1_0 = insertelement <8 x i32> undef, i32 1, i32 0
    %r1 = shufflevector <8 x i32> %r1_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %r2
    %r2 = add <8 x i32> %r0, %r1

    ; Store %r2
    %r2_i = getelementptr inbounds i32, i32* %a1, i32 %index
    %r2_p = bitcast i32* %r2_i to <8 x i32>*
    store <8 x i32> %r2, <8 x i32>* %r2_p, align 32, !noalias !1

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 2 packets in 1 block ..
jit_eval(): cleaning up..
jit_var_dec_ref_int(1): 0
jit_var_free(1)
jit_free(<@>, type=host-async, size=64)
jit_var_dec_ref_int(2): 1
jit_free_flush(): scheduling 1 deallocation
jit_eval(): done.
y:[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
jit_eval(): launching 1 kernel.
jit_assemble(size=16): register map:
   - %r0 -> 6 [in]
   - %r1 -> 2 [scalar]
   - %r2 -> 14 [out]
jit_malloc(type=host-async, size=64): <@> (reused global)
  -> launching <@> (n=16, in=1, out=1, ops=3):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Load %r0
    %r0_i = getelementptr inbounds i32, i32* %a0, i32 %index
    %r0_p = bitcast i32* %r0_i to <8 x i32>*
    %r0 = load <8 x i32>, <8 x i32>* %r0_p, align 32, !alias.scope !1

    ; Evaluate %r1
    %r1_0 = insertelement <8 x i32> undef, i32 1, i32 0
    %r1 = shufflevector <8 x i32> %r1_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %r2
    %r2 = add <8 x i32> %r0, %r1

    ; Store %r2
    %r2_i = getelementptr inbounds i32, i32* %a1, i32 %index
    %r2_p = bitcast i32* %r2_i to <8 x i32>*
    store <8 x i32> %r2, <8 x i32>* %r2_p, align 32, !noalias !1

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 2 packets in 1 block ..
jit_eval(): cleaning up..
jit_var_dec_ref_int(6): 0
jit_var_dec_ref_int(2): 0
jit_var_free(2)
jit_eval(): done.
z:[1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1]
jit_var_dec_ref_ext(14): 0
jit_var_free(14)
jit_free(<@>, type=host-async, size=64)
jit_var_dec_ref_ext(4): 0
jit_var_free(4)
jit_free(<@>, type=host-async, size=64)
jit_var_dec_ref_ext(3): 0
jit_var_free(3)
jit_free(<@>, type=host-async, size=64)
jit_var_dec_ref_ext(6): 0
jit_var_free(6)
jit_free(<@>, type=host-async, size=64)
jit_free_flush(): scheduling 4 deallocations
jit_shutdown(): releasing 2 kernels ..
jit_shutdown(): releasing 1 thread state ..
jit_malloc_trim(): freed
 - host-async memory: 256 B in 4 allocations
jit_shutdown(): done
