jit_device_set(device=-1, stream=0): creating stream
jit_malloc(type=host, size=64): <@> (new allocation)
jit_fill(<@>, type=uint8, size=64)
jit_var_map(1): <@>, size=16, free=1
jit_var_inc_ref_ext(1): 1
jit_trace_append(2): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(2): 1
jit_var_inc_ref_int(1): 1
jit_var_inc_ref_int(2): 1
jit_trace_append(3 <- 1, 2): $r0 = add <$w x $t0> $r1, $r2
jit_var_inc_ref_ext(3): 1
jit_var_dec_ref_ext(2): 0
jit_malloc(type=host, size=64): <@> (new allocation)
jit_var_map(4): <@>, size=3, free=1
jit_var_inc_ref_ext(4): 1
jit_var_copy(4, size=3)
jit_trace_append(2): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z (reused)
jit_var_inc_ref_ext(2): 1
jit_trace_append(5): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(5): 1
jit_malloc(type=host, size=64): <@> (new allocation)
jit_var_map(6): <@>, size=16, free=1
jit_var_inc_ref_ext(6): 1
jit_var_copy(6, size=16)
jit_var_dec_ref_ext(1): 0
jit_var_inc_ref_ext(6): 2
jit_var_copy_ptr(7 <- 6): <@>
jit_var_inc_ref_ext(7): 1
jit_var_inc_ref_int(7): 1
jit_var_inc_ref_int(2): 2
jit_var_inc_ref_int(4): 1
jit_trace_append(8 <- 7, 2, 4): $r0_0 = bitcast $t1 $r1 to $t2*$n$r0_1 = getelementptr $t2, $t2* $r0_0, <$w x $t3> $r3$ncall void @llvm.masked.scatter.v$w$a2(<$w x $t2> $r2, <$w x $t2*> $r0$S_1, i32 $s1, <$w x i1> $O)
jit_var_inc_ref_ext(8): 1
jit_var_mark_scatter(8, 6)
jit_var_dec_ref_ext(7): 0
jit_var_dec_ref_ext(5): 0
jit_var_free(5)
jit_var_dec_ref_ext(2): 0
jit_trace_append(2): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z (reused)
jit_var_inc_ref_ext(2): 1
jit_eval(): begin.
jit_assemble(size=3): register map:
   - %r0 -> 2 [scalar]
   - %r1 -> 4 [in]
   - %rd2 -> 7 [scalar] [in]
   - %u3 -> 8 [scat]
jit_run(): launching kernel (n=3, in=2, out=0, ops=4) ..
define void @enoki_@@@@@@@@@@@@@@@@(i64 %start, i64 %end, i8** %ptrs) #0 alignstack(32) {
entry:
    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %rd2 = load i8*, i8** %a1_i, align 8, !alias.scope !1
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = insertelement <8 x i32> undef, i32 1, i32 0
    %r0 = shufflevector <8 x i32> %r0_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Load %r1
    %r1_i = getelementptr inbounds i32, i32* %a0, i64 %index
    %r1_p = bitcast i32* %r1_i to <8 x i32>*
    %r1 = load <8 x i32>, <8 x i32>* %r1_p, align 32, !alias.scope !1

    ; Evaluate %u3
    %u3_0 = bitcast i8* %rd2 to i32*
    %u3_1 = getelementptr i32, i32* %u3_0, <8 x i32> %r1
    call void @llvm.masked.scatter.v8i32(<8 x i32> %r0, <8 x i32*> %u3_1, i32 8, <8 x i1> <i1 1, i1 1, i1 1, i1 1, i1 1, i1 1, i1 1, i1 1>)

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2
}

define void @enoki_@@@@@@@@@@@@@@@@_scalar(i64 %start, i64 %end, i8** %ptrs) #0 {
entry:
    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %rd2 = load i8*, i8** %a1_i, align 8, !alias.scope !1
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = insertelement <1 x i32> undef, i32 1, i32 0
    %r0 = shufflevector <1 x i32> %r0_0, <1 x i32> undef, <1 x i32> zeroinitializer

    ; Load %r1
    %r1_i = getelementptr inbounds i32, i32* %a0, i64 %index
    %r1_p = bitcast i32* %r1_i to <1 x i32>*
    %r1 = load <1 x i32>, <1 x i32>* %r1_p, align 4, !alias.scope !1

    ; Evaluate %u3
    %u3_0 = bitcast i8* %rd2 to i32*
    %u3_1 = getelementptr i32, i32* %u3_0, <1 x i32> %r1
    call void @llvm.masked.scatter.v1i32(<1 x i32> %r0, <1 x i32*> %u3_1, i32 8, <1 x i1> <i1 1>)

    %index_next = add i64 %index, 1
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2
}

declare void @llvm.masked.scatter.v8i32(<8 x i32>, <8 x i32*>, i32, <8 x i1>)
declare void @llvm.masked.scatter.v1i32(<1 x i32>, <1 x i32*>, i32, <1 x i1>)

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" }
jit_run(): processing 0 packets and 3 scalar entries
jit_eval(): cleaning up..
jit_var_dec_ref_ext(8): 0
jit_var_free(8)
jit_var_dec_ref_int(7): 0
jit_var_free(7)
jit_var_dec_ref_ext(6): 1
jit_var_dec_ref_int(2): 1
jit_var_dec_ref_int(4): 0
jit_eval(): done.
jit_var_inc_ref_int(6): 1
jit_var_inc_ref_int(2): 2
jit_trace_append(9 <- 6, 2): $r0 = add <$w x $t0> $r1, $r2
jit_var_inc_ref_ext(9): 1
jit_var_dec_ref_ext(2): 0
x:[0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
jit_eval(): begin.
jit_assemble(size=16): register map:
   - %r0 -> 1 [in]
   - %r1 -> 2 [scalar]
   - %r2 -> 3 [out]
jit_malloc(type=host, size=64): <@> (new allocation)
jit_run(): launching kernel (n=16, in=1, out=1, ops=3) ..
define void @enoki_@@@@@@@@@@@@@@@@(i64 %start, i64 %end, i8** %ptrs) #0 alignstack(32) {
entry:
    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Load %r0
    %r0_i = getelementptr inbounds i32, i32* %a0, i64 %index
    %r0_p = bitcast i32* %r0_i to <8 x i32>*
    %r0 = load <8 x i32>, <8 x i32>* %r0_p, align 32, !alias.scope !1

    ; Evaluate %r1
    %r1_0 = insertelement <8 x i32> undef, i32 1, i32 0
    %r1 = shufflevector <8 x i32> %r1_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %r2
    %r2 = add <8 x i32> %r0, %r1

    ; Store %r2
    %r2_i = getelementptr inbounds i32, i32* %a1, i64 %index
    %r2_p = bitcast i32* %r2_i to <8 x i32>*
    store <8 x i32> %r2, <8 x i32>* %r2_p, align 32, !noalias !1

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" }
jit_run(): processing 2 packets and 0 scalar entries
jit_eval(): cleaning up..
jit_var_dec_ref_int(1): 0
jit_var_free(1)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_int(2): 1
jit_eval(): done.
y:[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
jit_eval(): begin.
jit_assemble(size=16): register map:
   - %r0 -> 6 [in]
   - %r1 -> 2 [scalar]
   - %r2 -> 9 [out]
jit_malloc(type=host, size=64): <@> (reused global)
jit_run(): launching kernel (n=16, in=1, out=1, ops=3) ..
define void @enoki_@@@@@@@@@@@@@@@@(i64 %start, i64 %end, i8** %ptrs) #0 alignstack(32) {
entry:
    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Load %r0
    %r0_i = getelementptr inbounds i32, i32* %a0, i64 %index
    %r0_p = bitcast i32* %r0_i to <8 x i32>*
    %r0 = load <8 x i32>, <8 x i32>* %r0_p, align 32, !alias.scope !1

    ; Evaluate %r1
    %r1_0 = insertelement <8 x i32> undef, i32 1, i32 0
    %r1 = shufflevector <8 x i32> %r1_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %r2
    %r2 = add <8 x i32> %r0, %r1

    ; Store %r2
    %r2_i = getelementptr inbounds i32, i32* %a1, i64 %index
    %r2_p = bitcast i32* %r2_i to <8 x i32>*
    store <8 x i32> %r2, <8 x i32>* %r2_p, align 32, !noalias !1

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" }
jit_run(): processing 2 packets and 0 scalar entries
jit_eval(): cleaning up..
jit_var_dec_ref_int(6): 0
jit_var_dec_ref_int(2): 0
jit_var_free(2)
jit_eval(): done.
z:[1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1]
jit_var_dec_ref_ext(9): 0
jit_var_free(9)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(4): 0
jit_var_free(4)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(3): 0
jit_var_free(3)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(6): 0
jit_var_free(6)
jit_free(<@>, type=host, size=64)
jit_shutdown(): destroying streams ..
jit_malloc_trim(): freed
 - host memory: 256 B in 4 allocations
jit_shutdown(): done
