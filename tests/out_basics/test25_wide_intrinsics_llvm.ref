jit_device_set(device=-1, stream=0): creating stream
jit_trace_append(1): $r0_0 = trunc i64 $i to $t0$n$r0_1 = insertelement <$w x $t0> undef, $t0 $r0_0, i32 0$n$r0_2 = shufflevector <$w x $t0> $r0_1, <$w x $t0> undef, <$w x i32> $z$n$r0 = add <$w x $t0> $r0_2, $l0
jit_var_inc_ref_ext(1): 1
jit_var_inc_ref_int(1): 1
jit_trace_append(2 <- 1): $r0 = uitofp <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(2): 1
jit_var_dec_ref_ext(1): 0
jit_trace_append(1): $r0_0 = trunc i64 $i to $t0$n$r0_1 = insertelement <$w x $t0> undef, $t0 $r0_0, i32 0$n$r0_2 = shufflevector <$w x $t0> $r0_1, <$w x $t0> undef, <$w x i32> $z$n$r0 = add <$w x $t0> $r0_2, $l0 (reused)
jit_var_inc_ref_ext(1): 1
jit_var_inc_ref_int(1): 2
jit_var_dec_ref_int(1): 1
jit_trace_append(2 <- 1): $r0 = uitofp <$w x $t1> $r1 to <$w x $t0> (reused)
jit_var_inc_ref_ext(2): 2
jit_var_dec_ref_ext(1): 0
jit_trace_append(3): $r0_0 = insertelement <$w x $t0> undef, $t0 0x3fb99999a0000000, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(3): 1
jit_var_inc_ref_int(2): 1
jit_var_inc_ref_int(3): 1
jit_trace_append(4 <- 2, 3): $r0 = fadd <$w x $t0> $r1, $r2
jit_var_inc_ref_ext(4): 1
jit_var_dec_ref_ext(3): 0
jit_var_dec_ref_ext(2): 1
jit_var_inc_ref_int(2): 2
jit_var_inc_ref_int(4): 1
jit_trace_append(5 <- 2, 4): $3$r0 = call <$w x $t0> @llvm.x86.avx.max.ps.256(<$w x $t1> $r1, <$w x $t2> $r2)
jit_var_inc_ref_ext(5): 1
jit_var_inc_ref_int(2): 3
jit_var_inc_ref_int(4): 2
jit_var_inc_ref_int(5): 1
jit_trace_append(6 <- 2, 4, 5): $r0 = call <$w x $t0> @llvm.fma.v$w$a1(<$w x $t1> $r1, <$w x $t2> $r2, <$w x $t3> $r3)
jit_var_inc_ref_ext(6): 1
jit_var_inc_ref_int(4): 3
jit_var_inc_ref_int(5): 2
jit_trace_append(7 <- 4, 5): $r0 = fcmp oeq <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(7): 1
jit_eval(): begin.
jit_assemble(size=64): register map:
   - %r0 -> 1
   - %f1 -> 2
   - %f2 -> 3 [scalar]
   - %f3 -> 4
   - %f4 -> 5 [out]
jit_malloc(type=host-async, size=256): <@> (new allocation)
   - %f5 -> 6 [out]
jit_malloc(type=host-async, size=256): <@> (new allocation)
   - %p6 -> 7 [out]
jit_malloc(type=host-async, size=256): <@> (new allocation)
jit_run(): launching kernel (n=64, in=0, out=3, ops=7) ..
define void @enoki_@@@@@@@@@@@@@@@@(i64 %start, i64 %end, i8** %ptrs) #0 alignstack(128) {
entry:
    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to float*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to float*

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %a2_p = load i8*, i8** %a2_i, align 8, !alias.scope !1
    %a2 = bitcast i8* %a2_p to i8*
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = trunc i64 %index to i32
    %r0_1 = insertelement <32 x i32> undef, i32 %r0_0, i32 0
    %r0_2 = shufflevector <32 x i32> %r0_1, <32 x i32> undef, <32 x i32> zeroinitializer
    %r0 = add <32 x i32> %r0_2, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>

    ; Evaluate %f1
    %f1 = uitofp <32 x i32> %r0 to <32 x float>

    ; Evaluate %f2
    %f2_0 = insertelement <32 x float> undef, float 0x3fb99999a0000000, i32 0
    %f2 = shufflevector <32 x float> %f2_0, <32 x float> undef, <32 x i32> zeroinitializer

    ; Evaluate %f3
    %f3 = fadd <32 x float> %f1, %f2

    ; Evaluate %f4
    %f1_unroll_f4_0_0 = shufflevector <32 x float> %f1, <32 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
    %f1_unroll_f4_0_1 = shufflevector <32 x float> %f1, <32 x float> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>

    %f1_unroll_f4_1_0 = shufflevector <16 x float> %f1_unroll_f4_0_0, <16 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
    %f1_unroll_f4_1_1 = shufflevector <16 x float> %f1_unroll_f4_0_0, <16 x float> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
    %f1_unroll_f4_1_2 = shufflevector <16 x float> %f1_unroll_f4_0_1, <16 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
    %f1_unroll_f4_1_3 = shufflevector <16 x float> %f1_unroll_f4_0_1, <16 x float> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    %f3_unroll_f4_0_0 = shufflevector <32 x float> %f3, <32 x float> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
    %f3_unroll_f4_0_1 = shufflevector <32 x float> %f3, <32 x float> undef, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>

    %f3_unroll_f4_1_0 = shufflevector <16 x float> %f3_unroll_f4_0_0, <16 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
    %f3_unroll_f4_1_1 = shufflevector <16 x float> %f3_unroll_f4_0_0, <16 x float> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
    %f3_unroll_f4_1_2 = shufflevector <16 x float> %f3_unroll_f4_0_1, <16 x float> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
    %f3_unroll_f4_1_3 = shufflevector <16 x float> %f3_unroll_f4_0_1, <16 x float> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    %f4_unroll_f4_1_0 = call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %f1_unroll_f4_1_0, <8 x float> %f3_unroll_f4_1_0)
    %f4_unroll_f4_1_1 = call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %f1_unroll_f4_1_1, <8 x float> %f3_unroll_f4_1_1)
    %f4_unroll_f4_1_2 = call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %f1_unroll_f4_1_2, <8 x float> %f3_unroll_f4_1_2)
    %f4_unroll_f4_1_3 = call <8 x float> @llvm.x86.avx.max.ps.256(<8 x float> %f1_unroll_f4_1_3, <8 x float> %f3_unroll_f4_1_3)

    %f4_unroll_f4_0_0 = shufflevector <8 x float> %f4_unroll_f4_1_0, <8 x float> %f4_unroll_f4_1_1, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
    %f4_unroll_f4_0_1 = shufflevector <8 x float> %f4_unroll_f4_1_2, <8 x float> %f4_unroll_f4_1_3, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    %f4 = shufflevector <16 x float> %f4_unroll_f4_0_0, <16 x float> %f4_unroll_f4_0_1, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>

    ; Store %f4
    %f4_i = getelementptr inbounds float, float* %a0, i64 %index
    %f4_p = bitcast float* %f4_i to <32 x float>*
    store <32 x float> %f4, <32 x float>* %f4_p, align 128, !noalias !1

    ; Evaluate %f5
    %f5 = call <32 x float> @llvm.fma.v32f32(<32 x float> %f1, <32 x float> %f3, <32 x float> %f4)

    ; Store %f5
    %f5_i = getelementptr inbounds float, float* %a1, i64 %index
    %f5_p = bitcast float* %f5_i to <32 x float>*
    store <32 x float> %f5, <32 x float>* %f5_p, align 128, !noalias !1

    ; Evaluate %p6
    %p6 = fcmp oeq <32 x float> %f3, %f4

    ; Store %p6
    %p6_i = getelementptr inbounds i8, i8* %a2, i64 %index
    %p6_p = bitcast i8* %p6_i to <32 x i8>*
    %p6_e = zext <32 x i1> %p6 to <32 x i8>
    store <32 x i8> %p6_e, <32 x i8>* %p6_p, align 32, !noalias !1

    %index_next = add i64 %index, 32
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2
}

declare <8 x float> @llvm.x86.avx.max.ps.256(<8 x float>, <8 x float>)
declare <32 x float> @llvm.fma.v32f32(<32 x float>, <32 x float>, <32 x float>)

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "target-features"="+avx2" }
jit_run(): processing 2 packets and 0 scalar entries
jit_eval(): cleaning up..
jit_var_dec_ref_int(2): 2
jit_var_dec_ref_int(4): 2
jit_var_dec_ref_int(2): 1
jit_var_dec_ref_int(4): 1
jit_var_dec_ref_int(5): 1
jit_var_dec_ref_int(4): 0
jit_var_dec_ref_int(5): 0
jit_eval(): done.
value=[0.1, 1.1, 2.1, 3.1, 4.1, .. 54 skipped .., 59.1, 60.1, 61.1, 62.1, 63.1]
value=[0.1, 2.2, 6.3, 12.4, 20.5, .. 54 skipped .., 3546, 3666.1, 3788.2, 3912.3, 4038.4]
jit_all(<@>, size=64)
jit_reduce(<@>, type=uint32, rtype=and, size=16)
jit_var_dec_ref_ext(7): 0
jit_var_free(7)
jit_free(<@>, type=host-async, size=256)
jit_var_dec_ref_ext(6): 0
jit_var_free(6)
jit_free(<@>, type=host-async, size=256)
jit_var_dec_ref_ext(5): 0
jit_var_free(5)
jit_free(<@>, type=host-async, size=256)
jit_var_dec_ref_ext(4): 0
jit_var_free(4)
jit_var_dec_ref_int(2): 0
jit_var_dec_ref_int(3): 0
jit_var_free(3)
jit_var_dec_ref_ext(2): 0
jit_var_free(2)
jit_var_dec_ref_int(1): 0
jit_var_free(1)
jit_shutdown(): releasing 1 stream ..
jit_free_flush(): scheduling 3 deallocations
jit_shutdown(): releasing 1 kernel ..
jit_malloc_trim(): freed
 - host-async memory: 768 B in 3 allocations
jit_shutdown(): done
