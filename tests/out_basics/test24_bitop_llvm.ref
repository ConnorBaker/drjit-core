jit_malloc(type=host, size=64): <@> (new allocation)
jit_var_map_mem(1): <@>, size=4, free=1
jit_var_inc_ref_ext(1): 1
jit_var_copy_mem(1, size=4)
jit_var_new(2): 
jit_var_inc_ref_ext(2): 1
jit_var_inc_ref_int(2): 1
jit_var_dec_ref_ext(2): 0
jit_var_new(3 <- 2, 0, 0, 0): declare <$w x $t1> @llvm.ctpop.v$w$a1(<$w x $t1>)
jit_var_inc_ref_ext(3): 1
jit_var_inc_ref_int(1): 1
jit_var_inc_ref_int(3): 1
jit_var_new(4 <- 1, 3): $r0 = call <$w x $t0> @llvm.ctpop.v$w$a1(<$w x $t1> $r1)
jit_var_inc_ref_ext(4): 1
jit_var_dec_ref_ext(3): 0
jit_var_new(2):  (reused)
jit_var_inc_ref_ext(2): 1
jit_var_inc_ref_int(2): 2
jit_var_dec_ref_ext(2): 0
jit_var_new(5 <- 2, 0, 0, 0): declare <$w x $t1> @llvm.ctlz.v$w$a1(<$w x $t1>, i1)
jit_var_inc_ref_ext(5): 1
jit_var_inc_ref_int(1): 2
jit_var_inc_ref_int(5): 1
jit_var_new(6 <- 1, 5): $r0 = call <$w x $t0> @llvm.ctlz.v$w$a1(<$w x $t1> $r1, i1 0)
jit_var_inc_ref_ext(6): 1
jit_var_dec_ref_ext(5): 0
jit_var_new(2):  (reused)
jit_var_inc_ref_ext(2): 1
jit_var_inc_ref_int(2): 3
jit_var_dec_ref_ext(2): 0
jit_var_new(7 <- 2, 0, 0, 0): declare <$w x $t1> @llvm.cttz.v$w$a1(<$w x $t1>, i1)
jit_var_inc_ref_ext(7): 1
jit_var_inc_ref_int(1): 3
jit_var_inc_ref_int(7): 1
jit_var_new(8 <- 1, 7): $r0 = call <$w x $t0> @llvm.cttz.v$w$a1(<$w x $t1> $r1, i1 0)
jit_var_inc_ref_ext(8): 1
jit_var_dec_ref_ext(7): 0
jit_var_schedule(4)
jit_var_schedule(6)
jit_var_schedule(8)
orig : [0, 1, 1234, 4294967295]
jit_eval(): launching 1 kernel.
jit_assemble(size=4): register map:
   - gl0 -> 3 [scalar]
   - gl1 -> 5 [scalar]
   - gl2 -> 7 [scalar]
   - %r3 -> 1 [in]
   - %r4 -> 4 [out]
jit_malloc(type=host-async, size=64): <@> (new allocation)
   - %r5 -> 6 [out]
jit_malloc(type=host-async, size=64): <@> (new allocation)
   - %r6 -> 8 [out]
jit_malloc(type=host-async, size=64): <@> (new allocation)
  -> launching <@> (n=4, in=1, out=3, ops=7):
declare <8 x i32> @llvm.ctpop.v8i32(<8 x i32>)

declare <8 x i32> @llvm.ctlz.v8i32(<8 x i32>, i1)

declare <8 x i32> @llvm.cttz.v8i32(<8 x i32>, i1)

define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %a2_p = load i8*, i8** %a2_i, align 8, !alias.scope !1
    %a2 = bitcast i8* %a2_p to i32*

    ; Prepare argument 3
    %a3_i = getelementptr inbounds i8*, i8** %ptrs, i32 3
    %a3_p = load i8*, i8** %a3_i, align 8, !alias.scope !1
    %a3 = bitcast i8* %a3_p to i32*
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Load %r3
    %r3_i = getelementptr inbounds i32, i32* %a0, i32 %index
    %r3_p = bitcast i32* %r3_i to <8 x i32>*
    %r3 = load <8 x i32>, <8 x i32>* %r3_p, align 32, !alias.scope !1

    ; Evaluate %r4
    %r4 = call <8 x i32> @llvm.ctpop.v8i32(<8 x i32> %r3)

    ; Store %r4
    %r4_i = getelementptr inbounds i32, i32* %a1, i32 %index
    %r4_p = bitcast i32* %r4_i to <8 x i32>*
    store <8 x i32> %r4, <8 x i32>* %r4_p, align 32, !noalias !1

    ; Evaluate %r5
    %r5 = call <8 x i32> @llvm.ctlz.v8i32(<8 x i32> %r3, i1 0)

    ; Store %r5
    %r5_i = getelementptr inbounds i32, i32* %a2, i32 %index
    %r5_p = bitcast i32* %r5_i to <8 x i32>*
    store <8 x i32> %r5, <8 x i32>* %r5_p, align 32, !noalias !1

    ; Evaluate %r6
    %r6 = call <8 x i32> @llvm.cttz.v8i32(<8 x i32> %r3, i1 0)

    ; Store %r6
    %r6_i = getelementptr inbounds i32, i32* %a3, i32 %index
    %r6_p = bitcast i32* %r6_i to <8 x i32>*
    store <8 x i32> %r6, <8 x i32>* %r6_p, align 32, !noalias !1

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 1 packet in 1 block ..
jit_eval(): cleaning up..
jit_var_dec_ref_int(1): 2
jit_var_dec_ref_int(3): 0
jit_var_free(3)
jit_var_dec_ref_int(2): 2
jit_var_dec_ref_int(1): 1
jit_var_dec_ref_int(5): 0
jit_var_free(5)
jit_var_dec_ref_int(2): 1
jit_var_dec_ref_int(1): 0
jit_var_dec_ref_int(7): 0
jit_var_free(7)
jit_var_dec_ref_int(2): 0
jit_var_free(2)
jit_eval(): done.
pop  : [0, 1, 5, 32]
lz   : [32, 0, 1, 0]
tz   : [32, 31, 21, 0]
jit_var_dec_ref_ext(8): 0
jit_var_free(8)
jit_free(<@>, type=host-async, size=64)
jit_var_dec_ref_ext(6): 0
jit_var_free(6)
jit_free(<@>, type=host-async, size=64)
jit_var_dec_ref_ext(4): 0
jit_var_free(4)
jit_free(<@>, type=host-async, size=64)
jit_var_dec_ref_ext(1): 0
jit_var_free(1)
jit_free(<@>, type=host-async, size=64)
jit_free_flush(): scheduling 4 deallocations
jit_shutdown(): releasing 1 kernel ..
jit_shutdown(): releasing 1 thread state ..
jit_malloc_trim(): freed
 - host-async memory: 256 B in 4 allocations
jit_shutdown(): done
