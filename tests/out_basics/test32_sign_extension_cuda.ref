jit_set_device(device=0, stream=0): creating stream
jit_var_new_literal(1): mov.$b0 $r0, 0xffffffff
jit_var_inc_ref_ext(1): 1
jit_var_new_literal(2): mov.$b0 $r0, 0xffffffff
jit_var_inc_ref_ext(2): 1
jit_var_new_literal(3): mov.$b0 $r0, 0xffffffffffffffff
jit_var_inc_ref_ext(3): 1
jit_var_new_literal(4): mov.$b0 $r0, 0xffffffffffffffff
jit_var_inc_ref_ext(4): 1
jit_var_new_literal(1): mov.$b0 $r0, 0xffffffff (reused)
jit_var_inc_ref_ext(1): 2
jit_var_inc_ref_int(1): 1
jit_var_inc_ref_int(1): 2
jit_var_new(5 <- 1, 1): setp.eq.$t1 $r0, $r1, $r2
jit_var_inc_ref_ext(5): 1
jit_eval(): launching 1 kernel.
jit_assemble(size=1): register map:
   - %r4 -> 1 [scalar]
   - %p5 -> 5 [scalar] [out]
jit_malloc(type=device, device=0, size=64): <@> (new allocation)
  -> launching <@> (n=1, in=0, out=1, ops=6):
.version 6.3
.address_size 64
.entry enoki_<@>(.param .u32 size,
                              .param .u64 arg0) {
    .reg.b8 %b<6>;
    .reg.b16 %w<6>;
    .reg.b32 %r<6>;
    .reg.b64 %rd<6>;
    .reg.f32 %f<6>;
    .reg.f64 %d<6>;
    .reg.pred %p<6>;

    // Grid-stride loop setup
    mov.u32 %r0, %ctaid.x;
    mov.u32 %r1, %ntid.x;
    mov.u32 %r2, %tid.x;
    mad.lo.u32 %r0, %r0, %r1, %r2;
    ld.param.u32 %r2, [size];
    setp.ge.u32 %p0, %r0, %r2;
    @%p0 bra L0;

    mov.u32 %r3, %nctaid.x;
    mul.lo.u32 %r1, %r3, %r1;

L1: // Loop body

    // Evaluate %r4
    mov.b32 %r4, 0xffffffff;

    // Evaluate %p5
    setp.eq.s32 %p5, %r4, %r4;

    // Store %p5
    ld.param.u64 %rd0, [arg0];
    mul.wide.u32 %rd1, %r0, 1;
    add.u64 %rd0, %rd0, %rd1;
    selp.u16 %w0, 1, 0, %p5;
    st.global.cs.u8 [%rd0], %w0;

    add.u32 %r0, %r0, %r1;
    setp.ge.u32 %p0, %r0, %r2;
    @!%p0 bra L1;

L0:
    ret;
}
jit_eval(): cleaning up..
jit_var_dec_ref_int(1): 1
jit_var_dec_ref_int(1): 0
jit_eval(): done.
jit_all(<@>, size=1)
jit_memset_async(<@>, isize=1, size=3)
jit_malloc(type=host-pinned, size=64): <@> (new allocation)
jit_reduce(<@>, type=uint32, rtype=and, size=1)
jit_free(<@>, type=host-pinned, size=64)
jit_var_dec_ref_ext(5): 0
jit_var_free(5)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_ext(1): 1
jit_var_new_literal(2): mov.$b0 $r0, 0xffffffff (reused)
jit_var_inc_ref_ext(2): 2
jit_var_inc_ref_int(2): 1
jit_var_inc_ref_int(2): 2
jit_var_new(6 <- 2, 2): setp.eq.$t1 $r0, $r1, $r2
jit_var_inc_ref_ext(6): 1
jit_eval(): launching 1 kernel.
jit_assemble(size=1): register map:
   - %r4 -> 2 [scalar]
   - %p5 -> 6 [scalar] [out]
jit_malloc(type=device, device=0, size=64): <@> (reused local)
  -> launching <@> (n=1, in=0, out=1, ops=6):
.version 6.3
.address_size 64
.entry enoki_<@>(.param .u32 size,
                              .param .u64 arg0) {
    .reg.b8 %b<6>;
    .reg.b16 %w<6>;
    .reg.b32 %r<6>;
    .reg.b64 %rd<6>;
    .reg.f32 %f<6>;
    .reg.f64 %d<6>;
    .reg.pred %p<6>;

    // Grid-stride loop setup
    mov.u32 %r0, %ctaid.x;
    mov.u32 %r1, %ntid.x;
    mov.u32 %r2, %tid.x;
    mad.lo.u32 %r0, %r0, %r1, %r2;
    ld.param.u32 %r2, [size];
    setp.ge.u32 %p0, %r0, %r2;
    @%p0 bra L0;

    mov.u32 %r3, %nctaid.x;
    mul.lo.u32 %r1, %r3, %r1;

L1: // Loop body

    // Evaluate %r4
    mov.b32 %r4, 0xffffffff;

    // Evaluate %p5
    setp.eq.u32 %p5, %r4, %r4;

    // Store %p5
    ld.param.u64 %rd0, [arg0];
    mul.wide.u32 %rd1, %r0, 1;
    add.u64 %rd0, %rd0, %rd1;
    selp.u16 %w0, 1, 0, %p5;
    st.global.cs.u8 [%rd0], %w0;

    add.u32 %r0, %r0, %r1;
    setp.ge.u32 %p0, %r0, %r2;
    @!%p0 bra L1;

L0:
    ret;
}
jit_eval(): cleaning up..
jit_var_dec_ref_int(2): 1
jit_var_dec_ref_int(2): 0
jit_free_flush(): scheduling 1 deallocation
jit_eval(): done.
jit_all(<@>, size=1)
jit_memset_async(<@>, isize=1, size=3)
jit_malloc(type=host-pinned, size=64): <@> (new allocation)
jit_reduce(<@>, type=uint32, rtype=and, size=1)
jit_free(<@>, type=host-pinned, size=64)
jit_var_dec_ref_ext(6): 0
jit_var_free(6)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_ext(2): 1
jit_var_new_literal(3): mov.$b0 $r0, 0xffffffffffffffff (reused)
jit_var_inc_ref_ext(3): 2
jit_var_inc_ref_int(3): 1
jit_var_inc_ref_int(3): 2
jit_var_new(7 <- 3, 3): setp.eq.$t1 $r0, $r1, $r2
jit_var_inc_ref_ext(7): 1
jit_eval(): launching 1 kernel.
jit_assemble(size=1): register map:
   - %rd4 -> 3 [scalar]
   - %p5 -> 7 [scalar] [out]
jit_malloc(type=device, device=0, size=64): <@> (reused local)
  -> launching <@> (n=1, in=0, out=1, ops=6):
.version 6.3
.address_size 64
.entry enoki_<@>(.param .u32 size,
                              .param .u64 arg0) {
    .reg.b8 %b<6>;
    .reg.b16 %w<6>;
    .reg.b32 %r<6>;
    .reg.b64 %rd<6>;
    .reg.f32 %f<6>;
    .reg.f64 %d<6>;
    .reg.pred %p<6>;

    // Grid-stride loop setup
    mov.u32 %r0, %ctaid.x;
    mov.u32 %r1, %ntid.x;
    mov.u32 %r2, %tid.x;
    mad.lo.u32 %r0, %r0, %r1, %r2;
    ld.param.u32 %r2, [size];
    setp.ge.u32 %p0, %r0, %r2;
    @%p0 bra L0;

    mov.u32 %r3, %nctaid.x;
    mul.lo.u32 %r1, %r3, %r1;

L1: // Loop body

    // Evaluate %rd4
    mov.b64 %rd4, 0xffffffffffffffff;

    // Evaluate %p5
    setp.eq.s64 %p5, %rd4, %rd4;

    // Store %p5
    ld.param.u64 %rd0, [arg0];
    mul.wide.u32 %rd1, %r0, 1;
    add.u64 %rd0, %rd0, %rd1;
    selp.u16 %w0, 1, 0, %p5;
    st.global.cs.u8 [%rd0], %w0;

    add.u32 %r0, %r0, %r1;
    setp.ge.u32 %p0, %r0, %r2;
    @!%p0 bra L1;

L0:
    ret;
}
jit_eval(): cleaning up..
jit_var_dec_ref_int(3): 1
jit_var_dec_ref_int(3): 0
jit_free_flush(): scheduling 1 deallocation
jit_eval(): done.
jit_all(<@>, size=1)
jit_memset_async(<@>, isize=1, size=3)
jit_malloc(type=host-pinned, size=64): <@> (reused global)
jit_reduce(<@>, type=uint32, rtype=and, size=1)
jit_free(<@>, type=host-pinned, size=64)
jit_var_dec_ref_ext(7): 0
jit_var_free(7)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_ext(3): 1
jit_var_new_literal(4): mov.$b0 $r0, 0xffffffffffffffff (reused)
jit_var_inc_ref_ext(4): 2
jit_var_inc_ref_int(4): 1
jit_var_inc_ref_int(4): 2
jit_var_new(8 <- 4, 4): setp.eq.$t1 $r0, $r1, $r2
jit_var_inc_ref_ext(8): 1
jit_eval(): launching 1 kernel.
jit_assemble(size=1): register map:
   - %rd4 -> 4 [scalar]
   - %p5 -> 8 [scalar] [out]
jit_malloc(type=device, device=0, size=64): <@> (reused local)
  -> launching <@> (n=1, in=0, out=1, ops=6):
.version 6.3
.address_size 64
.entry enoki_<@>(.param .u32 size,
                              .param .u64 arg0) {
    .reg.b8 %b<6>;
    .reg.b16 %w<6>;
    .reg.b32 %r<6>;
    .reg.b64 %rd<6>;
    .reg.f32 %f<6>;
    .reg.f64 %d<6>;
    .reg.pred %p<6>;

    // Grid-stride loop setup
    mov.u32 %r0, %ctaid.x;
    mov.u32 %r1, %ntid.x;
    mov.u32 %r2, %tid.x;
    mad.lo.u32 %r0, %r0, %r1, %r2;
    ld.param.u32 %r2, [size];
    setp.ge.u32 %p0, %r0, %r2;
    @%p0 bra L0;

    mov.u32 %r3, %nctaid.x;
    mul.lo.u32 %r1, %r3, %r1;

L1: // Loop body

    // Evaluate %rd4
    mov.b64 %rd4, 0xffffffffffffffff;

    // Evaluate %p5
    setp.eq.u64 %p5, %rd4, %rd4;

    // Store %p5
    ld.param.u64 %rd0, [arg0];
    mul.wide.u32 %rd1, %r0, 1;
    add.u64 %rd0, %rd0, %rd1;
    selp.u16 %w0, 1, 0, %p5;
    st.global.cs.u8 [%rd0], %w0;

    add.u32 %r0, %r0, %r1;
    setp.ge.u32 %p0, %r0, %r2;
    @!%p0 bra L1;

L0:
    ret;
}
jit_eval(): cleaning up..
jit_var_dec_ref_int(4): 1
jit_var_dec_ref_int(4): 0
jit_free_flush(): scheduling 1 deallocation
jit_eval(): done.
jit_all(<@>, size=1)
jit_memset_async(<@>, isize=1, size=3)
jit_malloc(type=host-pinned, size=64): <@> (reused global)
jit_reduce(<@>, type=uint32, rtype=and, size=1)
jit_free(<@>, type=host-pinned, size=64)
jit_var_dec_ref_ext(8): 0
jit_var_free(8)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_ext(4): 1
jit_var_dec_ref_ext(4): 0
jit_var_free(4)
jit_var_dec_ref_ext(3): 0
jit_var_free(3)
jit_var_dec_ref_ext(2): 0
jit_var_free(2)
jit_var_dec_ref_ext(1): 0
jit_var_free(1)
jit_shutdown(): releasing 1 stream ..
jit_free_flush(): scheduling 2 deallocations
jit_shutdown(): releasing 4 kernels ..
jit_malloc_trim(): freed
 - host-pinned memory: 128 B in 2 allocations
 - device memory: 64 B in 1 allocation
jit_shutdown(): done
