jit_set_device(device=-1, stream=0): creating stream
jit_var_new_literal(1): $r0_0 = insertelement <$w x $t0> undef, $t0 0x0, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(1): 1
jit_malloc(type=host, size=128): <@> (new allocation)
jit_var_map_mem(2): <@>, size=15, free=1
jit_var_inc_ref_ext(2): 1
jit_var_copy_mem(2, size=15)
jit_var_new_literal(3): $r0_0 = insertelement <$w x $t0> undef, $t0 0x3ff0000000000000, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(3): 1
jit_var_new_literal(4): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(4): 1
jit_malloc(type=host-async, size=128): <@> (new allocation)
jit_memset_async(<@>, isize=4, size=16)
jit_var_inc_ref_ext(1): 2
jit_var_copy_ptr(5 <- 1): <@>
jit_var_inc_ref_ext(5): 1
jit_var_new(6): $r0_0 = insertelement <$w x $t0> undef, i32 $i, i32 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n$r0 = add <$w x $t0> $r0_1, $l0
jit_var_inc_ref_ext(6): 1
jit_var_new(7): $r0_0 = insertelement <$w x $t0> undef, i32 %end, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n
jit_var_inc_ref_ext(7): 1
jit_var_inc_ref_int(6): 1
jit_var_inc_ref_int(7): 1
jit_var_new(8 <- 6, 7): $r0 = icmp ult <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(8): 1
jit_var_inc_ref_ext(8): 2
jit_var_dec_ref_ext(8): 1
jit_var_dec_ref_ext(7): 0
jit_var_dec_ref_ext(6): 0
jit_var_inc_ref_int(5): 1
jit_var_inc_ref_int(3): 1
jit_var_inc_ref_int(2): 1
jit_var_inc_ref_int(8): 1
jit_var_new(9 <- 5, 3, 2, 8): $4call void @ek.masked_scatter_add_v$w$a2($t1 $r1, <$w x $t2> $r2, <$w x $t3> $r3, <$w x $t4> $r4)
jit_var_inc_ref_ext(9): 1
jit_var_mark_scatter(9, 1)
jit_var_dec_ref_ext(8): 0
jit_var_dec_ref_ext(5): 0
jit_var_dec_ref_ext(4): 0
jit_var_free(4)
jit_var_dec_ref_ext(3): 0
jit_eval(): launching 1 kernel.
jit_assemble(size=15): register map:
   - %r0 -> 6 [scalar]
   - %r1 -> 7 [scalar]
   - %p2 -> 8 [scalar]
   - %r3 -> 2 [in]
   - %f4 -> 3 [scalar]
   - %rd5 -> 5 [scalar] [direct_pointer]
   - %u6 -> 9 [scat]
  -> launching <@> (n=15, in=2, out=1, ops=7):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(64) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %rd5 = load i8*, i8** %a1_i, align 8, !alias.scope !1
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = insertelement <16 x i32> undef, i32 %index, i32 0
    %r0_1 = shufflevector <16 x i32> %r0_0, <16 x i32> undef, <16 x i32> zeroinitializer
    %r0 = add <16 x i32> %r0_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    ; Evaluate %r1
    %r1_0 = insertelement <16 x i32> undef, i32 %end, i32 0
    %r1 = shufflevector <16 x i32> %r1_0, <16 x i32> undef, <16 x i32> zeroinitializer
    

    ; Evaluate %p2
    %p2 = icmp ult <16 x i32> %r0, %r1

    ; Load %r3
    %r3_i = getelementptr inbounds i32, i32* %a0, i32 %index
    %r3_p = bitcast i32* %r3_i to <16 x i32>*
    %r3 = load <16 x i32>, <16 x i32>* %r3_p, align 64, !alias.scope !1

    ; Evaluate %f4
    %f4_0 = insertelement <16 x float> undef, float 0x3ff0000000000000, i32 0
    %f4 = shufflevector <16 x float> %f4_0, <16 x float> undef, <16 x i32> zeroinitializer
    call void @ek.masked_scatter_add_v16f32(i8* %rd5, <16 x float> %f4, <16 x i32> %r3, <16 x i1> %p2)

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 16
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake-avx512" "stack-probe-size"="1073741824" "target-features"="+avx512f,+avx512dq,+avx512vl,+avx512cd" }
jit_run(): scheduling 1 packet
jit_malloc(type=host-async, size=128): <@> (new allocation)
jit_eval(): cleaning up..
jit_var_dec_ref_ext(9): 0
jit_var_free(9)
jit_var_dec_ref_int(5): 0
jit_var_free(5)
jit_var_dec_ref_ext(1): 1
jit_var_dec_ref_int(3): 0
jit_var_free(3)
jit_var_dec_ref_int(2): 0
jit_var_dec_ref_int(8): 0
jit_var_free(8)
jit_var_dec_ref_int(6): 0
jit_var_free(6)
jit_var_dec_ref_int(7): 0
jit_var_free(7)
jit_eval(): done.
jit_free(<@>, type=host-async, size=128)
target=[4, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0]
jit_var_dec_ref_ext(2): 0
jit_var_free(2)
jit_free(<@>, type=host-async, size=128)
jit_var_dec_ref_ext(1): 0
jit_var_free(1)
jit_free(<@>, type=host-async, size=128)
jit_var_new_literal(10): $r0_0 = insertelement <$w x $t0> undef, $t0 0x0, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(10): 1
jit_malloc(type=host, size=128): <@> (new allocation)
jit_var_map_mem(11): <@>, size=16, free=1
jit_var_inc_ref_ext(11): 1
jit_var_copy_mem(11, size=16)
jit_var_new_literal(12): $r0_0 = insertelement <$w x $t0> undef, $t0 0x3ff0000000000000, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(12): 1
jit_var_new_literal(13): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(13): 1
jit_malloc(type=host-async, size=128): <@> (reused local)
jit_memset_async(<@>, isize=4, size=16)
jit_var_inc_ref_ext(10): 2
jit_var_copy_ptr(14 <- 10): <@>
jit_var_inc_ref_ext(14): 1
jit_var_new(15): $r0_0 = insertelement <$w x $t0> undef, i32 $i, i32 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n$r0 = add <$w x $t0> $r0_1, $l0
jit_var_inc_ref_ext(15): 1
jit_var_new(16): $r0_0 = insertelement <$w x $t0> undef, i32 %end, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n
jit_var_inc_ref_ext(16): 1
jit_var_inc_ref_int(15): 1
jit_var_inc_ref_int(16): 1
jit_var_new(17 <- 15, 16): $r0 = icmp ult <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(17): 1
jit_var_inc_ref_ext(17): 2
jit_var_dec_ref_ext(17): 1
jit_var_dec_ref_ext(16): 0
jit_var_dec_ref_ext(15): 0
jit_var_inc_ref_int(14): 1
jit_var_inc_ref_int(12): 1
jit_var_inc_ref_int(11): 1
jit_var_inc_ref_int(17): 1
jit_var_new(18 <- 14, 12, 11, 17): $4call void @ek.masked_scatter_add_v$w$a2($t1 $r1, <$w x $t2> $r2, <$w x $t3> $r3, <$w x $t4> $r4)
jit_var_inc_ref_ext(18): 1
jit_var_mark_scatter(18, 10)
jit_var_dec_ref_ext(17): 0
jit_var_dec_ref_ext(14): 0
jit_var_dec_ref_ext(13): 0
jit_var_free(13)
jit_var_dec_ref_ext(12): 0
jit_eval(): launching 1 kernel.
jit_assemble(size=16): register map:
   - %r0 -> 15 [scalar]
   - %r1 -> 16 [scalar]
   - %p2 -> 17 [scalar]
   - %r3 -> 11 [in]
   - %f4 -> 12 [scalar]
   - %rd5 -> 14 [scalar] [direct_pointer]
   - %u6 -> 18 [scat]
  -> launching <@> (n=16, in=2, out=1, ops=7):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(64) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %rd5 = load i8*, i8** %a1_i, align 8, !alias.scope !1
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = insertelement <16 x i32> undef, i32 %index, i32 0
    %r0_1 = shufflevector <16 x i32> %r0_0, <16 x i32> undef, <16 x i32> zeroinitializer
    %r0 = add <16 x i32> %r0_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    ; Evaluate %r1
    %r1_0 = insertelement <16 x i32> undef, i32 %end, i32 0
    %r1 = shufflevector <16 x i32> %r1_0, <16 x i32> undef, <16 x i32> zeroinitializer
    

    ; Evaluate %p2
    %p2 = icmp ult <16 x i32> %r0, %r1

    ; Load %r3
    %r3_i = getelementptr inbounds i32, i32* %a0, i32 %index
    %r3_p = bitcast i32* %r3_i to <16 x i32>*
    %r3 = load <16 x i32>, <16 x i32>* %r3_p, align 64, !alias.scope !1

    ; Evaluate %f4
    %f4_0 = insertelement <16 x float> undef, float 0x3ff0000000000000, i32 0
    %f4 = shufflevector <16 x float> %f4_0, <16 x float> undef, <16 x i32> zeroinitializer
    call void @ek.masked_scatter_add_v16f32(i8* %rd5, <16 x float> %f4, <16 x i32> %r3, <16 x i1> %p2)

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 16
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake-avx512" "stack-probe-size"="1073741824" "target-features"="+avx512f,+avx512dq,+avx512vl,+avx512cd" }
jit_run(): scheduling 1 packet
jit_malloc(type=host-async, size=128): <@> (reused local)
jit_eval(): cleaning up..
jit_var_dec_ref_ext(18): 0
jit_var_free(18)
jit_var_dec_ref_int(14): 0
jit_var_free(14)
jit_var_dec_ref_ext(10): 1
jit_var_dec_ref_int(12): 0
jit_var_free(12)
jit_var_dec_ref_int(11): 0
jit_var_dec_ref_int(17): 0
jit_var_free(17)
jit_var_dec_ref_int(15): 0
jit_var_free(15)
jit_var_dec_ref_int(16): 0
jit_var_free(16)
jit_free_flush(): scheduling 1 deallocation
jit_eval(): done.
jit_free(<@>, type=host-async, size=128)
target=[4, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0]
jit_var_dec_ref_ext(11): 0
jit_var_free(11)
jit_free(<@>, type=host-async, size=128)
jit_var_dec_ref_ext(10): 0
jit_var_free(10)
jit_free(<@>, type=host-async, size=128)
jit_var_new_literal(19): $r0_0 = insertelement <$w x $t0> undef, $t0 0x0, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(19): 1
jit_malloc(type=host, size=128): <@> (new allocation)
jit_var_map_mem(20): <@>, size=15, free=1
jit_var_inc_ref_ext(20): 1
jit_var_copy_mem(20, size=15)
jit_var_new_literal(21): $r0_0 = insertelement <$w x $t0> undef, $t0 0x3ff0000000000000, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(21): 1
jit_var_new_literal(22): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(22): 1
jit_var_inc_ref_int(20): 1
jit_var_new(23 <- 20): $r0 = zext <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(23): 1
jit_malloc(type=host-async, size=128): <@> (reused local)
jit_memset_async(<@>, isize=8, size=16)
jit_var_inc_ref_ext(19): 2
jit_var_copy_ptr(24 <- 19): <@>
jit_var_inc_ref_ext(24): 1
jit_var_new(25): $r0_0 = insertelement <$w x $t0> undef, i32 $i, i32 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n$r0 = add <$w x $t0> $r0_1, $l0
jit_var_inc_ref_ext(25): 1
jit_var_new(26): $r0_0 = insertelement <$w x $t0> undef, i32 %end, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n
jit_var_inc_ref_ext(26): 1
jit_var_inc_ref_int(25): 1
jit_var_inc_ref_int(26): 1
jit_var_new(27 <- 25, 26): $r0 = icmp ult <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(27): 1
jit_var_inc_ref_ext(27): 2
jit_var_dec_ref_ext(27): 1
jit_var_dec_ref_ext(26): 0
jit_var_dec_ref_ext(25): 0
jit_var_inc_ref_int(24): 1
jit_var_inc_ref_int(21): 1
jit_var_inc_ref_int(23): 1
jit_var_inc_ref_int(27): 1
jit_var_new(28 <- 24, 21, 23, 27): $3call void @ek.masked_scatter_add_v$w$a2($t1 $r1, <$w x $t2> $r2, <$w x $t3> $r3, <$w x $t4> $r4)
jit_var_inc_ref_ext(28): 1
jit_var_mark_scatter(28, 19)
jit_var_dec_ref_ext(27): 0
jit_var_dec_ref_ext(24): 0
jit_var_dec_ref_ext(23): 0
jit_var_dec_ref_ext(22): 0
jit_var_free(22)
jit_var_dec_ref_ext(21): 0
jit_eval(): launching 1 kernel.
jit_assemble(size=15): register map:
   - %r0 -> 25 [scalar]
   - %r1 -> 26 [scalar]
   - %p2 -> 27 [scalar]
   - %r3 -> 20 [in]
   - %rd4 -> 23
   - %d5 -> 21 [scalar]
   - %rd6 -> 24 [scalar] [direct_pointer]
   - %u7 -> 28 [scat]
  -> launching <@> (n=15, in=2, out=1, ops=8):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(64) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %rd6 = load i8*, i8** %a1_i, align 8, !alias.scope !1
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = insertelement <16 x i32> undef, i32 %index, i32 0
    %r0_1 = shufflevector <16 x i32> %r0_0, <16 x i32> undef, <16 x i32> zeroinitializer
    %r0 = add <16 x i32> %r0_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    ; Evaluate %r1
    %r1_0 = insertelement <16 x i32> undef, i32 %end, i32 0
    %r1 = shufflevector <16 x i32> %r1_0, <16 x i32> undef, <16 x i32> zeroinitializer
    

    ; Evaluate %p2
    %p2 = icmp ult <16 x i32> %r0, %r1

    ; Load %r3
    %r3_i = getelementptr inbounds i32, i32* %a0, i32 %index
    %r3_p = bitcast i32* %r3_i to <16 x i32>*
    %r3 = load <16 x i32>, <16 x i32>* %r3_p, align 64, !alias.scope !1

    ; Evaluate %rd4
    %rd4 = zext <16 x i32> %r3 to <16 x i64>

    ; Evaluate %d5
    %d5_0 = insertelement <16 x double> undef, double 0x3ff0000000000000, i32 0
    %d5 = shufflevector <16 x double> %d5_0, <16 x double> undef, <16 x i32> zeroinitializer
    %d5_unroll_u7_0_0 = shufflevector <16 x double> %d5, <16 x double> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
    %d5_unroll_u7_0_1 = shufflevector <16 x double> %d5, <16 x double> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    %rd4_unroll_u7_0_0 = shufflevector <16 x i64> %rd4, <16 x i64> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
    %rd4_unroll_u7_0_1 = shufflevector <16 x i64> %rd4, <16 x i64> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    %p2_unroll_u7_0_0 = shufflevector <16 x i1> %p2, <16 x i1> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
    %p2_unroll_u7_0_1 = shufflevector <16 x i1> %p2, <16 x i1> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    call void @ek.masked_scatter_add_v8f64(i8* %rd6, <8 x double> %d5_unroll_u7_0_0, <8 x i64> %rd4_unroll_u7_0_0, <8 x i1> %p2_unroll_u7_0_0)
    call void @ek.masked_scatter_add_v8f64(i8* %rd6, <8 x double> %d5_unroll_u7_0_1, <8 x i64> %rd4_unroll_u7_0_1, <8 x i1> %p2_unroll_u7_0_1)


    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 16
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake-avx512" "stack-probe-size"="1073741824" "target-features"="+avx512f,+avx512dq,+avx512vl,+avx512cd" }
jit_run(): scheduling 1 packet
jit_malloc(type=host-async, size=128): <@> (reused local)
jit_eval(): cleaning up..
jit_var_dec_ref_ext(28): 0
jit_var_free(28)
jit_var_dec_ref_int(24): 0
jit_var_free(24)
jit_var_dec_ref_ext(19): 1
jit_var_dec_ref_int(21): 0
jit_var_free(21)
jit_var_dec_ref_int(23): 0
jit_var_free(23)
jit_var_dec_ref_int(20): 0
jit_var_dec_ref_int(27): 0
jit_var_free(27)
jit_var_dec_ref_int(25): 0
jit_var_free(25)
jit_var_dec_ref_int(26): 0
jit_var_free(26)
jit_free_flush(): scheduling 1 deallocation
jit_eval(): done.
jit_free(<@>, type=host-async, size=128)
target=[4, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0]
jit_var_dec_ref_ext(20): 0
jit_var_free(20)
jit_free(<@>, type=host-async, size=128)
jit_var_dec_ref_ext(19): 0
jit_var_free(19)
jit_free(<@>, type=host-async, size=128)
jit_var_new_literal(29): $r0_0 = insertelement <$w x $t0> undef, $t0 0x0, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(29): 1
jit_malloc(type=host, size=128): <@> (new allocation)
jit_var_map_mem(30): <@>, size=16, free=1
jit_var_inc_ref_ext(30): 1
jit_var_copy_mem(30, size=16)
jit_var_new_literal(31): $r0_0 = insertelement <$w x $t0> undef, $t0 0x3ff0000000000000, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(31): 1
jit_var_new_literal(32): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(32): 1
jit_var_inc_ref_int(30): 1
jit_var_new(33 <- 30): $r0 = zext <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(33): 1
jit_malloc(type=host-async, size=128): <@> (reused local)
jit_memset_async(<@>, isize=8, size=16)
jit_var_inc_ref_ext(29): 2
jit_var_copy_ptr(34 <- 29): <@>
jit_var_inc_ref_ext(34): 1
jit_var_new(35): $r0_0 = insertelement <$w x $t0> undef, i32 $i, i32 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n$r0 = add <$w x $t0> $r0_1, $l0
jit_var_inc_ref_ext(35): 1
jit_var_new(36): $r0_0 = insertelement <$w x $t0> undef, i32 %end, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n
jit_var_inc_ref_ext(36): 1
jit_var_inc_ref_int(35): 1
jit_var_inc_ref_int(36): 1
jit_var_new(37 <- 35, 36): $r0 = icmp ult <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(37): 1
jit_var_inc_ref_ext(37): 2
jit_var_dec_ref_ext(37): 1
jit_var_dec_ref_ext(36): 0
jit_var_dec_ref_ext(35): 0
jit_var_inc_ref_int(34): 1
jit_var_inc_ref_int(31): 1
jit_var_inc_ref_int(33): 1
jit_var_inc_ref_int(37): 1
jit_var_new(38 <- 34, 31, 33, 37): $3call void @ek.masked_scatter_add_v$w$a2($t1 $r1, <$w x $t2> $r2, <$w x $t3> $r3, <$w x $t4> $r4)
jit_var_inc_ref_ext(38): 1
jit_var_mark_scatter(38, 29)
jit_var_dec_ref_ext(37): 0
jit_var_dec_ref_ext(34): 0
jit_var_dec_ref_ext(33): 0
jit_var_dec_ref_ext(32): 0
jit_var_free(32)
jit_var_dec_ref_ext(31): 0
jit_eval(): launching 1 kernel.
jit_assemble(size=16): register map:
   - %r0 -> 35 [scalar]
   - %r1 -> 36 [scalar]
   - %p2 -> 37 [scalar]
   - %r3 -> 30 [in]
   - %rd4 -> 33
   - %d5 -> 31 [scalar]
   - %rd6 -> 34 [scalar] [direct_pointer]
   - %u7 -> 38 [scat]
  -> launching <@> (n=16, in=2, out=1, ops=8):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(64) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %rd6 = load i8*, i8** %a1_i, align 8, !alias.scope !1
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = insertelement <16 x i32> undef, i32 %index, i32 0
    %r0_1 = shufflevector <16 x i32> %r0_0, <16 x i32> undef, <16 x i32> zeroinitializer
    %r0 = add <16 x i32> %r0_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    ; Evaluate %r1
    %r1_0 = insertelement <16 x i32> undef, i32 %end, i32 0
    %r1 = shufflevector <16 x i32> %r1_0, <16 x i32> undef, <16 x i32> zeroinitializer
    

    ; Evaluate %p2
    %p2 = icmp ult <16 x i32> %r0, %r1

    ; Load %r3
    %r3_i = getelementptr inbounds i32, i32* %a0, i32 %index
    %r3_p = bitcast i32* %r3_i to <16 x i32>*
    %r3 = load <16 x i32>, <16 x i32>* %r3_p, align 64, !alias.scope !1

    ; Evaluate %rd4
    %rd4 = zext <16 x i32> %r3 to <16 x i64>

    ; Evaluate %d5
    %d5_0 = insertelement <16 x double> undef, double 0x3ff0000000000000, i32 0
    %d5 = shufflevector <16 x double> %d5_0, <16 x double> undef, <16 x i32> zeroinitializer
    %d5_unroll_u7_0_0 = shufflevector <16 x double> %d5, <16 x double> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
    %d5_unroll_u7_0_1 = shufflevector <16 x double> %d5, <16 x double> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    %rd4_unroll_u7_0_0 = shufflevector <16 x i64> %rd4, <16 x i64> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
    %rd4_unroll_u7_0_1 = shufflevector <16 x i64> %rd4, <16 x i64> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    %p2_unroll_u7_0_0 = shufflevector <16 x i1> %p2, <16 x i1> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
    %p2_unroll_u7_0_1 = shufflevector <16 x i1> %p2, <16 x i1> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    call void @ek.masked_scatter_add_v8f64(i8* %rd6, <8 x double> %d5_unroll_u7_0_0, <8 x i64> %rd4_unroll_u7_0_0, <8 x i1> %p2_unroll_u7_0_0)
    call void @ek.masked_scatter_add_v8f64(i8* %rd6, <8 x double> %d5_unroll_u7_0_1, <8 x i64> %rd4_unroll_u7_0_1, <8 x i1> %p2_unroll_u7_0_1)


    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 16
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake-avx512" "stack-probe-size"="1073741824" "target-features"="+avx512f,+avx512dq,+avx512vl,+avx512cd" }
jit_run(): scheduling 1 packet
jit_malloc(type=host-async, size=128): <@> (reused local)
jit_eval(): cleaning up..
jit_var_dec_ref_ext(38): 0
jit_var_free(38)
jit_var_dec_ref_int(34): 0
jit_var_free(34)
jit_var_dec_ref_ext(29): 1
jit_var_dec_ref_int(31): 0
jit_var_free(31)
jit_var_dec_ref_int(33): 0
jit_var_free(33)
jit_var_dec_ref_int(30): 0
jit_var_dec_ref_int(37): 0
jit_var_free(37)
jit_var_dec_ref_int(35): 0
jit_var_free(35)
jit_var_dec_ref_int(36): 0
jit_var_free(36)
jit_free_flush(): scheduling 1 deallocation
jit_eval(): done.
jit_free(<@>, type=host-async, size=128)
target=[4, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0]
jit_var_dec_ref_ext(30): 0
jit_var_free(30)
jit_free(<@>, type=host-async, size=128)
jit_var_dec_ref_ext(29): 0
jit_var_free(29)
jit_free(<@>, type=host-async, size=128)
jit_var_new_literal(39): $r0_0 = insertelement <$w x $t0> undef, $t0 0x0, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(39): 1
jit_var_new(40): $r0_0 = insertelement <$w x $t0> undef, i32 $i, i32 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n$r0 = add <$w x $t0> $r0_1, $l0
jit_var_inc_ref_ext(40): 1
jit_var_inc_ref_int(40): 1
jit_var_new(41 <- 40): $r0 = uitofp <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(41): 1
jit_var_dec_ref_ext(40): 0
jit_var_new_literal(42): $r0_0 = insertelement <$w x $t0> undef, $t0 0x4020000000000000, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(42): 1
jit_var_inc_ref_int(41): 1
jit_var_inc_ref_int(42): 1
jit_var_new(43 <- 41, 42): $r0 = fcmp olt <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(43): 1
jit_var_dec_ref_ext(42): 0
jit_var_dec_ref_ext(41): 0
jit_malloc(type=host, size=128): <@> (new allocation)
jit_var_map_mem(44): <@>, size=15, free=1
jit_var_inc_ref_ext(44): 1
jit_var_copy_mem(44, size=15)
jit_var_new_literal(45): $r0_0 = insertelement <$w x $t0> undef, $t0 0x3ff0000000000000, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(45): 1
jit_malloc(type=host-async, size=128): <@> (reused local)
jit_memset_async(<@>, isize=4, size=16)
jit_var_inc_ref_ext(39): 2
jit_var_copy_ptr(46 <- 39): <@>
jit_var_inc_ref_ext(46): 1
jit_var_new(47): $r0_0 = insertelement <$w x $t0> undef, i32 $i, i32 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n$r0 = add <$w x $t0> $r0_1, $l0
jit_var_inc_ref_ext(47): 1
jit_var_new(48): $r0_0 = insertelement <$w x $t0> undef, i32 %end, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n
jit_var_inc_ref_ext(48): 1
jit_var_inc_ref_int(47): 1
jit_var_inc_ref_int(48): 1
jit_var_new(49 <- 47, 48): $r0 = icmp ult <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(49): 1
jit_var_inc_ref_int(43): 1
jit_var_inc_ref_int(49): 1
jit_var_new(50 <- 43, 49): $r0 = and <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(50): 1
jit_var_dec_ref_ext(49): 0
jit_var_dec_ref_ext(48): 0
jit_var_dec_ref_ext(47): 0
jit_var_inc_ref_int(46): 1
jit_var_inc_ref_int(45): 1
jit_var_inc_ref_int(44): 1
jit_var_inc_ref_int(50): 1
jit_var_new(51 <- 46, 45, 44, 50): $4call void @ek.masked_scatter_add_v$w$a2($t1 $r1, <$w x $t2> $r2, <$w x $t3> $r3, <$w x $t4> $r4)
jit_var_inc_ref_ext(51): 1
jit_var_mark_scatter(51, 39)
jit_var_dec_ref_ext(50): 0
jit_var_dec_ref_ext(46): 0
jit_var_dec_ref_ext(45): 0
jit_eval(): launching 1 kernel.
jit_assemble(size=15): register map:
   - %r0 -> 40
   - %f1 -> 41
   - %f2 -> 42 [scalar]
   - %p3 -> 43
   - %r4 -> 47 [scalar]
   - %r5 -> 48 [scalar]
   - %p6 -> 49 [scalar]
   - %p7 -> 50
   - %r8 -> 44 [in]
   - %f9 -> 45 [scalar]
   - %rd10 -> 46 [scalar] [direct_pointer]
   - %u11 -> 51 [scat]
  -> launching <@> (n=15, in=2, out=1, ops=12):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(64) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %rd10 = load i8*, i8** %a1_i, align 8, !alias.scope !1
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = insertelement <16 x i32> undef, i32 %index, i32 0
    %r0_1 = shufflevector <16 x i32> %r0_0, <16 x i32> undef, <16 x i32> zeroinitializer
    %r0 = add <16 x i32> %r0_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    ; Evaluate %f1
    %f1 = uitofp <16 x i32> %r0 to <16 x float>

    ; Evaluate %f2
    %f2_0 = insertelement <16 x float> undef, float 0x4020000000000000, i32 0
    %f2 = shufflevector <16 x float> %f2_0, <16 x float> undef, <16 x i32> zeroinitializer

    ; Evaluate %p3
    %p3 = fcmp olt <16 x float> %f1, %f2

    ; Evaluate %r4
    %r4_0 = insertelement <16 x i32> undef, i32 %index, i32 0
    %r4_1 = shufflevector <16 x i32> %r4_0, <16 x i32> undef, <16 x i32> zeroinitializer
    %r4 = add <16 x i32> %r4_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    ; Evaluate %r5
    %r5_0 = insertelement <16 x i32> undef, i32 %end, i32 0
    %r5 = shufflevector <16 x i32> %r5_0, <16 x i32> undef, <16 x i32> zeroinitializer
    

    ; Evaluate %p6
    %p6 = icmp ult <16 x i32> %r4, %r5

    ; Evaluate %p7
    %p7 = and <16 x i1> %p3, %p6

    ; Load %r8
    %r8_i = getelementptr inbounds i32, i32* %a0, i32 %index
    %r8_p = bitcast i32* %r8_i to <16 x i32>*
    %r8 = load <16 x i32>, <16 x i32>* %r8_p, align 64, !alias.scope !1

    ; Evaluate %f9
    %f9_0 = insertelement <16 x float> undef, float 0x3ff0000000000000, i32 0
    %f9 = shufflevector <16 x float> %f9_0, <16 x float> undef, <16 x i32> zeroinitializer
    call void @ek.masked_scatter_add_v16f32(i8* %rd10, <16 x float> %f9, <16 x i32> %r8, <16 x i1> %p7)

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 16
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake-avx512" "stack-probe-size"="1073741824" "target-features"="+avx512f,+avx512dq,+avx512vl,+avx512cd" }
jit_run(): scheduling 1 packet
jit_malloc(type=host-async, size=128): <@> (reused local)
jit_eval(): cleaning up..
jit_var_dec_ref_ext(51): 0
jit_var_free(51)
jit_var_dec_ref_int(46): 0
jit_var_free(46)
jit_var_dec_ref_ext(39): 1
jit_var_dec_ref_int(45): 0
jit_var_free(45)
jit_var_dec_ref_int(44): 0
jit_var_dec_ref_int(50): 0
jit_var_free(50)
jit_var_dec_ref_int(43): 0
jit_var_dec_ref_int(49): 0
jit_var_free(49)
jit_var_dec_ref_int(47): 0
jit_var_free(47)
jit_var_dec_ref_int(48): 0
jit_var_free(48)
jit_free_flush(): scheduling 1 deallocation
jit_eval(): done.
jit_free(<@>, type=host-async, size=128)
target=[2, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]
jit_var_dec_ref_ext(44): 0
jit_var_free(44)
jit_free(<@>, type=host-async, size=128)
jit_var_dec_ref_ext(43): 0
jit_var_free(43)
jit_var_dec_ref_int(41): 0
jit_var_free(41)
jit_var_dec_ref_int(40): 0
jit_var_free(40)
jit_var_dec_ref_int(42): 0
jit_var_free(42)
jit_var_dec_ref_ext(39): 0
jit_var_free(39)
jit_free(<@>, type=host-async, size=128)
jit_var_new_literal(52): $r0_0 = insertelement <$w x $t0> undef, $t0 0x0, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(52): 1
jit_var_new(53): $r0_0 = insertelement <$w x $t0> undef, i32 $i, i32 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n$r0 = add <$w x $t0> $r0_1, $l0
jit_var_inc_ref_ext(53): 1
jit_var_inc_ref_int(53): 1
jit_var_new(54 <- 53): $r0 = uitofp <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(54): 1
jit_var_dec_ref_ext(53): 0
jit_var_new_literal(55): $r0_0 = insertelement <$w x $t0> undef, $t0 0x4020000000000000, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(55): 1
jit_var_inc_ref_int(54): 1
jit_var_inc_ref_int(55): 1
jit_var_new(56 <- 54, 55): $r0 = fcmp olt <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(56): 1
jit_var_dec_ref_ext(55): 0
jit_var_dec_ref_ext(54): 0
jit_malloc(type=host, size=128): <@> (new allocation)
jit_var_map_mem(57): <@>, size=16, free=1
jit_var_inc_ref_ext(57): 1
jit_var_copy_mem(57, size=16)
jit_var_new_literal(58): $r0_0 = insertelement <$w x $t0> undef, $t0 0x3ff0000000000000, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(58): 1
jit_malloc(type=host-async, size=128): <@> (reused local)
jit_memset_async(<@>, isize=4, size=16)
jit_var_inc_ref_ext(52): 2
jit_var_copy_ptr(59 <- 52): <@>
jit_var_inc_ref_ext(59): 1
jit_var_new(60): $r0_0 = insertelement <$w x $t0> undef, i32 $i, i32 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n$r0 = add <$w x $t0> $r0_1, $l0
jit_var_inc_ref_ext(60): 1
jit_var_new(61): $r0_0 = insertelement <$w x $t0> undef, i32 %end, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n
jit_var_inc_ref_ext(61): 1
jit_var_inc_ref_int(60): 1
jit_var_inc_ref_int(61): 1
jit_var_new(62 <- 60, 61): $r0 = icmp ult <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(62): 1
jit_var_inc_ref_int(56): 1
jit_var_inc_ref_int(62): 1
jit_var_new(63 <- 56, 62): $r0 = and <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(63): 1
jit_var_dec_ref_ext(62): 0
jit_var_dec_ref_ext(61): 0
jit_var_dec_ref_ext(60): 0
jit_var_inc_ref_int(59): 1
jit_var_inc_ref_int(58): 1
jit_var_inc_ref_int(57): 1
jit_var_inc_ref_int(63): 1
jit_var_new(64 <- 59, 58, 57, 63): $4call void @ek.masked_scatter_add_v$w$a2($t1 $r1, <$w x $t2> $r2, <$w x $t3> $r3, <$w x $t4> $r4)
jit_var_inc_ref_ext(64): 1
jit_var_mark_scatter(64, 52)
jit_var_dec_ref_ext(63): 0
jit_var_dec_ref_ext(59): 0
jit_var_dec_ref_ext(58): 0
jit_eval(): launching 1 kernel.
jit_assemble(size=16): register map:
   - %r0 -> 53
   - %f1 -> 54
   - %f2 -> 55 [scalar]
   - %p3 -> 56
   - %r4 -> 60 [scalar]
   - %r5 -> 61 [scalar]
   - %p6 -> 62 [scalar]
   - %p7 -> 63
   - %r8 -> 57 [in]
   - %f9 -> 58 [scalar]
   - %rd10 -> 59 [scalar] [direct_pointer]
   - %u11 -> 64 [scat]
  -> launching <@> (n=16, in=2, out=1, ops=12):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(64) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %rd10 = load i8*, i8** %a1_i, align 8, !alias.scope !1
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = insertelement <16 x i32> undef, i32 %index, i32 0
    %r0_1 = shufflevector <16 x i32> %r0_0, <16 x i32> undef, <16 x i32> zeroinitializer
    %r0 = add <16 x i32> %r0_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    ; Evaluate %f1
    %f1 = uitofp <16 x i32> %r0 to <16 x float>

    ; Evaluate %f2
    %f2_0 = insertelement <16 x float> undef, float 0x4020000000000000, i32 0
    %f2 = shufflevector <16 x float> %f2_0, <16 x float> undef, <16 x i32> zeroinitializer

    ; Evaluate %p3
    %p3 = fcmp olt <16 x float> %f1, %f2

    ; Evaluate %r4
    %r4_0 = insertelement <16 x i32> undef, i32 %index, i32 0
    %r4_1 = shufflevector <16 x i32> %r4_0, <16 x i32> undef, <16 x i32> zeroinitializer
    %r4 = add <16 x i32> %r4_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    ; Evaluate %r5
    %r5_0 = insertelement <16 x i32> undef, i32 %end, i32 0
    %r5 = shufflevector <16 x i32> %r5_0, <16 x i32> undef, <16 x i32> zeroinitializer
    

    ; Evaluate %p6
    %p6 = icmp ult <16 x i32> %r4, %r5

    ; Evaluate %p7
    %p7 = and <16 x i1> %p3, %p6

    ; Load %r8
    %r8_i = getelementptr inbounds i32, i32* %a0, i32 %index
    %r8_p = bitcast i32* %r8_i to <16 x i32>*
    %r8 = load <16 x i32>, <16 x i32>* %r8_p, align 64, !alias.scope !1

    ; Evaluate %f9
    %f9_0 = insertelement <16 x float> undef, float 0x3ff0000000000000, i32 0
    %f9 = shufflevector <16 x float> %f9_0, <16 x float> undef, <16 x i32> zeroinitializer
    call void @ek.masked_scatter_add_v16f32(i8* %rd10, <16 x float> %f9, <16 x i32> %r8, <16 x i1> %p7)

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 16
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake-avx512" "stack-probe-size"="1073741824" "target-features"="+avx512f,+avx512dq,+avx512vl,+avx512cd" }
jit_run(): scheduling 1 packet
jit_malloc(type=host-async, size=128): <@> (reused local)
jit_eval(): cleaning up..
jit_var_dec_ref_ext(64): 0
jit_var_free(64)
jit_var_dec_ref_int(59): 0
jit_var_free(59)
jit_var_dec_ref_ext(52): 1
jit_var_dec_ref_int(58): 0
jit_var_free(58)
jit_var_dec_ref_int(57): 0
jit_var_dec_ref_int(63): 0
jit_var_free(63)
jit_var_dec_ref_int(56): 0
jit_var_dec_ref_int(62): 0
jit_var_free(62)
jit_var_dec_ref_int(60): 0
jit_var_free(60)
jit_var_dec_ref_int(61): 0
jit_var_free(61)
jit_free_flush(): scheduling 1 deallocation
jit_eval(): done.
jit_free(<@>, type=host-async, size=128)
target=[2, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]
jit_var_dec_ref_ext(57): 0
jit_var_free(57)
jit_free(<@>, type=host-async, size=128)
jit_var_dec_ref_ext(56): 0
jit_var_free(56)
jit_var_dec_ref_int(54): 0
jit_var_free(54)
jit_var_dec_ref_int(53): 0
jit_var_free(53)
jit_var_dec_ref_int(55): 0
jit_var_free(55)
jit_var_dec_ref_ext(52): 0
jit_var_free(52)
jit_free(<@>, type=host-async, size=128)
jit_var_new_literal(65): $r0_0 = insertelement <$w x $t0> undef, $t0 0x0, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(65): 1
jit_var_new(66): $r0_0 = insertelement <$w x $t0> undef, i32 $i, i32 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n$r0 = add <$w x $t0> $r0_1, $l0
jit_var_inc_ref_ext(66): 1
jit_var_inc_ref_int(66): 1
jit_var_new(67 <- 66): $r0 = uitofp <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(67): 1
jit_var_dec_ref_ext(66): 0
jit_var_new_literal(68): $r0_0 = insertelement <$w x $t0> undef, $t0 0x4020000000000000, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(68): 1
jit_var_inc_ref_int(67): 1
jit_var_inc_ref_int(68): 1
jit_var_new(69 <- 67, 68): $r0 = fcmp olt <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(69): 1
jit_var_dec_ref_ext(68): 0
jit_var_dec_ref_ext(67): 0
jit_malloc(type=host, size=128): <@> (new allocation)
jit_var_map_mem(70): <@>, size=15, free=1
jit_var_inc_ref_ext(70): 1
jit_var_copy_mem(70, size=15)
jit_var_new_literal(71): $r0_0 = insertelement <$w x $t0> undef, $t0 0x3ff0000000000000, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(71): 1
jit_var_inc_ref_int(70): 1
jit_var_new(72 <- 70): $r0 = zext <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(72): 1
jit_malloc(type=host-async, size=128): <@> (reused local)
jit_memset_async(<@>, isize=8, size=16)
jit_var_inc_ref_ext(65): 2
jit_var_copy_ptr(73 <- 65): <@>
jit_var_inc_ref_ext(73): 1
jit_var_new(74): $r0_0 = insertelement <$w x $t0> undef, i32 $i, i32 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n$r0 = add <$w x $t0> $r0_1, $l0
jit_var_inc_ref_ext(74): 1
jit_var_new(75): $r0_0 = insertelement <$w x $t0> undef, i32 %end, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n
jit_var_inc_ref_ext(75): 1
jit_var_inc_ref_int(74): 1
jit_var_inc_ref_int(75): 1
jit_var_new(76 <- 74, 75): $r0 = icmp ult <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(76): 1
jit_var_inc_ref_int(69): 1
jit_var_inc_ref_int(76): 1
jit_var_new(77 <- 69, 76): $r0 = and <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(77): 1
jit_var_dec_ref_ext(76): 0
jit_var_dec_ref_ext(75): 0
jit_var_dec_ref_ext(74): 0
jit_var_inc_ref_int(73): 1
jit_var_inc_ref_int(71): 1
jit_var_inc_ref_int(72): 1
jit_var_inc_ref_int(77): 1
jit_var_new(78 <- 73, 71, 72, 77): $3call void @ek.masked_scatter_add_v$w$a2($t1 $r1, <$w x $t2> $r2, <$w x $t3> $r3, <$w x $t4> $r4)
jit_var_inc_ref_ext(78): 1
jit_var_mark_scatter(78, 65)
jit_var_dec_ref_ext(77): 0
jit_var_dec_ref_ext(73): 0
jit_var_dec_ref_ext(72): 0
jit_var_dec_ref_ext(71): 0
jit_eval(): launching 1 kernel.
jit_assemble(size=15): register map:
   - %r0 -> 66
   - %d1 -> 67
   - %d2 -> 68 [scalar]
   - %p3 -> 69
   - %r4 -> 74 [scalar]
   - %r5 -> 75 [scalar]
   - %p6 -> 76 [scalar]
   - %p7 -> 77
   - %r8 -> 70 [in]
   - %rd9 -> 72
   - %d10 -> 71 [scalar]
   - %rd11 -> 73 [scalar] [direct_pointer]
   - %u12 -> 78 [scat]
  -> launching <@> (n=15, in=2, out=1, ops=13):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(64) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %rd11 = load i8*, i8** %a1_i, align 8, !alias.scope !1
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = insertelement <16 x i32> undef, i32 %index, i32 0
    %r0_1 = shufflevector <16 x i32> %r0_0, <16 x i32> undef, <16 x i32> zeroinitializer
    %r0 = add <16 x i32> %r0_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    ; Evaluate %d1
    %d1 = uitofp <16 x i32> %r0 to <16 x double>

    ; Evaluate %d2
    %d2_0 = insertelement <16 x double> undef, double 0x4020000000000000, i32 0
    %d2 = shufflevector <16 x double> %d2_0, <16 x double> undef, <16 x i32> zeroinitializer

    ; Evaluate %p3
    %p3 = fcmp olt <16 x double> %d1, %d2

    ; Evaluate %r4
    %r4_0 = insertelement <16 x i32> undef, i32 %index, i32 0
    %r4_1 = shufflevector <16 x i32> %r4_0, <16 x i32> undef, <16 x i32> zeroinitializer
    %r4 = add <16 x i32> %r4_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    ; Evaluate %r5
    %r5_0 = insertelement <16 x i32> undef, i32 %end, i32 0
    %r5 = shufflevector <16 x i32> %r5_0, <16 x i32> undef, <16 x i32> zeroinitializer
    

    ; Evaluate %p6
    %p6 = icmp ult <16 x i32> %r4, %r5

    ; Evaluate %p7
    %p7 = and <16 x i1> %p3, %p6

    ; Load %r8
    %r8_i = getelementptr inbounds i32, i32* %a0, i32 %index
    %r8_p = bitcast i32* %r8_i to <16 x i32>*
    %r8 = load <16 x i32>, <16 x i32>* %r8_p, align 64, !alias.scope !1

    ; Evaluate %rd9
    %rd9 = zext <16 x i32> %r8 to <16 x i64>

    ; Evaluate %d10
    %d10_0 = insertelement <16 x double> undef, double 0x3ff0000000000000, i32 0
    %d10 = shufflevector <16 x double> %d10_0, <16 x double> undef, <16 x i32> zeroinitializer
    %d10_unroll_u12_0_0 = shufflevector <16 x double> %d10, <16 x double> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
    %d10_unroll_u12_0_1 = shufflevector <16 x double> %d10, <16 x double> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    %rd9_unroll_u12_0_0 = shufflevector <16 x i64> %rd9, <16 x i64> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
    %rd9_unroll_u12_0_1 = shufflevector <16 x i64> %rd9, <16 x i64> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    %p7_unroll_u12_0_0 = shufflevector <16 x i1> %p7, <16 x i1> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
    %p7_unroll_u12_0_1 = shufflevector <16 x i1> %p7, <16 x i1> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    call void @ek.masked_scatter_add_v8f64(i8* %rd11, <8 x double> %d10_unroll_u12_0_0, <8 x i64> %rd9_unroll_u12_0_0, <8 x i1> %p7_unroll_u12_0_0)
    call void @ek.masked_scatter_add_v8f64(i8* %rd11, <8 x double> %d10_unroll_u12_0_1, <8 x i64> %rd9_unroll_u12_0_1, <8 x i1> %p7_unroll_u12_0_1)


    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 16
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake-avx512" "stack-probe-size"="1073741824" "target-features"="+avx512f,+avx512dq,+avx512vl,+avx512cd" }
jit_run(): scheduling 1 packet
jit_malloc(type=host-async, size=128): <@> (reused local)
jit_eval(): cleaning up..
jit_var_dec_ref_ext(78): 0
jit_var_free(78)
jit_var_dec_ref_int(73): 0
jit_var_free(73)
jit_var_dec_ref_ext(65): 1
jit_var_dec_ref_int(71): 0
jit_var_free(71)
jit_var_dec_ref_int(72): 0
jit_var_free(72)
jit_var_dec_ref_int(70): 0
jit_var_dec_ref_int(77): 0
jit_var_free(77)
jit_var_dec_ref_int(69): 0
jit_var_dec_ref_int(76): 0
jit_var_free(76)
jit_var_dec_ref_int(74): 0
jit_var_free(74)
jit_var_dec_ref_int(75): 0
jit_var_free(75)
jit_free_flush(): scheduling 1 deallocation
jit_eval(): done.
jit_free(<@>, type=host-async, size=128)
target=[2, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]
jit_var_dec_ref_ext(70): 0
jit_var_free(70)
jit_free(<@>, type=host-async, size=128)
jit_var_dec_ref_ext(69): 0
jit_var_free(69)
jit_var_dec_ref_int(67): 0
jit_var_free(67)
jit_var_dec_ref_int(66): 0
jit_var_free(66)
jit_var_dec_ref_int(68): 0
jit_var_free(68)
jit_var_dec_ref_ext(65): 0
jit_var_free(65)
jit_free(<@>, type=host-async, size=128)
jit_var_new_literal(79): $r0_0 = insertelement <$w x $t0> undef, $t0 0x0, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(79): 1
jit_malloc(type=host, size=128): <@> (new allocation)
jit_var_map_mem(80): <@>, size=16, free=1
jit_var_inc_ref_ext(80): 1
jit_var_copy_mem(80, size=16)
jit_var_new(81): $r0_0 = insertelement <$w x $t0> undef, i32 $i, i32 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n$r0 = add <$w x $t0> $r0_1, $l0
jit_var_inc_ref_ext(81): 1
jit_var_inc_ref_int(81): 1
jit_var_new(82 <- 81): $r0 = uitofp <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(82): 1
jit_var_dec_ref_ext(81): 0
jit_var_new_literal(83): $r0_0 = insertelement <$w x $t0> undef, $t0 0x4020000000000000, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(83): 1
jit_var_inc_ref_int(82): 1
jit_var_inc_ref_int(83): 1
jit_var_new(84 <- 82, 83): $r0 = fcmp olt <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(84): 1
jit_var_dec_ref_ext(83): 0
jit_var_dec_ref_ext(82): 0
jit_var_new_literal(85): $r0_0 = insertelement <$w x $t0> undef, $t0 0x3ff0000000000000, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(85): 1
jit_var_inc_ref_int(80): 1
jit_var_new(86 <- 80): $r0 = zext <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(86): 1
jit_malloc(type=host-async, size=128): <@> (reused local)
jit_memset_async(<@>, isize=8, size=16)
jit_var_inc_ref_ext(79): 2
jit_var_copy_ptr(87 <- 79): <@>
jit_var_inc_ref_ext(87): 1
jit_var_new(88): $r0_0 = insertelement <$w x $t0> undef, i32 $i, i32 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n$r0 = add <$w x $t0> $r0_1, $l0
jit_var_inc_ref_ext(88): 1
jit_var_new(89): $r0_0 = insertelement <$w x $t0> undef, i32 %end, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n
jit_var_inc_ref_ext(89): 1
jit_var_inc_ref_int(88): 1
jit_var_inc_ref_int(89): 1
jit_var_new(90 <- 88, 89): $r0 = icmp ult <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(90): 1
jit_var_inc_ref_int(84): 1
jit_var_inc_ref_int(90): 1
jit_var_new(91 <- 84, 90): $r0 = and <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(91): 1
jit_var_dec_ref_ext(90): 0
jit_var_dec_ref_ext(89): 0
jit_var_dec_ref_ext(88): 0
jit_var_inc_ref_int(87): 1
jit_var_inc_ref_int(85): 1
jit_var_inc_ref_int(86): 1
jit_var_inc_ref_int(91): 1
jit_var_new(92 <- 87, 85, 86, 91): $3call void @ek.masked_scatter_add_v$w$a2($t1 $r1, <$w x $t2> $r2, <$w x $t3> $r3, <$w x $t4> $r4)
jit_var_inc_ref_ext(92): 1
jit_var_mark_scatter(92, 79)
jit_var_dec_ref_ext(91): 0
jit_var_dec_ref_ext(87): 0
jit_var_dec_ref_ext(86): 0
jit_var_dec_ref_ext(85): 0
jit_eval(): launching 1 kernel.
jit_assemble(size=16): register map:
   - %r0 -> 81
   - %d1 -> 82
   - %d2 -> 83 [scalar]
   - %p3 -> 84
   - %r4 -> 88 [scalar]
   - %r5 -> 89 [scalar]
   - %p6 -> 90 [scalar]
   - %p7 -> 91
   - %r8 -> 80 [in]
   - %rd9 -> 86
   - %d10 -> 85 [scalar]
   - %rd11 -> 87 [scalar] [direct_pointer]
   - %u12 -> 92 [scat]
  -> launching <@> (n=16, in=2, out=1, ops=13):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(64) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %rd11 = load i8*, i8** %a1_i, align 8, !alias.scope !1
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = insertelement <16 x i32> undef, i32 %index, i32 0
    %r0_1 = shufflevector <16 x i32> %r0_0, <16 x i32> undef, <16 x i32> zeroinitializer
    %r0 = add <16 x i32> %r0_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    ; Evaluate %d1
    %d1 = uitofp <16 x i32> %r0 to <16 x double>

    ; Evaluate %d2
    %d2_0 = insertelement <16 x double> undef, double 0x4020000000000000, i32 0
    %d2 = shufflevector <16 x double> %d2_0, <16 x double> undef, <16 x i32> zeroinitializer

    ; Evaluate %p3
    %p3 = fcmp olt <16 x double> %d1, %d2

    ; Evaluate %r4
    %r4_0 = insertelement <16 x i32> undef, i32 %index, i32 0
    %r4_1 = shufflevector <16 x i32> %r4_0, <16 x i32> undef, <16 x i32> zeroinitializer
    %r4 = add <16 x i32> %r4_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    ; Evaluate %r5
    %r5_0 = insertelement <16 x i32> undef, i32 %end, i32 0
    %r5 = shufflevector <16 x i32> %r5_0, <16 x i32> undef, <16 x i32> zeroinitializer
    

    ; Evaluate %p6
    %p6 = icmp ult <16 x i32> %r4, %r5

    ; Evaluate %p7
    %p7 = and <16 x i1> %p3, %p6

    ; Load %r8
    %r8_i = getelementptr inbounds i32, i32* %a0, i32 %index
    %r8_p = bitcast i32* %r8_i to <16 x i32>*
    %r8 = load <16 x i32>, <16 x i32>* %r8_p, align 64, !alias.scope !1

    ; Evaluate %rd9
    %rd9 = zext <16 x i32> %r8 to <16 x i64>

    ; Evaluate %d10
    %d10_0 = insertelement <16 x double> undef, double 0x3ff0000000000000, i32 0
    %d10 = shufflevector <16 x double> %d10_0, <16 x double> undef, <16 x i32> zeroinitializer
    %d10_unroll_u12_0_0 = shufflevector <16 x double> %d10, <16 x double> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
    %d10_unroll_u12_0_1 = shufflevector <16 x double> %d10, <16 x double> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    %rd9_unroll_u12_0_0 = shufflevector <16 x i64> %rd9, <16 x i64> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
    %rd9_unroll_u12_0_1 = shufflevector <16 x i64> %rd9, <16 x i64> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    %p7_unroll_u12_0_0 = shufflevector <16 x i1> %p7, <16 x i1> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
    %p7_unroll_u12_0_1 = shufflevector <16 x i1> %p7, <16 x i1> undef, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>

    call void @ek.masked_scatter_add_v8f64(i8* %rd11, <8 x double> %d10_unroll_u12_0_0, <8 x i64> %rd9_unroll_u12_0_0, <8 x i1> %p7_unroll_u12_0_0)
    call void @ek.masked_scatter_add_v8f64(i8* %rd11, <8 x double> %d10_unroll_u12_0_1, <8 x i64> %rd9_unroll_u12_0_1, <8 x i1> %p7_unroll_u12_0_1)


    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 16
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake-avx512" "stack-probe-size"="1073741824" "target-features"="+avx512f,+avx512dq,+avx512vl,+avx512cd" }
jit_run(): scheduling 1 packet
jit_malloc(type=host-async, size=128): <@> (reused local)
jit_eval(): cleaning up..
jit_var_dec_ref_ext(92): 0
jit_var_free(92)
jit_var_dec_ref_int(87): 0
jit_var_free(87)
jit_var_dec_ref_ext(79): 1
jit_var_dec_ref_int(85): 0
jit_var_free(85)
jit_var_dec_ref_int(86): 0
jit_var_free(86)
jit_var_dec_ref_int(80): 0
jit_var_dec_ref_int(91): 0
jit_var_free(91)
jit_var_dec_ref_int(84): 0
jit_var_dec_ref_int(90): 0
jit_var_free(90)
jit_var_dec_ref_int(88): 0
jit_var_free(88)
jit_var_dec_ref_int(89): 0
jit_var_free(89)
jit_free_flush(): scheduling 1 deallocation
jit_eval(): done.
jit_free(<@>, type=host-async, size=128)
target=[2, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]
jit_var_dec_ref_ext(84): 0
jit_var_free(84)
jit_var_dec_ref_int(82): 0
jit_var_free(82)
jit_var_dec_ref_int(81): 0
jit_var_free(81)
jit_var_dec_ref_int(83): 0
jit_var_free(83)
jit_var_dec_ref_ext(80): 0
jit_var_free(80)
jit_free(<@>, type=host-async, size=128)
jit_var_dec_ref_ext(79): 0
jit_var_free(79)
jit_free(<@>, type=host-async, size=128)
jit_shutdown(): releasing 1 stream ..
jit_free_flush(): scheduling 3 deallocations
jit_shutdown(): releasing 4 kernels ..
jit_malloc_trim(): freed
 - host-async memory: 1.25 KiB in 10 allocations
jit_shutdown(): done
