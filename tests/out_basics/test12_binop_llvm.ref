jit_malloc(type=host, size=64): <@> (new allocation)
jit_var_map(1): <@>, size=2, free=1
jit_var_inc_ref_ext(1): 1
jit_var_copy(1, size=2)
jit_malloc(type=host, size=64): <@> (new allocation)
jit_var_map(2): <@>, size=2, free=1
jit_var_inc_ref_ext(2): 1
jit_var_copy(2, size=2)
jit_malloc(type=host, size=64): <@> (new allocation)
jit_var_map(3): <@>, size=2, free=1
jit_var_inc_ref_ext(3): 1
jit_var_copy(3, size=2)
jit_var_inc_ref_int(1): 1
jit_trace_append(4 <- 1): $r0 = xor <$w x $t1> $r1, $o0
jit_var_inc_ref_ext(4): 1
jit_var_dec_ref_ext(1): 0
jit_var_inc_ref_int(2): 1
jit_trace_append(5 <- 2): $r0_0 = bitcast <$w x $t1> $r1 to <$w x $b0>$n$r0_1 = xor <$w x $b0> $r0_0, $o0$n$r0 = bitcast <$w x $b0> $r0_1 to <$w x $t0>
jit_var_inc_ref_ext(5): 1
jit_var_dec_ref_ext(2): 0
jit_var_inc_ref_int(3): 1
jit_trace_append(6 <- 3): $r0 = xor <$w x $t1> $r1, $o0
jit_var_inc_ref_ext(6): 1
jit_var_dec_ref_ext(3): 0
jit_eval(): begin.
jit_assemble(size=2): register map:
   - %r0 -> 1 [in]
   - %r1 -> 4 [out]
jit_malloc(type=host, size=64): <@> (new allocation)
   - %f2 -> 2 [in]
   - %f3 -> 5 [out]
jit_malloc(type=host, size=64): <@> (new allocation)
   - %p4 -> 3 [in]
   - %p5 -> 6 [out]
jit_malloc(type=host, size=64): <@> (new allocation)
jit_run(): launching kernel (n=2, in=3, out=3, ops=6) ..
define void @enoki_04371bde(i64 %start, i64 %end, i8** %ptrs) norecurse nosync nounwind alignstack(32) "target-cpu"="haswell" {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %a2_p = load i8*, i8** %a2_i, align 8, !alias.scope !1
    %a2 = bitcast i8* %a2_p to float*

    ; Prepare argument 3
    %a3_i = getelementptr inbounds i8*, i8** %ptrs, i32 3
    %a3_p = load i8*, i8** %a3_i, align 8, !alias.scope !1
    %a3 = bitcast i8* %a3_p to float*

    ; Prepare argument 4
    %a4_i = getelementptr inbounds i8*, i8** %ptrs, i32 4
    %a4_p = load i8*, i8** %a4_i, align 8, !alias.scope !1
    %a4 = bitcast i8* %a4_p to i8*

    ; Prepare argument 5
    %a5_i = getelementptr inbounds i8*, i8** %ptrs, i32 5
    %a5_p = load i8*, i8** %a5_i, align 8, !alias.scope !1
    %a5 = bitcast i8* %a5_p to i8*
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Load %r0
    %r0_i = getelementptr inbounds i32, i32* %a0, i64 %index
    %r0_p = bitcast i32* %r0_i to <8 x i32>*
    %r0 = load <8 x i32>, <8 x i32>* %r0_p, align 32, !alias.scope !1

    ; Evaluate %r1
    %r1 = xor <8 x i32> %r0, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>

    ; Store %r1
    %r1_i = getelementptr inbounds i32, i32* %a1, i64 %index
    %r1_p = bitcast i32* %r1_i to <8 x i32>*
    store <8 x i32> %r1, <8 x i32>* %r1_p, align 32, !noalias !1

    ; Load %f2
    %f2_i = getelementptr inbounds float, float* %a2, i64 %index
    %f2_p = bitcast float* %f2_i to <8 x float>*
    %f2 = load <8 x float>, <8 x float>* %f2_p, align 32, !alias.scope !1

    ; Evaluate %f3
    %f3_0 = bitcast <8 x float> %f2 to <8 x i32>
    %f3_1 = xor <8 x i32> %f3_0, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
    %f3 = bitcast <8 x i32> %f3_1 to <8 x float>

    ; Store %f3
    %f3_i = getelementptr inbounds float, float* %a3, i64 %index
    %f3_p = bitcast float* %f3_i to <8 x float>*
    store <8 x float> %f3, <8 x float>* %f3_p, align 32, !noalias !1

    ; Load %p4
    %p4_i = getelementptr inbounds i8, i8* %a4, i64 %index
    %p4_p = bitcast i8* %p4_i to <8 x i8>*
    %p4_z = load <8 x i8>, <8 x i8>* %p4_p, align 8, !alias.scope !1
    %p4 = trunc <8 x i8> %p4_z to <8 x i1>

    ; Evaluate %p5
    %p5 = xor <8 x i1> %p4, <i1 -1, i1 -1, i1 -1, i1 -1, i1 -1, i1 -1, i1 -1, i1 -1>

    ; Store %p5
    %p5_i = getelementptr inbounds i8, i8* %a5, i64 %index
    %p5_p = bitcast i8* %p5_i to <8 x i8>*
    %p5_e = zext <8 x i1> %p5 to <8 x i8>
    store <8 x i8> %p5_e, <8 x i8>* %p5_p, align 8, !noalias !1

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}
}

!0 = !{!0}
!1 = !{!1, !0}

jit_eval(): cleaning up..
jit_var_dec_ref_int(1): 0
jit_var_free(1)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_int(2): 0
jit_var_free(2)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_int(3): 0
jit_var_free(3)
jit_free(<@>, type=host, size=64)
jit_eval(): done.
XOR: value_1=[4294967294, 4294966061]
XOR: value_2=[-4, -0.00350571]
XOR: value_3=[0, 1]
jit_var_inc_ref_int(4): 1
jit_trace_append(7 <- 4): $r0 = xor <$w x $t1> $r1, $o0
jit_var_inc_ref_ext(7): 1
jit_var_dec_ref_ext(4): 0
jit_var_inc_ref_int(5): 1
jit_trace_append(8 <- 5): $r0_0 = bitcast <$w x $t1> $r1 to <$w x $b0>$n$r0_1 = xor <$w x $b0> $r0_0, $o0$n$r0 = bitcast <$w x $b0> $r0_1 to <$w x $t0>
jit_var_inc_ref_ext(8): 1
jit_var_dec_ref_ext(5): 0
jit_var_inc_ref_int(6): 1
jit_trace_append(9 <- 6): $r0 = xor <$w x $t1> $r1, $o0
jit_var_inc_ref_ext(9): 1
jit_var_dec_ref_ext(6): 0
jit_eval(): begin.
jit_assemble(size=2): register map:
   - %r0 -> 4 [in]
   - %r1 -> 7 [out]
jit_malloc(type=host, size=64): <@> (reused global)
   - %f2 -> 5 [in]
   - %f3 -> 8 [out]
jit_malloc(type=host, size=64): <@> (reused global)
   - %p4 -> 6 [in]
   - %p5 -> 9 [out]
jit_malloc(type=host, size=64): <@> (reused global)
jit_run(): launching kernel (n=2, in=3, out=3, ops=6) ..
define void @enoki_04371bde(i64 %start, i64 %end, i8** %ptrs) norecurse nosync nounwind alignstack(32) "target-cpu"="haswell" {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %a2_p = load i8*, i8** %a2_i, align 8, !alias.scope !1
    %a2 = bitcast i8* %a2_p to float*

    ; Prepare argument 3
    %a3_i = getelementptr inbounds i8*, i8** %ptrs, i32 3
    %a3_p = load i8*, i8** %a3_i, align 8, !alias.scope !1
    %a3 = bitcast i8* %a3_p to float*

    ; Prepare argument 4
    %a4_i = getelementptr inbounds i8*, i8** %ptrs, i32 4
    %a4_p = load i8*, i8** %a4_i, align 8, !alias.scope !1
    %a4 = bitcast i8* %a4_p to i8*

    ; Prepare argument 5
    %a5_i = getelementptr inbounds i8*, i8** %ptrs, i32 5
    %a5_p = load i8*, i8** %a5_i, align 8, !alias.scope !1
    %a5 = bitcast i8* %a5_p to i8*
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Load %r0
    %r0_i = getelementptr inbounds i32, i32* %a0, i64 %index
    %r0_p = bitcast i32* %r0_i to <8 x i32>*
    %r0 = load <8 x i32>, <8 x i32>* %r0_p, align 32, !alias.scope !1

    ; Evaluate %r1
    %r1 = xor <8 x i32> %r0, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>

    ; Store %r1
    %r1_i = getelementptr inbounds i32, i32* %a1, i64 %index
    %r1_p = bitcast i32* %r1_i to <8 x i32>*
    store <8 x i32> %r1, <8 x i32>* %r1_p, align 32, !noalias !1

    ; Load %f2
    %f2_i = getelementptr inbounds float, float* %a2, i64 %index
    %f2_p = bitcast float* %f2_i to <8 x float>*
    %f2 = load <8 x float>, <8 x float>* %f2_p, align 32, !alias.scope !1

    ; Evaluate %f3
    %f3_0 = bitcast <8 x float> %f2 to <8 x i32>
    %f3_1 = xor <8 x i32> %f3_0, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
    %f3 = bitcast <8 x i32> %f3_1 to <8 x float>

    ; Store %f3
    %f3_i = getelementptr inbounds float, float* %a3, i64 %index
    %f3_p = bitcast float* %f3_i to <8 x float>*
    store <8 x float> %f3, <8 x float>* %f3_p, align 32, !noalias !1

    ; Load %p4
    %p4_i = getelementptr inbounds i8, i8* %a4, i64 %index
    %p4_p = bitcast i8* %p4_i to <8 x i8>*
    %p4_z = load <8 x i8>, <8 x i8>* %p4_p, align 8, !alias.scope !1
    %p4 = trunc <8 x i8> %p4_z to <8 x i1>

    ; Evaluate %p5
    %p5 = xor <8 x i1> %p4, <i1 -1, i1 -1, i1 -1, i1 -1, i1 -1, i1 -1, i1 -1, i1 -1>

    ; Store %p5
    %p5_i = getelementptr inbounds i8, i8* %a5, i64 %index
    %p5_p = bitcast i8* %p5_i to <8 x i8>*
    %p5_e = zext <8 x i1> %p5 to <8 x i8>
    store <8 x i8> %p5_e, <8 x i8>* %p5_p, align 8, !noalias !1

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}
}

!0 = !{!0}
!1 = !{!1, !0}

jit_eval(): cleaning up..
jit_var_dec_ref_int(4): 0
jit_var_free(4)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_int(5): 0
jit_var_free(5)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_int(6): 0
jit_var_free(6)
jit_free(<@>, type=host, size=64)
jit_eval(): done.
XOR2: value_1=[1, 1234]
XOR2: value_2=[1, 1234]
XOR2: value_3=[1, 0]
jit_malloc(type=host, size=64): <@> (reused global)
jit_var_map(10): <@>, size=2, free=1
jit_var_inc_ref_ext(10): 1
jit_var_copy(10, size=2)
jit_malloc(type=host, size=64): <@> (reused global)
jit_var_map(11): <@>, size=2, free=1
jit_var_inc_ref_ext(11): 1
jit_var_copy(11, size=2)
jit_malloc(type=host, size=64): <@> (reused global)
jit_var_map(12): <@>, size=2, free=1
jit_var_inc_ref_ext(12): 1
jit_var_copy(12, size=2)
jit_var_inc_ref_int(7): 1
jit_var_inc_ref_int(10): 1
jit_trace_append(13 <- 7, 10): $r0 = or <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(13): 1
jit_var_inc_ref_int(8): 1
jit_var_inc_ref_int(11): 1
jit_trace_append(14 <- 8, 11): $r0_0 = bitcast <$w x $t1> $r1 to <$w x $b0>$n$r0_1 = bitcast <$w x $t2> $r2 to <$w x $b0>$n$r0_2 = or <$w x $b0> $r0_0, $r0_1$r0 = bitcast <$w x $b0> $r0_2 to <$w x $t0>
jit_var_inc_ref_ext(14): 1
jit_var_inc_ref_int(9): 1
jit_var_inc_ref_int(12): 1
jit_trace_append(15 <- 9, 12): $r0 = or <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(15): 1
jit_eval(): begin.
jit_assemble(size=2): register map:
   - %r0 -> 7 [in]
   - %r1 -> 10 [in]
   - %r2 -> 13 [out]
jit_malloc(type=host, size=64): <@> (new allocation)
   - %f3 -> 8 [in]
   - %f4 -> 11 [in]
   - %f5 -> 14 [out]
jit_malloc(type=host, size=64): <@> (new allocation)
   - %p6 -> 9 [in]
   - %p7 -> 12 [in]
   - %p8 -> 15 [out]
jit_malloc(type=host, size=64): <@> (new allocation)
jit_run(): launching kernel (n=2, in=6, out=3, ops=9) ..
define void @enoki_7f5f64b7(i64 %start, i64 %end, i8** %ptrs) norecurse nosync nounwind alignstack(32) "target-cpu"="haswell" {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %a2_p = load i8*, i8** %a2_i, align 8, !alias.scope !1
    %a2 = bitcast i8* %a2_p to i32*

    ; Prepare argument 3
    %a3_i = getelementptr inbounds i8*, i8** %ptrs, i32 3
    %a3_p = load i8*, i8** %a3_i, align 8, !alias.scope !1
    %a3 = bitcast i8* %a3_p to float*

    ; Prepare argument 4
    %a4_i = getelementptr inbounds i8*, i8** %ptrs, i32 4
    %a4_p = load i8*, i8** %a4_i, align 8, !alias.scope !1
    %a4 = bitcast i8* %a4_p to float*

    ; Prepare argument 5
    %a5_i = getelementptr inbounds i8*, i8** %ptrs, i32 5
    %a5_p = load i8*, i8** %a5_i, align 8, !alias.scope !1
    %a5 = bitcast i8* %a5_p to float*

    ; Prepare argument 6
    %a6_i = getelementptr inbounds i8*, i8** %ptrs, i32 6
    %a6_p = load i8*, i8** %a6_i, align 8, !alias.scope !1
    %a6 = bitcast i8* %a6_p to i8*

    ; Prepare argument 7
    %a7_i = getelementptr inbounds i8*, i8** %ptrs, i32 7
    %a7_p = load i8*, i8** %a7_i, align 8, !alias.scope !1
    %a7 = bitcast i8* %a7_p to i8*

    ; Prepare argument 8
    %a8_i = getelementptr inbounds i8*, i8** %ptrs, i32 8
    %a8_p = load i8*, i8** %a8_i, align 8, !alias.scope !1
    %a8 = bitcast i8* %a8_p to i8*
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Load %r0
    %r0_i = getelementptr inbounds i32, i32* %a0, i64 %index
    %r0_p = bitcast i32* %r0_i to <8 x i32>*
    %r0 = load <8 x i32>, <8 x i32>* %r0_p, align 32, !alias.scope !1

    ; Load %r1
    %r1_i = getelementptr inbounds i32, i32* %a1, i64 %index
    %r1_p = bitcast i32* %r1_i to <8 x i32>*
    %r1 = load <8 x i32>, <8 x i32>* %r1_p, align 32, !alias.scope !1

    ; Evaluate %r2
    %r2 = or <8 x i32> %r0, %r1

    ; Store %r2
    %r2_i = getelementptr inbounds i32, i32* %a2, i64 %index
    %r2_p = bitcast i32* %r2_i to <8 x i32>*
    store <8 x i32> %r2, <8 x i32>* %r2_p, align 32, !noalias !1

    ; Load %f3
    %f3_i = getelementptr inbounds float, float* %a3, i64 %index
    %f3_p = bitcast float* %f3_i to <8 x float>*
    %f3 = load <8 x float>, <8 x float>* %f3_p, align 32, !alias.scope !1

    ; Load %f4
    %f4_i = getelementptr inbounds float, float* %a4, i64 %index
    %f4_p = bitcast float* %f4_i to <8 x float>*
    %f4 = load <8 x float>, <8 x float>* %f4_p, align 32, !alias.scope !1

    ; Evaluate %f5
    %f5_0 = bitcast <8 x float> %f3 to <8 x i32>
    %f5_1 = bitcast <8 x float> %f4 to <8 x i32>
    %f5_2 = or <8 x i32> %f5_0, %f5_1%f5 = bitcast <8 x i32> %f5_2 to <8 x float>

    ; Store %f5
    %f5_i = getelementptr inbounds float, float* %a5, i64 %index
    %f5_p = bitcast float* %f5_i to <8 x float>*
    store <8 x float> %f5, <8 x float>* %f5_p, align 32, !noalias !1

    ; Load %p6
    %p6_i = getelementptr inbounds i8, i8* %a6, i64 %index
    %p6_p = bitcast i8* %p6_i to <8 x i8>*
    %p6_z = load <8 x i8>, <8 x i8>* %p6_p, align 8, !alias.scope !1
    %p6 = trunc <8 x i8> %p6_z to <8 x i1>

    ; Load %p7
    %p7_i = getelementptr inbounds i8, i8* %a7, i64 %index
    %p7_p = bitcast i8* %p7_i to <8 x i8>*
    %p7_z = load <8 x i8>, <8 x i8>* %p7_p, align 8, !alias.scope !1
    %p7 = trunc <8 x i8> %p7_z to <8 x i1>

    ; Evaluate %p8
    %p8 = or <8 x i1> %p6, %p7

    ; Store %p8
    %p8_i = getelementptr inbounds i8, i8* %a8, i64 %index
    %p8_p = bitcast i8* %p8_i to <8 x i8>*
    %p8_e = zext <8 x i1> %p8 to <8 x i8>
    store <8 x i8> %p8_e, <8 x i8>* %p8_p, align 8, !noalias !1

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}
}

!0 = !{!0}
!1 = !{!1, !0}

jit_eval(): cleaning up..
jit_var_dec_ref_int(7): 0
jit_var_dec_ref_int(10): 0
jit_var_dec_ref_int(8): 0
jit_var_dec_ref_int(11): 0
jit_var_dec_ref_int(9): 0
jit_var_dec_ref_int(12): 0
jit_eval(): done.
OR: value_1=[1, 4294967295]
OR: value_2=[1, -nan]
OR: value_3=[1, 1]
jit_var_inc_ref_int(7): 1
jit_var_inc_ref_int(10): 1
jit_trace_append(16 <- 7, 10): $r0 = and <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(16): 1
jit_var_inc_ref_int(8): 1
jit_var_inc_ref_int(11): 1
jit_trace_append(17 <- 8, 11): $r0_0 = bitcast <$w x $t1> $r1 to <$w x $b0>$n$r0_1 = bitcast <$w x $t2> $r2 to <$w x $b0>$n$r0_2 = and <$w x $b0> $r0_0, $r0_1$r0 = bitcast <$w x $b0> $r0_2 to <$w x $t0>
jit_var_inc_ref_ext(17): 1
jit_var_inc_ref_int(9): 1
jit_var_inc_ref_int(12): 1
jit_trace_append(18 <- 9, 12): $r0 = and <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(18): 1
jit_eval(): begin.
jit_assemble(size=2): register map:
   - %r0 -> 7 [in]
   - %r1 -> 10 [in]
   - %r2 -> 16 [out]
jit_malloc(type=host, size=64): <@> (new allocation)
   - %f3 -> 8 [in]
   - %f4 -> 11 [in]
   - %f5 -> 17 [out]
jit_malloc(type=host, size=64): <@> (new allocation)
   - %p6 -> 9 [in]
   - %p7 -> 12 [in]
   - %p8 -> 18 [out]
jit_malloc(type=host, size=64): <@> (new allocation)
jit_run(): launching kernel (n=2, in=6, out=3, ops=9) ..
define void @enoki_8290587d(i64 %start, i64 %end, i8** %ptrs) norecurse nosync nounwind alignstack(32) "target-cpu"="haswell" {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %a2_p = load i8*, i8** %a2_i, align 8, !alias.scope !1
    %a2 = bitcast i8* %a2_p to i32*

    ; Prepare argument 3
    %a3_i = getelementptr inbounds i8*, i8** %ptrs, i32 3
    %a3_p = load i8*, i8** %a3_i, align 8, !alias.scope !1
    %a3 = bitcast i8* %a3_p to float*

    ; Prepare argument 4
    %a4_i = getelementptr inbounds i8*, i8** %ptrs, i32 4
    %a4_p = load i8*, i8** %a4_i, align 8, !alias.scope !1
    %a4 = bitcast i8* %a4_p to float*

    ; Prepare argument 5
    %a5_i = getelementptr inbounds i8*, i8** %ptrs, i32 5
    %a5_p = load i8*, i8** %a5_i, align 8, !alias.scope !1
    %a5 = bitcast i8* %a5_p to float*

    ; Prepare argument 6
    %a6_i = getelementptr inbounds i8*, i8** %ptrs, i32 6
    %a6_p = load i8*, i8** %a6_i, align 8, !alias.scope !1
    %a6 = bitcast i8* %a6_p to i8*

    ; Prepare argument 7
    %a7_i = getelementptr inbounds i8*, i8** %ptrs, i32 7
    %a7_p = load i8*, i8** %a7_i, align 8, !alias.scope !1
    %a7 = bitcast i8* %a7_p to i8*

    ; Prepare argument 8
    %a8_i = getelementptr inbounds i8*, i8** %ptrs, i32 8
    %a8_p = load i8*, i8** %a8_i, align 8, !alias.scope !1
    %a8 = bitcast i8* %a8_p to i8*
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Load %r0
    %r0_i = getelementptr inbounds i32, i32* %a0, i64 %index
    %r0_p = bitcast i32* %r0_i to <8 x i32>*
    %r0 = load <8 x i32>, <8 x i32>* %r0_p, align 32, !alias.scope !1

    ; Load %r1
    %r1_i = getelementptr inbounds i32, i32* %a1, i64 %index
    %r1_p = bitcast i32* %r1_i to <8 x i32>*
    %r1 = load <8 x i32>, <8 x i32>* %r1_p, align 32, !alias.scope !1

    ; Evaluate %r2
    %r2 = and <8 x i32> %r0, %r1

    ; Store %r2
    %r2_i = getelementptr inbounds i32, i32* %a2, i64 %index
    %r2_p = bitcast i32* %r2_i to <8 x i32>*
    store <8 x i32> %r2, <8 x i32>* %r2_p, align 32, !noalias !1

    ; Load %f3
    %f3_i = getelementptr inbounds float, float* %a3, i64 %index
    %f3_p = bitcast float* %f3_i to <8 x float>*
    %f3 = load <8 x float>, <8 x float>* %f3_p, align 32, !alias.scope !1

    ; Load %f4
    %f4_i = getelementptr inbounds float, float* %a4, i64 %index
    %f4_p = bitcast float* %f4_i to <8 x float>*
    %f4 = load <8 x float>, <8 x float>* %f4_p, align 32, !alias.scope !1

    ; Evaluate %f5
    %f5_0 = bitcast <8 x float> %f3 to <8 x i32>
    %f5_1 = bitcast <8 x float> %f4 to <8 x i32>
    %f5_2 = and <8 x i32> %f5_0, %f5_1%f5 = bitcast <8 x i32> %f5_2 to <8 x float>

    ; Store %f5
    %f5_i = getelementptr inbounds float, float* %a5, i64 %index
    %f5_p = bitcast float* %f5_i to <8 x float>*
    store <8 x float> %f5, <8 x float>* %f5_p, align 32, !noalias !1

    ; Load %p6
    %p6_i = getelementptr inbounds i8, i8* %a6, i64 %index
    %p6_p = bitcast i8* %p6_i to <8 x i8>*
    %p6_z = load <8 x i8>, <8 x i8>* %p6_p, align 8, !alias.scope !1
    %p6 = trunc <8 x i8> %p6_z to <8 x i1>

    ; Load %p7
    %p7_i = getelementptr inbounds i8, i8* %a7, i64 %index
    %p7_p = bitcast i8* %p7_i to <8 x i8>*
    %p7_z = load <8 x i8>, <8 x i8>* %p7_p, align 8, !alias.scope !1
    %p7 = trunc <8 x i8> %p7_z to <8 x i1>

    ; Evaluate %p8
    %p8 = and <8 x i1> %p6, %p7

    ; Store %p8
    %p8_i = getelementptr inbounds i8, i8* %a8, i64 %index
    %p8_p = bitcast i8* %p8_i to <8 x i8>*
    %p8_e = zext <8 x i1> %p8 to <8 x i8>
    store <8 x i8> %p8_e, <8 x i8>* %p8_p, align 8, !noalias !1

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}
}

!0 = !{!0}
!1 = !{!1, !0}

jit_eval(): cleaning up..
jit_var_dec_ref_int(7): 0
jit_var_dec_ref_int(10): 0
jit_var_dec_ref_int(8): 0
jit_var_dec_ref_int(11): 0
jit_var_dec_ref_int(9): 0
jit_var_dec_ref_int(12): 0
jit_eval(): done.
AND: value_1=[0, 1234]
AND: value_2=[0, 1234]
AND: value_3=[0, 0]
jit_var_inc_ref_int(7): 1
jit_var_inc_ref_int(10): 1
jit_trace_append(19 <- 7, 10): $r0 = xor <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(19): 1
jit_var_inc_ref_int(8): 1
jit_var_inc_ref_int(11): 1
jit_trace_append(20 <- 8, 11): $r0_0 = bitcast <$w x $t1> $r1 to <$w x $b0>$n$r0_1 = bitcast <$w x $t2> $r2 to <$w x $b0>$n$r0_2 = xor <$w x $b0> $r0_0, $r0_1$r0 = bitcast <$w x $b0> $r0_2 to <$w x $t0>
jit_var_inc_ref_ext(20): 1
jit_var_inc_ref_int(9): 1
jit_var_inc_ref_int(12): 1
jit_trace_append(21 <- 9, 12): $r0 = xor <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(21): 1
jit_eval(): begin.
jit_assemble(size=2): register map:
   - %r0 -> 7 [in]
   - %r1 -> 10 [in]
   - %r2 -> 19 [out]
jit_malloc(type=host, size=64): <@> (new allocation)
   - %f3 -> 8 [in]
   - %f4 -> 11 [in]
   - %f5 -> 20 [out]
jit_malloc(type=host, size=64): <@> (new allocation)
   - %p6 -> 9 [in]
   - %p7 -> 12 [in]
   - %p8 -> 21 [out]
jit_malloc(type=host, size=64): <@> (new allocation)
jit_run(): launching kernel (n=2, in=6, out=3, ops=9) ..
define void @enoki_4f091e8a(i64 %start, i64 %end, i8** %ptrs) norecurse nosync nounwind alignstack(32) "target-cpu"="haswell" {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i32*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %a2_p = load i8*, i8** %a2_i, align 8, !alias.scope !1
    %a2 = bitcast i8* %a2_p to i32*

    ; Prepare argument 3
    %a3_i = getelementptr inbounds i8*, i8** %ptrs, i32 3
    %a3_p = load i8*, i8** %a3_i, align 8, !alias.scope !1
    %a3 = bitcast i8* %a3_p to float*

    ; Prepare argument 4
    %a4_i = getelementptr inbounds i8*, i8** %ptrs, i32 4
    %a4_p = load i8*, i8** %a4_i, align 8, !alias.scope !1
    %a4 = bitcast i8* %a4_p to float*

    ; Prepare argument 5
    %a5_i = getelementptr inbounds i8*, i8** %ptrs, i32 5
    %a5_p = load i8*, i8** %a5_i, align 8, !alias.scope !1
    %a5 = bitcast i8* %a5_p to float*

    ; Prepare argument 6
    %a6_i = getelementptr inbounds i8*, i8** %ptrs, i32 6
    %a6_p = load i8*, i8** %a6_i, align 8, !alias.scope !1
    %a6 = bitcast i8* %a6_p to i8*

    ; Prepare argument 7
    %a7_i = getelementptr inbounds i8*, i8** %ptrs, i32 7
    %a7_p = load i8*, i8** %a7_i, align 8, !alias.scope !1
    %a7 = bitcast i8* %a7_p to i8*

    ; Prepare argument 8
    %a8_i = getelementptr inbounds i8*, i8** %ptrs, i32 8
    %a8_p = load i8*, i8** %a8_i, align 8, !alias.scope !1
    %a8 = bitcast i8* %a8_p to i8*
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Load %r0
    %r0_i = getelementptr inbounds i32, i32* %a0, i64 %index
    %r0_p = bitcast i32* %r0_i to <8 x i32>*
    %r0 = load <8 x i32>, <8 x i32>* %r0_p, align 32, !alias.scope !1

    ; Load %r1
    %r1_i = getelementptr inbounds i32, i32* %a1, i64 %index
    %r1_p = bitcast i32* %r1_i to <8 x i32>*
    %r1 = load <8 x i32>, <8 x i32>* %r1_p, align 32, !alias.scope !1

    ; Evaluate %r2
    %r2 = xor <8 x i32> %r0, %r1

    ; Store %r2
    %r2_i = getelementptr inbounds i32, i32* %a2, i64 %index
    %r2_p = bitcast i32* %r2_i to <8 x i32>*
    store <8 x i32> %r2, <8 x i32>* %r2_p, align 32, !noalias !1

    ; Load %f3
    %f3_i = getelementptr inbounds float, float* %a3, i64 %index
    %f3_p = bitcast float* %f3_i to <8 x float>*
    %f3 = load <8 x float>, <8 x float>* %f3_p, align 32, !alias.scope !1

    ; Load %f4
    %f4_i = getelementptr inbounds float, float* %a4, i64 %index
    %f4_p = bitcast float* %f4_i to <8 x float>*
    %f4 = load <8 x float>, <8 x float>* %f4_p, align 32, !alias.scope !1

    ; Evaluate %f5
    %f5_0 = bitcast <8 x float> %f3 to <8 x i32>
    %f5_1 = bitcast <8 x float> %f4 to <8 x i32>
    %f5_2 = xor <8 x i32> %f5_0, %f5_1%f5 = bitcast <8 x i32> %f5_2 to <8 x float>

    ; Store %f5
    %f5_i = getelementptr inbounds float, float* %a5, i64 %index
    %f5_p = bitcast float* %f5_i to <8 x float>*
    store <8 x float> %f5, <8 x float>* %f5_p, align 32, !noalias !1

    ; Load %p6
    %p6_i = getelementptr inbounds i8, i8* %a6, i64 %index
    %p6_p = bitcast i8* %p6_i to <8 x i8>*
    %p6_z = load <8 x i8>, <8 x i8>* %p6_p, align 8, !alias.scope !1
    %p6 = trunc <8 x i8> %p6_z to <8 x i1>

    ; Load %p7
    %p7_i = getelementptr inbounds i8, i8* %a7, i64 %index
    %p7_p = bitcast i8* %p7_i to <8 x i8>*
    %p7_z = load <8 x i8>, <8 x i8>* %p7_p, align 8, !alias.scope !1
    %p7 = trunc <8 x i8> %p7_z to <8 x i1>

    ; Evaluate %p8
    %p8 = xor <8 x i1> %p6, %p7

    ; Store %p8
    %p8_i = getelementptr inbounds i8, i8* %a8, i64 %index
    %p8_p = bitcast i8* %p8_i to <8 x i8>*
    %p8_e = zext <8 x i1> %p8 to <8 x i8>
    store <8 x i8> %p8_e, <8 x i8>* %p8_p, align 8, !noalias !1

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}
}

!0 = !{!0}
!1 = !{!1, !0}

jit_eval(): cleaning up..
jit_var_dec_ref_int(7): 0
jit_var_dec_ref_int(10): 0
jit_var_dec_ref_int(8): 0
jit_var_dec_ref_int(11): 0
jit_var_dec_ref_int(9): 0
jit_var_dec_ref_int(12): 0
jit_eval(): done.
XOR: value_1=[1, 4294966061]
XOR: value_2=[1, -0.00350571]
XOR: value_3=[1, 1]
jit_var_dec_ref_ext(21): 0
jit_var_free(21)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(20): 0
jit_var_free(20)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(19): 0
jit_var_free(19)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(18): 0
jit_var_free(18)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(17): 0
jit_var_free(17)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(16): 0
jit_var_free(16)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(15): 0
jit_var_free(15)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(14): 0
jit_var_free(14)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(13): 0
jit_var_free(13)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(12): 0
jit_var_free(12)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(11): 0
jit_var_free(11)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(10): 0
jit_var_free(10)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(9): 0
jit_var_free(9)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(8): 0
jit_var_free(8)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(7): 0
jit_var_free(7)
jit_free(<@>, type=host, size=64)
jit_malloc_trim(): freed
 - host memory: 960 B in 15 allocations
jit_shutdown(): done
