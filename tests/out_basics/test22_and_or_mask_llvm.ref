jit_malloc(type=host, size=64): <@> (new allocation)
jit_var_map(1): <@>, size=2, free=1
jit_var_inc_ref_ext(1): 1
jit_var_copy(1, size=2)
jit_malloc(type=host, size=64): <@> (new allocation)
jit_var_map(2): <@>, size=2, free=1
jit_var_inc_ref_ext(2): 1
jit_var_copy(2, size=2)
jit_malloc(type=host, size=64): <@> (new allocation)
jit_var_map(3): <@>, size=2, free=1
jit_var_inc_ref_ext(3): 1
jit_var_copy(3, size=2)
jit_malloc(type=host, size=64): <@> (new allocation)
jit_var_map(4): <@>, size=2, free=1
jit_var_inc_ref_ext(4): 1
jit_var_copy(4, size=2)
jit_var_inc_ref_int(4): 1
jit_trace_append(5 <- 4): $r0 = sext <$w x $t1> $r1 to <$w x $b0>
jit_var_inc_ref_ext(5): 1
jit_var_inc_ref_ext(5): 2
jit_var_inc_ref_int(1): 1
jit_var_inc_ref_int(5): 1
jit_trace_append(6 <- 1, 5): $r0 = or <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(6): 1
jit_var_dec_ref_ext(5): 1
jit_var_dec_ref_ext(5): 0
jit_var_inc_ref_int(4): 2
jit_var_dec_ref_int(4): 1
jit_trace_append(5 <- 4): $r0 = sext <$w x $t1> $r1 to <$w x $b0> (reused)
jit_var_inc_ref_ext(5): 1
jit_var_inc_ref_ext(5): 2
jit_var_inc_ref_int(1): 2
jit_var_inc_ref_int(5): 2
jit_trace_append(7 <- 1, 5): $r0 = and <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(7): 1
jit_var_dec_ref_ext(5): 1
jit_var_dec_ref_ext(5): 0
jit_var_inc_ref_int(4): 2
jit_var_dec_ref_int(4): 1
jit_trace_append(5 <- 4): $r0 = sext <$w x $t1> $r1 to <$w x $b0> (reused)
jit_var_inc_ref_ext(5): 1
jit_var_inc_ref_ext(5): 2
jit_var_inc_ref_int(2): 1
jit_var_inc_ref_int(5): 3
jit_trace_append(8 <- 2, 5): $r0 = or <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(8): 1
jit_var_dec_ref_ext(5): 1
jit_var_dec_ref_ext(5): 0
jit_var_inc_ref_int(4): 2
jit_var_dec_ref_int(4): 1
jit_trace_append(5 <- 4): $r0 = sext <$w x $t1> $r1 to <$w x $b0> (reused)
jit_var_inc_ref_ext(5): 1
jit_var_inc_ref_ext(5): 2
jit_var_inc_ref_int(2): 2
jit_var_inc_ref_int(5): 4
jit_trace_append(9 <- 2, 5): $r0 = and <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(9): 1
jit_var_dec_ref_ext(5): 1
jit_var_dec_ref_ext(5): 0
jit_var_inc_ref_int(4): 2
jit_var_dec_ref_int(4): 1
jit_trace_append(5 <- 4): $r0 = sext <$w x $t1> $r1 to <$w x $b0> (reused)
jit_var_inc_ref_ext(5): 1
jit_var_inc_ref_int(5): 5
jit_trace_append(10 <- 5): $r0 = bitcast <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(10): 1
jit_var_inc_ref_int(3): 1
jit_var_inc_ref_int(10): 1
jit_trace_append(11 <- 3, 10): $r0_0 = bitcast <$w x $t1> $r1 to <$w x $b0>$n$r0_1 = bitcast <$w x $t2> $r2 to <$w x $b0>$n$r0_2 = or <$w x $b0> $r0_0, $r0_1$r0 = bitcast <$w x $b0> $r0_2 to <$w x $t0>
jit_var_inc_ref_ext(11): 1
jit_var_dec_ref_ext(10): 0
jit_var_dec_ref_ext(5): 0
jit_var_inc_ref_int(4): 2
jit_var_dec_ref_int(4): 1
jit_trace_append(5 <- 4): $r0 = sext <$w x $t1> $r1 to <$w x $b0> (reused)
jit_var_inc_ref_ext(5): 1
jit_var_inc_ref_int(5): 6
jit_var_dec_ref_int(5): 5
jit_trace_append(10 <- 5): $r0 = bitcast <$w x $t1> $r1 to <$w x $t0> (reused)
jit_var_inc_ref_ext(10): 1
jit_var_inc_ref_int(3): 2
jit_var_inc_ref_int(10): 2
jit_trace_append(12 <- 3, 10): $r0_0 = bitcast <$w x $t1> $r1 to <$w x $b0>$n$r0_1 = bitcast <$w x $t2> $r2 to <$w x $b0>$n$r0_2 = and <$w x $b0> $r0_0, $r0_1$r0 = bitcast <$w x $b0> $r0_2 to <$w x $t0>
jit_var_inc_ref_ext(12): 1
jit_var_dec_ref_ext(10): 0
jit_var_dec_ref_ext(5): 0
jit_trace_append(13): $r0_0 = insertelement <$w x $t0> undef, $t0 0x7fffffffe0000000, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> zeroinitializer
jit_var_inc_ref_ext(13): 1
jit_var_inc_ref_int(13): 1
jit_var_inc_ref_int(11): 1
jit_trace_append(14 <- 13, 11): $r0_0 = bitcast <$w x $t1> $r1 to <$w x $b0>$n$r0_1 = bitcast <$w x $t2> $r2 to <$w x $b0>$n$r0_2 = and <$w x $b0> $r0_0, $r0_1$r0 = bitcast <$w x $b0> $r0_2 to <$w x $t0>
jit_var_inc_ref_ext(14): 1
jit_var_dec_ref_ext(13): 0
jit_var_dec_ref_ext(11): 0
jit_eval(): begin.
jit_assemble(size=2): register map:
   - %p0 -> 4 [in]
   - %r1 -> 5
   - %r2 -> 1 [in]
   - %r3 -> 6 [out]
jit_malloc(type=host, size=64): <@> (new allocation)
   - %r4 -> 7 [out]
jit_malloc(type=host, size=64): <@> (new allocation)
   - %r5 -> 2 [in]
   - %r6 -> 8 [out]
jit_malloc(type=host, size=64): <@> (new allocation)
   - %r7 -> 9 [out]
jit_malloc(type=host, size=64): <@> (new allocation)
   - %f8 -> 10
   - %f9 -> 3 [in]
   - %f10 -> 12 [out]
jit_malloc(type=host, size=64): <@> (new allocation)
   - %f11 -> 11
   - %f12 -> 13 [scalar]
   - %f13 -> 14 [out]
jit_malloc(type=host, size=64): <@> (new allocation)
jit_run(): launching kernel (n=2, in=4, out=6, ops=14) ..
define void @enoki_@@@@@@@@@@@@@@@@(i64 %start, i64 %end, i8** %ptrs) #0 alignstack(32) {
entry:
    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i8*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %a2_p = load i8*, i8** %a2_i, align 8, !alias.scope !1
    %a2 = bitcast i8* %a2_p to i32*

    ; Prepare argument 3
    %a3_i = getelementptr inbounds i8*, i8** %ptrs, i32 3
    %a3_p = load i8*, i8** %a3_i, align 8, !alias.scope !1
    %a3 = bitcast i8* %a3_p to i32*

    ; Prepare argument 4
    %a4_i = getelementptr inbounds i8*, i8** %ptrs, i32 4
    %a4_p = load i8*, i8** %a4_i, align 8, !alias.scope !1
    %a4 = bitcast i8* %a4_p to i32*

    ; Prepare argument 5
    %a5_i = getelementptr inbounds i8*, i8** %ptrs, i32 5
    %a5_p = load i8*, i8** %a5_i, align 8, !alias.scope !1
    %a5 = bitcast i8* %a5_p to i32*

    ; Prepare argument 6
    %a6_i = getelementptr inbounds i8*, i8** %ptrs, i32 6
    %a6_p = load i8*, i8** %a6_i, align 8, !alias.scope !1
    %a6 = bitcast i8* %a6_p to i32*

    ; Prepare argument 7
    %a7_i = getelementptr inbounds i8*, i8** %ptrs, i32 7
    %a7_p = load i8*, i8** %a7_i, align 8, !alias.scope !1
    %a7 = bitcast i8* %a7_p to float*

    ; Prepare argument 8
    %a8_i = getelementptr inbounds i8*, i8** %ptrs, i32 8
    %a8_p = load i8*, i8** %a8_i, align 8, !alias.scope !1
    %a8 = bitcast i8* %a8_p to float*

    ; Prepare argument 9
    %a9_i = getelementptr inbounds i8*, i8** %ptrs, i32 9
    %a9_p = load i8*, i8** %a9_i, align 8, !alias.scope !1
    %a9 = bitcast i8* %a9_p to float*
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Load %p0
    %p0_i = getelementptr inbounds i8, i8* %a0, i64 %index
    %p0_p = bitcast i8* %p0_i to <8 x i8>*
    %p0_z = load <8 x i8>, <8 x i8>* %p0_p, align 8, !alias.scope !1
    %p0 = trunc <8 x i8> %p0_z to <8 x i1>

    ; Evaluate %r1
    %r1 = sext <8 x i1> %p0 to <8 x i32>

    ; Load %r2
    %r2_i = getelementptr inbounds i32, i32* %a1, i64 %index
    %r2_p = bitcast i32* %r2_i to <8 x i32>*
    %r2 = load <8 x i32>, <8 x i32>* %r2_p, align 32, !alias.scope !1

    ; Evaluate %r3
    %r3 = or <8 x i32> %r2, %r1

    ; Store %r3
    %r3_i = getelementptr inbounds i32, i32* %a2, i64 %index
    %r3_p = bitcast i32* %r3_i to <8 x i32>*
    store <8 x i32> %r3, <8 x i32>* %r3_p, align 32, !noalias !1

    ; Evaluate %r4
    %r4 = and <8 x i32> %r2, %r1

    ; Store %r4
    %r4_i = getelementptr inbounds i32, i32* %a3, i64 %index
    %r4_p = bitcast i32* %r4_i to <8 x i32>*
    store <8 x i32> %r4, <8 x i32>* %r4_p, align 32, !noalias !1

    ; Load %r5
    %r5_i = getelementptr inbounds i32, i32* %a4, i64 %index
    %r5_p = bitcast i32* %r5_i to <8 x i32>*
    %r5 = load <8 x i32>, <8 x i32>* %r5_p, align 32, !alias.scope !1

    ; Evaluate %r6
    %r6 = or <8 x i32> %r5, %r1

    ; Store %r6
    %r6_i = getelementptr inbounds i32, i32* %a5, i64 %index
    %r6_p = bitcast i32* %r6_i to <8 x i32>*
    store <8 x i32> %r6, <8 x i32>* %r6_p, align 32, !noalias !1

    ; Evaluate %r7
    %r7 = and <8 x i32> %r5, %r1

    ; Store %r7
    %r7_i = getelementptr inbounds i32, i32* %a6, i64 %index
    %r7_p = bitcast i32* %r7_i to <8 x i32>*
    store <8 x i32> %r7, <8 x i32>* %r7_p, align 32, !noalias !1

    ; Evaluate %f8
    %f8 = bitcast <8 x i32> %r1 to <8 x float>

    ; Load %f9
    %f9_i = getelementptr inbounds float, float* %a7, i64 %index
    %f9_p = bitcast float* %f9_i to <8 x float>*
    %f9 = load <8 x float>, <8 x float>* %f9_p, align 32, !alias.scope !1

    ; Evaluate %f10
    %f10_0 = bitcast <8 x float> %f9 to <8 x i32>
    %f10_1 = bitcast <8 x float> %f8 to <8 x i32>
    %f10_2 = and <8 x i32> %f10_0, %f10_1%f10 = bitcast <8 x i32> %f10_2 to <8 x float>

    ; Store %f10
    %f10_i = getelementptr inbounds float, float* %a8, i64 %index
    %f10_p = bitcast float* %f10_i to <8 x float>*
    store <8 x float> %f10, <8 x float>* %f10_p, align 32, !noalias !1

    ; Evaluate %f11
    %f11_0 = bitcast <8 x float> %f9 to <8 x i32>
    %f11_1 = bitcast <8 x float> %f8 to <8 x i32>
    %f11_2 = or <8 x i32> %f11_0, %f11_1%f11 = bitcast <8 x i32> %f11_2 to <8 x float>

    ; Evaluate %f12
    %f12_0 = insertelement <8 x float> undef, float 0x7fffffffe0000000, i32 0
    %f12 = shufflevector <8 x float> %f12_0, <8 x float> undef, <8 x i32> zeroinitializer

    ; Evaluate %f13
    %f13_0 = bitcast <8 x float> %f12 to <8 x i32>
    %f13_1 = bitcast <8 x float> %f11 to <8 x i32>
    %f13_2 = and <8 x i32> %f13_0, %f13_1%f13 = bitcast <8 x i32> %f13_2 to <8 x float>

    ; Store %f13
    %f13_i = getelementptr inbounds float, float* %a9, i64 %index
    %f13_p = bitcast float* %f13_i to <8 x float>*
    store <8 x float> %f13, <8 x float>* %f13_p, align 32, !noalias !1

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" }
jit_eval(): cleaning up..
jit_var_dec_ref_int(4): 0
jit_var_dec_ref_int(1): 1
jit_var_dec_ref_int(5): 4
jit_var_dec_ref_int(1): 0
jit_var_dec_ref_int(5): 3
jit_var_dec_ref_int(2): 1
jit_var_dec_ref_int(5): 2
jit_var_dec_ref_int(2): 0
jit_var_dec_ref_int(5): 1
jit_var_dec_ref_int(5): 0
jit_var_free(5)
jit_var_dec_ref_int(3): 1
jit_var_dec_ref_int(10): 1
jit_var_dec_ref_int(3): 0
jit_var_dec_ref_int(10): 0
jit_var_free(10)
jit_var_dec_ref_int(13): 0
jit_var_free(13)
jit_var_dec_ref_int(11): 0
jit_var_free(11)
jit_eval(): done.
x_o : [4294967295, 1]
x_a : [0, 0]
y_o : [-1, 1]
y_a : [0, 0]
z_o : [nan, 1]
z_a : [0, 0]
jit_trace_append(15): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> zeroinitializer
jit_var_inc_ref_ext(15): 1
jit_var_dec_ref_ext(4): 0
jit_var_free(4)
jit_free(<@>, type=host, size=64)
jit_trace_append(16): $r0_0 = insertelement <$w x $t0> undef, $t0 4294967295, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> zeroinitializer
jit_var_inc_ref_ext(16): 1
jit_var_dec_ref_ext(6): 0
jit_var_free(6)
jit_free(<@>, type=host, size=64)
jit_var_inc_ref_ext(1): 2
jit_var_dec_ref_ext(7): 0
jit_var_free(7)
jit_free(<@>, type=host, size=64)
jit_trace_append(17): $r0_0 = insertelement <$w x $t0> undef, $t0 4294967295, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> zeroinitializer
jit_var_inc_ref_ext(17): 1
jit_var_dec_ref_ext(8): 0
jit_var_free(8)
jit_free(<@>, type=host, size=64)
jit_var_inc_ref_ext(2): 2
jit_var_dec_ref_ext(9): 0
jit_var_free(9)
jit_free(<@>, type=host, size=64)
jit_trace_append(18): $r0_0 = insertelement <$w x $t0> undef, $t0 0xffffffffe0000000, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> zeroinitializer
jit_var_inc_ref_ext(18): 1
jit_var_dec_ref_ext(14): 0
jit_var_free(14)
jit_free(<@>, type=host, size=64)
jit_var_inc_ref_ext(3): 2
jit_var_dec_ref_ext(12): 0
jit_var_free(12)
jit_free(<@>, type=host, size=64)
jit_trace_append(19): $r0_0 = insertelement <$w x $t0> undef, $t0 0x7fffffffe0000000, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> zeroinitializer
jit_var_inc_ref_ext(19): 1
jit_var_inc_ref_int(19): 1
jit_var_inc_ref_int(18): 1
jit_trace_append(20 <- 19, 18): $r0_0 = bitcast <$w x $t1> $r1 to <$w x $b0>$n$r0_1 = bitcast <$w x $t2> $r2 to <$w x $b0>$n$r0_2 = and <$w x $b0> $r0_0, $r0_1$r0 = bitcast <$w x $b0> $r0_2 to <$w x $t0>
jit_var_inc_ref_ext(20): 1
jit_var_dec_ref_ext(19): 0
jit_var_dec_ref_ext(18): 0
jit_eval(): begin.
jit_assemble(size=1): register map:
   - %p0 -> 15 [scalar] [out]
jit_malloc(type=host, size=64): <@> (reused global)
   - %r1 -> 16 [scalar] [out]
jit_malloc(type=host, size=64): <@> (reused global)
   - %r2 -> 17 [scalar] [out]
jit_malloc(type=host, size=64): <@> (reused global)
   - %f3 -> 19 [scalar]
   - %f4 -> 18 [scalar]
   - %f5 -> 20 [scalar] [out]
jit_malloc(type=host, size=64): <@> (reused global)
jit_run(): launching kernel (n=1, in=0, out=4, ops=6) ..
define void @enoki_@@@@@@@@@@@@@@@@(i64 %start, i64 %end, i8** %ptrs) #0 alignstack(32) {
entry:
    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i8*
    %a0_s = load i8, i8* %a0, align 1, !alias.scope !1
    %a0_s1 = trunc i8 %a0_s to i1

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*
    %a1_s = load i32, i32* %a1, align 4, !alias.scope !1

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %a2_p = load i8*, i8** %a2_i, align 8, !alias.scope !1
    %a2 = bitcast i8* %a2_p to i32*
    %a2_s = load i32, i32* %a2, align 4, !alias.scope !1

    ; Prepare argument 3
    %a3_i = getelementptr inbounds i8*, i8** %ptrs, i32 3
    %a3_p = load i8*, i8** %a3_i, align 8, !alias.scope !1
    %a3 = bitcast i8* %a3_p to float*
    %a3_s = load float, float* %a3, align 4, !alias.scope !1
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Evaluate %p0
    %p0_0 = insertelement <8 x i1> undef, i1 1, i32 0
    %p0 = shufflevector <8 x i1> %p0_0, <8 x i1> undef, <8 x i32> zeroinitializer

    ; Store %p0
    %p0_p = bitcast i8* %a0 to <8 x i8>*
    %p0_e = zext <8 x i1> %p0 to <8 x i8>
    store <8 x i8> %p0_e, <8 x i8>* %p0_p, align 8, !noalias !1

    ; Evaluate %r1
    %r1_0 = insertelement <8 x i32> undef, i32 4294967295, i32 0
    %r1 = shufflevector <8 x i32> %r1_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Store %r1
    %r1_p = bitcast i32* %a1 to <8 x i32>*
    store <8 x i32> %r1, <8 x i32>* %r1_p, align 32, !noalias !1

    ; Evaluate %r2
    %r2_0 = insertelement <8 x i32> undef, i32 4294967295, i32 0
    %r2 = shufflevector <8 x i32> %r2_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Store %r2
    %r2_p = bitcast i32* %a2 to <8 x i32>*
    store <8 x i32> %r2, <8 x i32>* %r2_p, align 32, !noalias !1

    ; Evaluate %f3
    %f3_0 = insertelement <8 x float> undef, float 0x7fffffffe0000000, i32 0
    %f3 = shufflevector <8 x float> %f3_0, <8 x float> undef, <8 x i32> zeroinitializer

    ; Evaluate %f4
    %f4_0 = insertelement <8 x float> undef, float 0xffffffffe0000000, i32 0
    %f4 = shufflevector <8 x float> %f4_0, <8 x float> undef, <8 x i32> zeroinitializer

    ; Evaluate %f5
    %f5_0 = bitcast <8 x float> %f3 to <8 x i32>
    %f5_1 = bitcast <8 x float> %f4 to <8 x i32>
    %f5_2 = and <8 x i32> %f5_0, %f5_1%f5 = bitcast <8 x i32> %f5_2 to <8 x float>

    ; Store %f5
    %f5_p = bitcast float* %a3 to <8 x float>*
    store <8 x float> %f5, <8 x float>* %f5_p, align 32, !noalias !1

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" }
jit_eval(): cleaning up..
jit_var_dec_ref_int(19): 0
jit_var_free(19)
jit_var_dec_ref_int(18): 0
jit_var_free(18)
jit_eval(): done.
x_o : [4294967295]
x_a : [0, 1]
y_o : [-1]
y_a : [0, 1]
z_o : [nan]
z_a : [0, 1]
jit_trace_append(21): $r0_0 = insertelement <$w x $t0> undef, $t0 0, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> zeroinitializer
jit_var_inc_ref_ext(21): 1
jit_var_dec_ref_ext(15): 0
jit_var_free(15)
jit_free(<@>, type=host, size=64)
jit_var_inc_ref_ext(1): 3
jit_var_dec_ref_ext(16): 0
jit_var_free(16)
jit_free(<@>, type=host, size=64)
jit_trace_append(22): $r0_0 = insertelement <$w x $t0> undef, $t0 0, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> zeroinitializer
jit_var_inc_ref_ext(22): 1
jit_var_dec_ref_ext(1): 2
jit_var_inc_ref_ext(2): 3
jit_var_dec_ref_ext(17): 0
jit_var_free(17)
jit_free(<@>, type=host, size=64)
jit_trace_append(23): $r0_0 = insertelement <$w x $t0> undef, $t0 0, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> zeroinitializer
jit_var_inc_ref_ext(23): 1
jit_var_dec_ref_ext(2): 2
jit_var_inc_ref_ext(3): 3
jit_var_dec_ref_ext(20): 0
jit_var_free(20)
jit_free(<@>, type=host, size=64)
jit_trace_append(24): $r0_0 = insertelement <$w x $t0> undef, $t0 0x0, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> zeroinitializer
jit_var_inc_ref_ext(24): 1
jit_var_dec_ref_ext(3): 2
x_o : [0, 1]
jit_eval(): begin.
jit_assemble(size=1): register map:
   - %p0 -> 21 [scalar] [out]
jit_malloc(type=host, size=64): <@> (reused global)
   - %r1 -> 22 [scalar] [out]
jit_malloc(type=host, size=64): <@> (reused global)
   - %r2 -> 23 [scalar] [out]
jit_malloc(type=host, size=64): <@> (reused global)
   - %f3 -> 24 [scalar] [out]
jit_malloc(type=host, size=64): <@> (reused global)
jit_run(): launching kernel (n=1, in=0, out=4, ops=4) ..
define void @enoki_@@@@@@@@@@@@@@@@(i64 %start, i64 %end, i8** %ptrs) #0 alignstack(32) {
entry:
    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i8*
    %a0_s = load i8, i8* %a0, align 1, !alias.scope !1
    %a0_s1 = trunc i8 %a0_s to i1

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i32*
    %a1_s = load i32, i32* %a1, align 4, !alias.scope !1

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %a2_p = load i8*, i8** %a2_i, align 8, !alias.scope !1
    %a2 = bitcast i8* %a2_p to i32*
    %a2_s = load i32, i32* %a2, align 4, !alias.scope !1

    ; Prepare argument 3
    %a3_i = getelementptr inbounds i8*, i8** %ptrs, i32 3
    %a3_p = load i8*, i8** %a3_i, align 8, !alias.scope !1
    %a3 = bitcast i8* %a3_p to float*
    %a3_s = load float, float* %a3, align 4, !alias.scope !1
    br label %loop

done:
    ret void

loop:
    %index = phi i64 [ %index_next, %loop ], [ %start, %entry ]

    ; Evaluate %p0
    %p0_0 = insertelement <8 x i1> undef, i1 0, i32 0
    %p0 = shufflevector <8 x i1> %p0_0, <8 x i1> undef, <8 x i32> zeroinitializer

    ; Store %p0
    %p0_p = bitcast i8* %a0 to <8 x i8>*
    %p0_e = zext <8 x i1> %p0 to <8 x i8>
    store <8 x i8> %p0_e, <8 x i8>* %p0_p, align 8, !noalias !1

    ; Evaluate %r1
    %r1_0 = insertelement <8 x i32> undef, i32 0, i32 0
    %r1 = shufflevector <8 x i32> %r1_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Store %r1
    %r1_p = bitcast i32* %a1 to <8 x i32>*
    store <8 x i32> %r1, <8 x i32>* %r1_p, align 32, !noalias !1

    ; Evaluate %r2
    %r2_0 = insertelement <8 x i32> undef, i32 0, i32 0
    %r2 = shufflevector <8 x i32> %r2_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Store %r2
    %r2_p = bitcast i32* %a2 to <8 x i32>*
    store <8 x i32> %r2, <8 x i32>* %r2_p, align 32, !noalias !1

    ; Evaluate %f3
    %f3_0 = insertelement <8 x float> undef, float 0x0, i32 0
    %f3 = shufflevector <8 x float> %f3_0, <8 x float> undef, <8 x i32> zeroinitializer

    ; Store %f3
    %f3_p = bitcast float* %a3 to <8 x float>*
    store <8 x float> %f3, <8 x float>* %f3_p, align 32, !noalias !1

    %index_next = add i64 %index, 8
    %cond = icmp uge i64 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" }
jit_eval(): cleaning up..
jit_eval(): done.
x_a : [0]
y_o : [0, 1]
y_a : [0]
z_o : [0, 1]
z_a : [0]
jit_var_dec_ref_ext(24): 0
jit_var_free(24)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(3): 1
jit_var_dec_ref_ext(23): 0
jit_var_free(23)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(2): 1
jit_var_dec_ref_ext(22): 0
jit_var_free(22)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(1): 1
jit_var_dec_ref_ext(21): 0
jit_var_free(21)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(3): 0
jit_var_free(3)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(2): 0
jit_var_free(2)
jit_free(<@>, type=host, size=64)
jit_var_dec_ref_ext(1): 0
jit_var_free(1)
jit_free(<@>, type=host, size=64)
jit_malloc_trim(): freed
 - host memory: 640 B in 10 allocations
jit_shutdown(): done
