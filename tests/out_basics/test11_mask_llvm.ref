jit_var_new(1): $r0_0 = insertelement <$w x $t0> undef, i32 $i, i32 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n$r0 = add <$w x $t0> $r0_1, $l0
jit_var_inc_ref_ext(1): 1
jit_var_inc_ref_int(1): 1
jit_var_new(2 <- 1): $r0 = uitofp <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(2): 1
jit_var_dec_ref_ext(1): 0
jit_var_new_literal(3): $r0_0 = insertelement <$w x $t0> undef, $t0 0x4014000000000000, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(3): 1
jit_var_inc_ref_int(2): 1
jit_var_inc_ref_int(3): 1
jit_var_new(4 <- 2, 3): $r0 = fcmp ogt <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(4): 1
jit_var_dec_ref_ext(3): 0
jit_var_inc_ref_int(2): 2
jit_var_new(5 <- 2): $r0 = fneg <$w x $t0> $r1
jit_var_inc_ref_ext(5): 1
jit_var_inc_ref_int(4): 1
jit_var_inc_ref_int(5): 1
jit_var_inc_ref_int(2): 3
jit_var_new(6 <- 4, 5, 2): $r0 = select <$w x $t1> $r1, <$w x $t2> $r2, <$w x $t3> $r3
jit_var_inc_ref_ext(6): 1
jit_var_dec_ref_ext(2): 0
jit_var_dec_ref_ext(5): 0
jit_var_schedule(4)
jit_var_schedule(6)
jit_eval(): launching 1 kernel.
jit_assemble(size=10): register map:
   - %r0 -> 1
   - %f1 -> 2
   - %f2 -> 3 [scalar]
   - %p3 -> 4 [out]
jit_malloc(type=host-async, size=64): <@> (new allocation)
   - %f4 -> 5
   - %f5 -> 6 [out]
jit_malloc(type=host-async, size=64): <@> (new allocation)
  -> launching <@> (n=10, in=0, out=2, ops=6):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i8*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to float*
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Evaluate %r0
    %r0_0 = insertelement <8 x i32> undef, i32 %index, i32 0
    %r0_1 = shufflevector <8 x i32> %r0_0, <8 x i32> undef, <8 x i32> zeroinitializer
    %r0 = add <8 x i32> %r0_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>

    ; Evaluate %f1
    %f1 = uitofp <8 x i32> %r0 to <8 x float>

    ; Evaluate %f2
    %f2_0 = insertelement <8 x float> undef, float 0x4014000000000000, i32 0
    %f2 = shufflevector <8 x float> %f2_0, <8 x float> undef, <8 x i32> zeroinitializer

    ; Evaluate %p3
    %p3 = fcmp ogt <8 x float> %f1, %f2

    ; Store %p3
    %p3_i = getelementptr inbounds i8, i8* %a0, i32 %index
    %p3_p = bitcast i8* %p3_i to <8 x i8>*
    %p3_e = zext <8 x i1> %p3 to <8 x i8>
    store <8 x i8> %p3_e, <8 x i8>* %p3_p, align 8, !noalias !1

    ; Evaluate %f4
    %f4 = fneg <8 x float> %f1

    ; Evaluate %f5
    %f5 = select <8 x i1> %p3, <8 x float> %f4, <8 x float> %f1

    ; Store %f5
    %f5_i = getelementptr inbounds float, float* %a1, i32 %index
    %f5_p = bitcast float* %f5_i to <8 x float>*
    store <8 x float> %f5, <8 x float>* %f5_p, align 32, !noalias !1

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 2 packets in 1 block ..
jit_eval(): cleaning up..
jit_var_dec_ref_int(2): 2
jit_var_dec_ref_int(3): 0
jit_var_free(3)
jit_var_dec_ref_int(4): 0
jit_var_dec_ref_int(5): 0
jit_var_free(5)
jit_var_dec_ref_int(2): 1
jit_var_dec_ref_int(2): 0
jit_var_free(2)
jit_var_dec_ref_int(1): 0
jit_var_free(1)
jit_eval(): done.
value=[0, 1, 2, 3, 4, 5, -6, -7, -8, -9]
mask=[0, 0, 0, 0, 0, 0, 1, 1, 1, 1]
jit_var_new_literal(7): $r0_0 = insertelement <$w x $t0> undef, $t0 0x3ff0000000000000, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(7): 1
jit_var_new_literal(8): $r0_0 = insertelement <$w x $t0> undef, $t0 0x4000000000000000, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(8): 1
jit_var_inc_ref_int(4): 1
jit_var_inc_ref_int(7): 1
jit_var_inc_ref_int(8): 1
jit_var_new(9 <- 4, 7, 8): $r0 = select <$w x $t1> $r1, <$w x $t2> $r2, <$w x $t3> $r3
jit_var_inc_ref_ext(9): 1
jit_var_dec_ref_ext(8): 0
jit_var_dec_ref_ext(7): 0
jit_eval(): launching 1 kernel.
jit_assemble(size=10): register map:
   - %p0 -> 4 [in]
   - %f1 -> 7 [scalar]
   - %f2 -> 8 [scalar]
   - %f3 -> 9 [out]
jit_malloc(type=host-async, size=64): <@> (new allocation)
  -> launching <@> (n=10, in=1, out=1, ops=4):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i8*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to float*
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Load %p0
    %p0_i = getelementptr inbounds i8, i8* %a0, i32 %index
    %p0_p = bitcast i8* %p0_i to <8 x i8>*
    %p0_z = load <8 x i8>, <8 x i8>* %p0_p, align 8, !alias.scope !1
    %p0 = trunc <8 x i8> %p0_z to <8 x i1>

    ; Evaluate %f1
    %f1_0 = insertelement <8 x float> undef, float 0x3ff0000000000000, i32 0
    %f1 = shufflevector <8 x float> %f1_0, <8 x float> undef, <8 x i32> zeroinitializer

    ; Evaluate %f2
    %f2_0 = insertelement <8 x float> undef, float 0x4000000000000000, i32 0
    %f2 = shufflevector <8 x float> %f2_0, <8 x float> undef, <8 x i32> zeroinitializer

    ; Evaluate %f3
    %f3 = select <8 x i1> %p0, <8 x float> %f1, <8 x float> %f2

    ; Store %f3
    %f3_i = getelementptr inbounds float, float* %a1, i32 %index
    %f3_p = bitcast float* %f3_i to <8 x float>*
    store <8 x float> %f3, <8 x float>* %f3_p, align 32, !noalias !1

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 2 packets in 1 block ..
jit_eval(): cleaning up..
jit_var_dec_ref_int(4): 0
jit_var_dec_ref_int(7): 0
jit_var_free(7)
jit_var_dec_ref_int(8): 0
jit_var_free(8)
jit_eval(): done.
value_2=[2, 2, 2, 2, 2, 2, 1, 1, 1, 1]
jit_var_new_literal(10): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(10): 1
jit_var_new_literal(11): $r0_0 = insertelement <$w x $t0> undef, $t0 0, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(11): 1
jit_var_schedule(10)
jit_var_schedule(11)
jit_eval(): launching 1 kernel.
jit_assemble(size=1): register map:
   - %p0 -> 10 [scalar] [out]
jit_malloc(type=host-async, size=64): <@> (new allocation)
   - %p1 -> 11 [scalar] [out]
jit_malloc(type=host-async, size=64): <@> (new allocation)
  -> launching <@> (n=1, in=0, out=2, ops=2):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i8*
    %a0_s = load i8, i8* %a0, align 1, !alias.scope !1
    %a0_s1 = trunc i8 %a0_s to i1

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i8*
    %a1_s = load i8, i8* %a1, align 1, !alias.scope !1
    %a1_s1 = trunc i8 %a1_s to i1
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Evaluate %p0
    %p0_0 = insertelement <8 x i1> undef, i1 1, i32 0
    %p0 = shufflevector <8 x i1> %p0_0, <8 x i1> undef, <8 x i32> zeroinitializer

    ; Store %p0
    %p0_p = bitcast i8* %a0 to <8 x i8>*
    %p0_e = zext <8 x i1> %p0 to <8 x i8>
    store <8 x i8> %p0_e, <8 x i8>* %p0_p, align 8, !noalias !1

    ; Evaluate %p1
    %p1_0 = insertelement <8 x i1> undef, i1 0, i32 0
    %p1 = shufflevector <8 x i1> %p1_0, <8 x i1> undef, <8 x i32> zeroinitializer

    ; Store %p1
    %p1_p = bitcast i8* %a1 to <8 x i8>*
    %p1_e = zext <8 x i1> %p1 to <8 x i8>
    store <8 x i8> %p1_e, <8 x i8>* %p1_p, align 8, !noalias !1

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 1 packet in 1 block ..
jit_eval(): cleaning up..
jit_eval(): done.
jit_var_new_literal(12): $r0_0 = insertelement <$w x $t0> undef, $t0 0x0, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(12): 1
jit_var_inc_ref_int(10): 1
jit_var_inc_ref_int(6): 1
jit_var_inc_ref_int(12): 1
jit_var_new(13 <- 10, 6, 12): $r0 = select <$w x $t1> $r1, <$w x $t2> $r2, <$w x $t3> $r3
jit_var_inc_ref_ext(13): 1
jit_var_dec_ref_ext(12): 0
jit_var_new_literal(12): $r0_0 = insertelement <$w x $t0> undef, $t0 0x0, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z (reused)
jit_var_inc_ref_ext(12): 1
jit_var_inc_ref_int(11): 1
jit_var_inc_ref_int(6): 2
jit_var_inc_ref_int(12): 2
jit_var_new(14 <- 11, 6, 12): $r0 = select <$w x $t1> $r1, <$w x $t2> $r2, <$w x $t3> $r3
jit_var_inc_ref_ext(14): 1
jit_var_dec_ref_ext(12): 0
jit_var_schedule(13)
jit_var_schedule(14)
jit_eval(): launching 1 kernel.
jit_assemble(size=10): register map:
   - %p0 -> 10 [scalar] [in]
   - %f1 -> 6 [in]
   - %f2 -> 12 [scalar]
   - %f3 -> 13 [out]
jit_malloc(type=host-async, size=64): <@> (new allocation)
   - %p4 -> 11 [scalar] [in]
   - %f5 -> 14 [out]
jit_malloc(type=host-async, size=64): <@> (new allocation)
  -> launching <@> (n=10, in=3, out=2, ops=6):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i8*
    %a0_s = load i8, i8* %a0, align 1, !alias.scope !1
    %a0_s1 = trunc i8 %a0_s to i1

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to float*

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %a2_p = load i8*, i8** %a2_i, align 8, !alias.scope !1
    %a2 = bitcast i8* %a2_p to float*

    ; Prepare argument 3
    %a3_i = getelementptr inbounds i8*, i8** %ptrs, i32 3
    %a3_p = load i8*, i8** %a3_i, align 8, !alias.scope !1
    %a3 = bitcast i8* %a3_p to i8*
    %a3_s = load i8, i8* %a3, align 1, !alias.scope !1
    %a3_s1 = trunc i8 %a3_s to i1

    ; Prepare argument 4
    %a4_i = getelementptr inbounds i8*, i8** %ptrs, i32 4
    %a4_p = load i8*, i8** %a4_i, align 8, !alias.scope !1
    %a4 = bitcast i8* %a4_p to float*
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Load %p0
    %p0_z = insertelement <8 x i1> undef, i1 %a0_s1, i32 0
    %p0 = shufflevector <8 x i1> %p0_z, <8 x i1> undef, <8 x i32> zeroinitializer

    ; Load %f1
    %f1_i = getelementptr inbounds float, float* %a1, i32 %index
    %f1_p = bitcast float* %f1_i to <8 x float>*
    %f1 = load <8 x float>, <8 x float>* %f1_p, align 32, !alias.scope !1

    ; Evaluate %f2
    %f2_0 = insertelement <8 x float> undef, float 0x0, i32 0
    %f2 = shufflevector <8 x float> %f2_0, <8 x float> undef, <8 x i32> zeroinitializer

    ; Evaluate %f3
    %f3 = select <8 x i1> %p0, <8 x float> %f1, <8 x float> %f2

    ; Store %f3
    %f3_i = getelementptr inbounds float, float* %a2, i32 %index
    %f3_p = bitcast float* %f3_i to <8 x float>*
    store <8 x float> %f3, <8 x float>* %f3_p, align 32, !noalias !1

    ; Load %p4
    %p4_z = insertelement <8 x i1> undef, i1 %a3_s1, i32 0
    %p4 = shufflevector <8 x i1> %p4_z, <8 x i1> undef, <8 x i32> zeroinitializer

    ; Evaluate %f5
    %f5 = select <8 x i1> %p4, <8 x float> %f1, <8 x float> %f2

    ; Store %f5
    %f5_i = getelementptr inbounds float, float* %a4, i32 %index
    %f5_p = bitcast float* %f5_i to <8 x float>*
    store <8 x float> %f5, <8 x float>* %f5_p, align 32, !noalias !1

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 2 packets in 1 block ..
jit_eval(): cleaning up..
jit_var_dec_ref_int(10): 0
jit_var_dec_ref_int(6): 1
jit_var_dec_ref_int(12): 1
jit_var_dec_ref_int(11): 0
jit_var_dec_ref_int(6): 0
jit_var_dec_ref_int(12): 0
jit_var_free(12)
jit_eval(): done.
value_3=[0, 1, 2, 3, 4, 5, -6, -7, -8, -9]
value_4=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
jit_var_dec_ref_ext(14): 0
jit_var_free(14)
jit_free(<@>, type=host-async, size=64)
jit_var_dec_ref_ext(13): 0
jit_var_free(13)
jit_free(<@>, type=host-async, size=64)
jit_var_dec_ref_ext(11): 0
jit_var_free(11)
jit_free(<@>, type=host-async, size=64)
jit_var_dec_ref_ext(10): 0
jit_var_free(10)
jit_free(<@>, type=host-async, size=64)
jit_var_dec_ref_ext(9): 0
jit_var_free(9)
jit_free(<@>, type=host-async, size=64)
jit_var_dec_ref_ext(4): 0
jit_var_free(4)
jit_free(<@>, type=host-async, size=64)
jit_var_dec_ref_ext(6): 0
jit_var_free(6)
jit_free(<@>, type=host-async, size=64)
jit_shutdown(): releasing 1 thread state ..
jit_free_flush(): scheduling 7 deallocations
jit_shutdown(): releasing 4 kernels ..
jit_malloc_trim(): freed
 - host-async memory: 448 B in 7 allocations
jit_shutdown(): done
