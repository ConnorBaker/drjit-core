jit_var_new(1): $r0_0 = insertelement <$w x $t0> undef, i32 $i, i32 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n$r0 = add <$w x $t0> $r0_1, $l0
jit_var_inc_ref_ext(1): 1
jit_var_inc_ref_ext(1): 2
jit_var_dec_ref_ext(1): 1
jit_var_set_label(1): "l"
jit_var_new_literal(2): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(2): 1
jit_var_inc_ref_int(1): 1
jit_var_inc_ref_int(2): 1
jit_var_new(3 <- 1, 2): $r0 = and <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(3): 1
jit_var_new_literal(4): $r0_0 = insertelement <$w x $t0> undef, $t0 0, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(4): 1
jit_var_inc_ref_int(3): 1
jit_var_inc_ref_int(4): 1
jit_var_new(5 <- 3, 4): $r0 = icmp ne <$w x $t1> $r1, $r2
jit_var_inc_ref_ext(5): 1
jit_var_dec_ref_ext(4): 0
jit_var_dec_ref_ext(3): 0
jit_var_dec_ref_ext(2): 0
jit_var_set_label(5): "result"
jit_var_new(6): $r0_0 = insertelement <$w x $t0> undef, i32 $i, i32 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z$n$r0 = add <$w x $t0> $r0_1, $l0
jit_var_inc_ref_ext(6): 1
jit_var_inc_ref_ext(6): 2
jit_var_dec_ref_ext(6): 1
jit_var_set_label(6): "l2"
jit_var_new_literal(7): $r0_0 = insertelement <$w x $t0> undef, $t0 2, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(7): 1
jit_var_inc_ref_int(6): 1
jit_var_inc_ref_int(7): 1
jit_var_new(8 <- 6, 7): $r0 = mul <$w x $t0> $r1, $r2
jit_var_inc_ref_ext(8): 1
jit_var_new_literal(9): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(9): 1
jit_eval(): launching 1 kernel.
jit_assemble(size=1022): register map:
   - %r0 -> 1 "l"
   - %r1 -> 2 [scalar]
   - %r2 -> 3
   - %r3 -> 4 [scalar]
   - %p4 -> 5 "result" [out]
jit_malloc(type=host-async, size=1024): <@> (new allocation)
  -> launching <@> (n=1022, in=0, out=1, ops=5):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i8*
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Evaluate %r0: l
    %r0_0 = insertelement <8 x i32> undef, i32 %index, i32 0
    %r0_1 = shufflevector <8 x i32> %r0_0, <8 x i32> undef, <8 x i32> zeroinitializer
    %r0 = add <8 x i32> %r0_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>

    ; Evaluate %r1
    %r1_0 = insertelement <8 x i32> undef, i32 1, i32 0
    %r1 = shufflevector <8 x i32> %r1_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %r2
    %r2 = and <8 x i32> %r0, %r1

    ; Evaluate %r3
    %r3_0 = insertelement <8 x i32> undef, i32 0, i32 0
    %r3 = shufflevector <8 x i32> %r3_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %p4: result
    %p4 = icmp ne <8 x i32> %r2, %r3

    ; Store %p4: result
    %p4_i = getelementptr inbounds i8, i8* %a0, i32 %index
    %p4_p = bitcast i8* %p4_i to <8 x i8>*
    %p4_e = zext <8 x i1> %p4 to <8 x i8>
    store <8 x i8> %p4_e, <8 x i8>* %p4_p, align 8, !noalias !1

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 128 packets in 1 block ..
jit_eval(): cleaning up..
jit_var_dec_ref_int(3): 0
jit_var_free(3)
jit_var_dec_ref_int(1): 0
jit_var_dec_ref_int(2): 0
jit_var_free(2)
jit_var_dec_ref_int(4): 0
jit_var_free(4)
jit_eval(): done.
jit_var_inc_ref_ext(5): 2
jit_var_copy_ptr(10 <- 5): <@>
jit_var_inc_ref_ext(10): 1
jit_var_new(11): $r0_0 = insertelement <$w x $t0> undef, $t0 $i, $t0 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x $t0> $z$n$r0 = add <$w x $t0> $r0_1, $l0
jit_var_inc_ref_ext(11): 1
jit_var_inc_ref_int(11): 1
jit_var_new(12 <- 11): $r0_0 = insertelement <$w x $t1> undef, $t1 %end, $t1 0$n$r0_1 = shufflevector <$w x $t1> $r0_0, <$w x $t1> undef, <$w x $t1> $z$n$r0 = icmp ult <$w x $t1> $r1, $r0_1
jit_var_inc_ref_ext(12): 1
jit_var_dec_ref_ext(11): 0
jit_var_inc_ref_ext(12): 2
jit_var_dec_ref_ext(12): 1
jit_var_inc_ref_int(10): 1
jit_var_inc_ref_int(8): 1
jit_var_inc_ref_int(12): 1
jit_var_new(13 <- 10, 8, 12): $r0_0 = bitcast $t1 $r1 to i8*$n$r0_1 = getelementptr i8, i8* $r0_0, <$w x $t2> $r2$n$r0_2 = bitcast <$w x i8*> $r0_1 to <$w x i32*>$n$r0_3 = call <$w x i32> @llvm.masked.gather.v$wi32(<$w x i32*> $r0$S_2, i32 $s0, <$w x $t3> $r3, <$w x i32> $z)$n$r0 = trunc <$w x i32> $r0_3 to <$w x $t0>
jit_var_inc_ref_ext(13): 1
jit_var_dec_ref_ext(12): 0
jit_var_dec_ref_ext(10): 0
jit_var_dec_ref_ext(9): 0
jit_var_free(9)
jit_var_dec_ref_ext(8): 0
jit_var_dec_ref_ext(7): 0
jit_var_set_label(13): "even"
jit_var_new_literal(7): $r0_0 = insertelement <$w x $t0> undef, $t0 2, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z (reused)
jit_var_inc_ref_ext(7): 1
jit_var_inc_ref_int(6): 2
jit_var_inc_ref_int(7): 2
jit_var_dec_ref_int(6): 1
jit_var_dec_ref_int(7): 1
jit_var_new(8 <- 6, 7): $r0 = mul <$w x $t0> $r1, $r2 (reused)
jit_var_inc_ref_ext(8): 1
jit_var_new_literal(14): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(14): 1
jit_var_inc_ref_int(8): 2
jit_var_inc_ref_int(14): 1
jit_var_new(15 <- 8, 14): $r0 = add <$w x $t0> $r1, $r2
jit_var_inc_ref_ext(15): 1
jit_var_new_literal(16): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(16): 1
jit_var_inc_ref_ext(10): 1
jit_var_new(11): $r0_0 = insertelement <$w x $t0> undef, $t0 $i, $t0 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x $t0> $z$n$r0 = add <$w x $t0> $r0_1, $l0 (reused)
jit_var_inc_ref_ext(11): 1
jit_var_inc_ref_int(11): 2
jit_var_dec_ref_int(11): 1
jit_var_new(12 <- 11): $r0_0 = insertelement <$w x $t1> undef, $t1 %end, $t1 0$n$r0_1 = shufflevector <$w x $t1> $r0_0, <$w x $t1> undef, <$w x $t1> $z$n$r0 = icmp ult <$w x $t1> $r1, $r0_1 (reused)
jit_var_inc_ref_ext(12): 1
jit_var_dec_ref_ext(11): 0
jit_var_inc_ref_ext(12): 2
jit_var_dec_ref_ext(12): 1
jit_var_inc_ref_int(10): 2
jit_var_inc_ref_int(15): 1
jit_var_inc_ref_int(12): 2
jit_var_new(17 <- 10, 15, 12): $r0_0 = bitcast $t1 $r1 to i8*$n$r0_1 = getelementptr i8, i8* $r0_0, <$w x $t2> $r2$n$r0_2 = bitcast <$w x i8*> $r0_1 to <$w x i32*>$n$r0_3 = call <$w x i32> @llvm.masked.gather.v$wi32(<$w x i32*> $r0$S_2, i32 $s0, <$w x $t3> $r3, <$w x i32> $z)$n$r0 = trunc <$w x i32> $r0_3 to <$w x $t0>
jit_var_inc_ref_ext(17): 1
jit_var_dec_ref_ext(12): 0
jit_var_dec_ref_ext(10): 0
jit_var_dec_ref_ext(16): 0
jit_var_free(16)
jit_var_dec_ref_ext(15): 0
jit_var_dec_ref_ext(14): 0
jit_var_dec_ref_ext(8): 0
jit_var_dec_ref_ext(7): 0
jit_var_set_label(17): "odd"
Mask  : [0, 1, 0, 1, 0, .. 1012 skipped .., 1, 0, 1, 0, 1]
jit_eval(): launching 1 kernel.
jit_assemble(size=510): register map:
   - %r0 -> 6 "l2"
   - %r1 -> 7 [scalar]
   - %r2 -> 8
   - %r3 -> 11 [scalar]
   - %p4 -> 12 [scalar]
   - %rd5 -> 10 [scalar] [direct_pointer]
   - %p6 -> 13 "even" [out]
jit_malloc(type=host-async, size=512): <@> (new allocation)
  -> launching <@> (n=510, in=1, out=1, ops=7):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %rd5 = load i8*, i8** %a0_i, align 8, !alias.scope !1

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i8*
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Evaluate %r0: l2
    %r0_0 = insertelement <8 x i32> undef, i32 %index, i32 0
    %r0_1 = shufflevector <8 x i32> %r0_0, <8 x i32> undef, <8 x i32> zeroinitializer
    %r0 = add <8 x i32> %r0_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>

    ; Evaluate %r1
    %r1_0 = insertelement <8 x i32> undef, i32 2, i32 0
    %r1 = shufflevector <8 x i32> %r1_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %r2
    %r2 = mul <8 x i32> %r0, %r1

    ; Evaluate %r3
    %r3_0 = insertelement <8 x i32> undef, i32 %index, i32 0
    %r3_1 = shufflevector <8 x i32> %r3_0, <8 x i32> undef, <8 x i32> zeroinitializer
    %r3 = add <8 x i32> %r3_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>

    ; Evaluate %p4
    %p4_0 = insertelement <8 x i32> undef, i32 %end, i32 0
    %p4_1 = shufflevector <8 x i32> %p4_0, <8 x i32> undef, <8 x i32> zeroinitializer
    %p4 = icmp ult <8 x i32> %r3, %p4_1

    ; Evaluate %p6: even
    %p6_0 = bitcast i8* %rd5 to i8*
    %p6_1 = getelementptr i8, i8* %p6_0, <8 x i32> %r2
    %p6_2 = bitcast <8 x i8*> %p6_1 to <8 x i32*>
    %p6_3 = call <8 x i32> @llvm.masked.gather.v8i32(<8 x i32*> %p6_2, i32 1, <8 x i1> %p4, <8 x i32> zeroinitializer)
    %p6 = trunc <8 x i32> %p6_3 to <8 x i1>

    ; Store %p6: even
    %p6_i = getelementptr inbounds i8, i8* %a1, i32 %index
    %p6_p = bitcast i8* %p6_i to <8 x i8>*
    %p6_e = zext <8 x i1> %p6 to <8 x i8>
    store <8 x i8> %p6_e, <8 x i8>* %p6_p, align 8, !noalias !1

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

declare <8 x i32> @llvm.masked.gather.v8i32(<8 x i32*>, i32, <8 x i1>, <8 x i32>)

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 64 packets in 1 block ..
jit_eval(): cleaning up..
jit_var_dec_ref_int(10): 1
jit_var_dec_ref_int(8): 1
jit_var_dec_ref_int(12): 1
jit_eval(): done.
Even  : [0, 0, 0, 0, 0, .. 500 skipped .., 0, 0, 0, 0, 0]
jit_eval(): launching 1 kernel.
jit_assemble(size=510): register map:
   - %r0 -> 6 "l2"
   - %r1 -> 7 [scalar]
   - %r2 -> 8
   - %r3 -> 14 [scalar]
   - %r4 -> 15
   - %r5 -> 11 [scalar]
   - %p6 -> 12 [scalar]
   - %rd7 -> 10 [scalar] [direct_pointer]
   - %p8 -> 17 "odd" [out]
jit_malloc(type=host-async, size=512): <@> (new allocation)
  -> launching <@> (n=510, in=1, out=1, ops=9):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %rd7 = load i8*, i8** %a0_i, align 8, !alias.scope !1

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %a1_p = load i8*, i8** %a1_i, align 8, !alias.scope !1
    %a1 = bitcast i8* %a1_p to i8*
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Evaluate %r0: l2
    %r0_0 = insertelement <8 x i32> undef, i32 %index, i32 0
    %r0_1 = shufflevector <8 x i32> %r0_0, <8 x i32> undef, <8 x i32> zeroinitializer
    %r0 = add <8 x i32> %r0_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>

    ; Evaluate %r1
    %r1_0 = insertelement <8 x i32> undef, i32 2, i32 0
    %r1 = shufflevector <8 x i32> %r1_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %r2
    %r2 = mul <8 x i32> %r0, %r1

    ; Evaluate %r3
    %r3_0 = insertelement <8 x i32> undef, i32 1, i32 0
    %r3 = shufflevector <8 x i32> %r3_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %r4
    %r4 = add <8 x i32> %r2, %r3

    ; Evaluate %r5
    %r5_0 = insertelement <8 x i32> undef, i32 %index, i32 0
    %r5_1 = shufflevector <8 x i32> %r5_0, <8 x i32> undef, <8 x i32> zeroinitializer
    %r5 = add <8 x i32> %r5_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>

    ; Evaluate %p6
    %p6_0 = insertelement <8 x i32> undef, i32 %end, i32 0
    %p6_1 = shufflevector <8 x i32> %p6_0, <8 x i32> undef, <8 x i32> zeroinitializer
    %p6 = icmp ult <8 x i32> %r5, %p6_1

    ; Evaluate %p8: odd
    %p8_0 = bitcast i8* %rd7 to i8*
    %p8_1 = getelementptr i8, i8* %p8_0, <8 x i32> %r4
    %p8_2 = bitcast <8 x i8*> %p8_1 to <8 x i32*>
    %p8_3 = call <8 x i32> @llvm.masked.gather.v8i32(<8 x i32*> %p8_2, i32 1, <8 x i1> %p6, <8 x i32> zeroinitializer)
    %p8 = trunc <8 x i32> %p8_3 to <8 x i1>

    ; Store %p8: odd
    %p8_i = getelementptr inbounds i8, i8* %a1, i32 %index
    %p8_p = bitcast i8* %p8_i to <8 x i8>*
    %p8_e = zext <8 x i1> %p8 to <8 x i8>
    store <8 x i8> %p8_e, <8 x i8>* %p8_p, align 8, !noalias !1

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

declare <8 x i32> @llvm.masked.gather.v8i32(<8 x i32*>, i32, <8 x i1>, <8 x i32>)

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 64 packets in 1 block ..
jit_eval(): cleaning up..
jit_var_dec_ref_int(10): 0
jit_var_free(10)
jit_var_dec_ref_ext(5): 1
jit_var_dec_ref_int(15): 0
jit_var_free(15)
jit_var_dec_ref_int(8): 0
jit_var_free(8)
jit_var_dec_ref_int(6): 0
jit_var_dec_ref_int(7): 0
jit_var_free(7)
jit_var_dec_ref_int(14): 0
jit_var_free(14)
jit_var_dec_ref_int(12): 0
jit_var_free(12)
jit_var_dec_ref_int(11): 0
jit_var_free(11)
jit_eval(): done.
Odd   : [1, 1, 1, 1, 1, .. 500 skipped .., 1, 1, 1, 1, 1]
jit_var_new_literal(18): $r0_0 = insertelement <$w x $t0> undef, $t0 2, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(18): 1
jit_var_inc_ref_int(6): 1
jit_var_inc_ref_int(18): 1
jit_var_new(19 <- 6, 18): $r0 = mul <$w x $t0> $r1, $r2
jit_var_inc_ref_ext(19): 1
jit_var_new_literal(20): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(20): 1
jit_var_inc_ref_ext(5): 2
jit_var_copy_ptr(21 <- 5): <@>
jit_var_inc_ref_ext(21): 1
jit_var_inc_ref_int(17): 1
jit_var_new(22 <- 17): $r0 = zext <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(22): 1
jit_var_new(23): $r0_0 = insertelement <$w x $t0> undef, $t0 $i, $t0 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x $t0> $z$n$r0 = add <$w x $t0> $r0_1, $l0
jit_var_inc_ref_ext(23): 1
jit_var_inc_ref_int(23): 1
jit_var_new(24 <- 23): $r0_0 = insertelement <$w x $t1> undef, $t1 %end, $t1 0$n$r0_1 = shufflevector <$w x $t1> $r0_0, <$w x $t1> undef, <$w x $t1> $z$n$r0 = icmp ult <$w x $t1> $r1, $r0_1
jit_var_inc_ref_ext(24): 1
jit_var_dec_ref_ext(23): 0
jit_var_inc_ref_ext(24): 2
jit_var_dec_ref_ext(24): 1
jit_var_inc_ref_int(21): 1
jit_var_inc_ref_int(22): 1
jit_var_inc_ref_int(19): 1
jit_var_inc_ref_int(24): 1
jit_var_new(25 <- 21, 22, 19, 24): $r0_0 = bitcast $t1 $r1 to $t2*$n$r0_1 = getelementptr $t2, $t2* $r0_0, <$w x $t3> $r3$ncall void @llvm.masked.scatter.v$w$a2(<$w x $t2> $r2, <$w x $t2*> $r0$S_1, i32 $s1, <$w x $t4> $r4)
jit_var_inc_ref_ext(25): 1
jit_var_mark_scatter(25, 5)
jit_var_dec_ref_ext(24): 0
jit_var_dec_ref_ext(22): 0
jit_var_dec_ref_ext(21): 0
jit_var_dec_ref_ext(20): 0
jit_var_free(20)
jit_var_dec_ref_ext(19): 0
jit_var_dec_ref_ext(18): 0
jit_var_new_literal(18): $r0_0 = insertelement <$w x $t0> undef, $t0 2, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z (reused)
jit_var_inc_ref_ext(18): 1
jit_var_inc_ref_int(6): 2
jit_var_inc_ref_int(18): 2
jit_var_dec_ref_int(6): 1
jit_var_dec_ref_int(18): 1
jit_var_new(19 <- 6, 18): $r0 = mul <$w x $t0> $r1, $r2 (reused)
jit_var_inc_ref_ext(19): 1
jit_var_new_literal(26): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(26): 1
jit_var_inc_ref_int(19): 2
jit_var_inc_ref_int(26): 1
jit_var_new(27 <- 19, 26): $r0 = add <$w x $t0> $r1, $r2
jit_var_inc_ref_ext(27): 1
jit_var_new_literal(28): $r0_0 = insertelement <$w x $t0> undef, $t0 1, i32 0$n$r0 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x i32> $z
jit_var_inc_ref_ext(28): 1
jit_var_inc_ref_ext(21): 1
jit_var_inc_ref_int(13): 1
jit_var_new(29 <- 13): $r0 = zext <$w x $t1> $r1 to <$w x $t0>
jit_var_inc_ref_ext(29): 1
jit_var_new(23): $r0_0 = insertelement <$w x $t0> undef, $t0 $i, $t0 0$n$r0_1 = shufflevector <$w x $t0> $r0_0, <$w x $t0> undef, <$w x $t0> $z$n$r0 = add <$w x $t0> $r0_1, $l0 (reused)
jit_var_inc_ref_ext(23): 1
jit_var_inc_ref_int(23): 2
jit_var_dec_ref_int(23): 1
jit_var_new(24 <- 23): $r0_0 = insertelement <$w x $t1> undef, $t1 %end, $t1 0$n$r0_1 = shufflevector <$w x $t1> $r0_0, <$w x $t1> undef, <$w x $t1> $z$n$r0 = icmp ult <$w x $t1> $r1, $r0_1 (reused)
jit_var_inc_ref_ext(24): 1
jit_var_dec_ref_ext(23): 0
jit_var_inc_ref_ext(24): 2
jit_var_dec_ref_ext(24): 1
jit_var_inc_ref_int(21): 2
jit_var_inc_ref_int(29): 1
jit_var_inc_ref_int(27): 1
jit_var_inc_ref_int(24): 2
jit_var_new(30 <- 21, 29, 27, 24): $r0_0 = bitcast $t1 $r1 to $t2*$n$r0_1 = getelementptr $t2, $t2* $r0_0, <$w x $t3> $r3$ncall void @llvm.masked.scatter.v$w$a2(<$w x $t2> $r2, <$w x $t2*> $r0$S_1, i32 $s1, <$w x $t4> $r4)
jit_var_inc_ref_ext(30): 1
jit_var_mark_scatter(30, 5)
jit_var_dec_ref_ext(24): 0
jit_var_dec_ref_ext(29): 0
jit_var_dec_ref_ext(21): 0
jit_var_dec_ref_ext(28): 0
jit_var_free(28)
jit_var_dec_ref_ext(27): 0
jit_var_dec_ref_ext(26): 0
jit_var_dec_ref_ext(19): 0
jit_var_dec_ref_ext(18): 0
jit_eval(): launching 1 kernel.
jit_assemble(size=510): register map:
   - %r0 -> 6 "l2"
   - %r1 -> 18 [scalar]
   - %r2 -> 19
   - %r3 -> 23 [scalar]
   - %p4 -> 24 [scalar]
   - %p5 -> 17 "odd" [in]
   - %b6 -> 22
   - %rd7 -> 21 [scalar] [direct_pointer]
   - %u8 -> 25 [scat]
   - %r9 -> 26 [scalar]
   - %r10 -> 27
   - %p11 -> 13 "even" [in]
   - %b12 -> 29
   - %u13 -> 30 [scat]
  -> launching <@> (n=510, in=3, out=2, ops=14):
define void @enoki_<@>(i32 %start, i32 %end, i8** %ptrs) #0 alignstack(32) {
entry:

    ; Prepare argument 0
    %a0_i = getelementptr inbounds i8*, i8** %ptrs, i32 0
    %a0_p = load i8*, i8** %a0_i, align 8, !alias.scope !1
    %a0 = bitcast i8* %a0_p to i8*

    ; Prepare argument 1
    %a1_i = getelementptr inbounds i8*, i8** %ptrs, i32 1
    %rd7 = load i8*, i8** %a1_i, align 8, !alias.scope !1

    ; Prepare argument 2
    %a2_i = getelementptr inbounds i8*, i8** %ptrs, i32 2
    %a2_p = load i8*, i8** %a2_i, align 8, !alias.scope !1
    %a2 = bitcast i8* %a2_p to i8*
    br label %loop

loop:
    %index = phi i32 [ %index_next, %loop_suffix ], [ %start, %entry ]

    ; Evaluate %r0: l2
    %r0_0 = insertelement <8 x i32> undef, i32 %index, i32 0
    %r0_1 = shufflevector <8 x i32> %r0_0, <8 x i32> undef, <8 x i32> zeroinitializer
    %r0 = add <8 x i32> %r0_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>

    ; Evaluate %r1
    %r1_0 = insertelement <8 x i32> undef, i32 2, i32 0
    %r1 = shufflevector <8 x i32> %r1_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %r2
    %r2 = mul <8 x i32> %r0, %r1

    ; Evaluate %r3
    %r3_0 = insertelement <8 x i32> undef, i32 %index, i32 0
    %r3_1 = shufflevector <8 x i32> %r3_0, <8 x i32> undef, <8 x i32> zeroinitializer
    %r3 = add <8 x i32> %r3_1, <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>

    ; Evaluate %p4
    %p4_0 = insertelement <8 x i32> undef, i32 %end, i32 0
    %p4_1 = shufflevector <8 x i32> %p4_0, <8 x i32> undef, <8 x i32> zeroinitializer
    %p4 = icmp ult <8 x i32> %r3, %p4_1

    ; Load %p5: odd
    %p5_i = getelementptr inbounds i8, i8* %a0, i32 %index
    %p5_p = bitcast i8* %p5_i to <8 x i8>*
    %p5_z = load <8 x i8>, <8 x i8>* %p5_p, align 8, !alias.scope !1
    %p5 = trunc <8 x i8> %p5_z to <8 x i1>

    ; Evaluate %b6
    %b6 = zext <8 x i1> %p5 to <8 x i8>
    %u8_0 = bitcast i8* %rd7 to i8*
    %u8_1 = getelementptr i8, i8* %u8_0, <8 x i32> %r2
    call void @llvm.masked.scatter.v8i8(<8 x i8> %b6, <8 x i8*> %u8_1, i32 8, <8 x i1> %p4)

    ; Evaluate %r9
    %r9_0 = insertelement <8 x i32> undef, i32 1, i32 0
    %r9 = shufflevector <8 x i32> %r9_0, <8 x i32> undef, <8 x i32> zeroinitializer

    ; Evaluate %r10
    %r10 = add <8 x i32> %r2, %r9

    ; Load %p11: even
    %p11_i = getelementptr inbounds i8, i8* %a2, i32 %index
    %p11_p = bitcast i8* %p11_i to <8 x i8>*
    %p11_z = load <8 x i8>, <8 x i8>* %p11_p, align 8, !alias.scope !1
    %p11 = trunc <8 x i8> %p11_z to <8 x i1>

    ; Evaluate %b12
    %b12 = zext <8 x i1> %p11 to <8 x i8>
    %u13_0 = bitcast i8* %rd7 to i8*
    %u13_1 = getelementptr i8, i8* %u13_0, <8 x i32> %r10
    call void @llvm.masked.scatter.v8i8(<8 x i8> %b12, <8 x i8*> %u13_1, i32 8, <8 x i1> %p4)

    br label %loop_suffix

loop_suffix:
    %index_next = add i32 %index, 8
    %cond = icmp uge i32 %index_next, %end
    br i1 %cond, label %done, label %loop, !llvm.loop !2

done:
    ret void
}

declare void @llvm.masked.scatter.v8i8(<8 x i8>, <8 x i8*>, i32, <8 x i1>)

!0 = !{!0}
!1 = !{!1, !0}
!2 = !{!"llvm.loop.unroll.disable", !"llvm.loop.vectorize.enable", i1 0}

attributes #0 = { norecurse nounwind "target-cpu"="skylake" "stack-probe-size"="1073741824" }
jit_run(): scheduling 64 packets in 1 block ..
jit_eval(): cleaning up..
jit_var_dec_ref_ext(25): 0
jit_var_free(25)
jit_var_dec_ref_int(21): 1
jit_var_dec_ref_int(22): 0
jit_var_free(22)
jit_var_dec_ref_int(17): 0
jit_var_dec_ref_int(19): 1
jit_var_dec_ref_int(24): 1
jit_var_dec_ref_ext(30): 0
jit_var_free(30)
jit_var_dec_ref_int(21): 0
jit_var_free(21)
jit_var_dec_ref_ext(5): 1
jit_var_dec_ref_int(29): 0
jit_var_free(29)
jit_var_dec_ref_int(13): 0
jit_var_dec_ref_int(27): 0
jit_var_free(27)
jit_var_dec_ref_int(19): 0
jit_var_free(19)
jit_var_dec_ref_int(6): 0
jit_var_dec_ref_int(18): 0
jit_var_free(18)
jit_var_dec_ref_int(26): 0
jit_var_free(26)
jit_var_dec_ref_int(24): 0
jit_var_free(24)
jit_var_dec_ref_int(23): 0
jit_var_free(23)
jit_eval(): done.
Mask: [1, 0, 1, 0, 1, .. 1012 skipped .., 0, 1, 0, 0, 1]
jit_var_dec_ref_ext(17): 0
jit_var_free(17)
jit_free(<@>, type=host-async, size=512)
jit_var_dec_ref_ext(13): 0
jit_var_free(13)
jit_free(<@>, type=host-async, size=512)
jit_var_dec_ref_ext(6): 0
jit_var_free(6)
jit_var_dec_ref_ext(5): 0
jit_var_free(5)
jit_free(<@>, type=host-async, size=1024)
jit_var_dec_ref_ext(1): 0
jit_var_free(1)
jit_free_flush(): scheduling 3 deallocations
jit_shutdown(): releasing 4 kernels ..
jit_shutdown(): releasing 1 thread state ..
jit_malloc_trim(): freed
 - host-async memory: 2 KiB in 3 allocations
jit_shutdown(): done
