jit_optix_init(): loaded OptiX (via 7.2 ABI).
jit_malloc(type=host-pinned, size=64): <@> (new allocation)
jit_malloc(type=host-pinned, size=64): <@> (new allocation)
jit_malloc(type=device, device=0, size=64): <@> (new allocation)
jit_malloc_migrate(<@> -> <@>, host-pinned -> device)
jit_free(<@>, type=host-pinned, size=64)
jit_malloc(type=device, device=0, size=64): <@> (new allocation)
jit_malloc_migrate(<@> -> <@>, host-pinned -> device)
jit_free(<@>, type=host-pinned, size=64)
jit_optix_configure()
jit_var_new(1): mov.u32 $r0, $i
jit_var_inc_ref_ext(1): 1
jit_var_inc_ref_int(1): 1
jit_var_new(2 <- 1): cvt.rn.$t0.$t1 $r0, $r1
jit_var_inc_ref_ext(2): 1
jit_var_dec_ref_ext(1): 0
jit_var_schedule(2)
jit_eval(): launching 1 kernel.
jit_assemble(size=10): register map:
   - %r4 -> 1
   - %f5 -> 2 [out]
jit_malloc(type=device, device=0, size=64): <@> (new allocation)
  -> launching <@> (n=10, in=0, out=1, ops=6):
.version 6.0
.target sm_50
.address_size 64

.entry enoki_<@>(.param .align 8 .b8 params[16]) {
    .reg.b8   %b <6>; .reg.b16 %w<6>; .reg.b32 %r<6>;
    .reg.b64  %rd<6>; .reg.f32 %f<6>; .reg.f64 %d<6>;
    .reg.pred %p <6>;

    mov.u32 %r0, %ctaid.x;
    mov.u32 %r1, %ntid.x;
    mov.u32 %r2, %tid.x;
    mad.lo.u32 %r0, %r0, %r1, %r2;
    ld.param.u32 %r2, [params];
    setp.ge.u32 %p0, %r0, %r2;
    @%p0 bra L0;

    mov.u32 %r3, %nctaid.x;
    mul.lo.u32 %r1, %r3, %r1;

L1: // Loop body

    // Evaluate %r4
    mov.u32 %r4, %r0;

    // Evaluate %f5
    cvt.rn.f32.u32 %f5, %r4;

    // Store %f5
    ld.param.u64 %rd0, [params+8];
    mad.wide.u32 %rd0, %r0, 4, %rd0;
    st.global.cs.f32 [%rd0], %f5;

    add.u32 %r0, %r0, %r1;
    setp.ge.u32 %p0, %r0, %r2;
    @!%p0 bra L1;

L0:
    ret;
}
jit_eval(): cleaning up..
jit_var_dec_ref_int(1): 0
jit_var_free(1)
jit_free_flush(): scheduling 2 deallocations
jit_eval(): done.
jit_var_inc_ref_ext(2): 2
jit_registry_put(<@>, domain="Base"): 1 (new)
jit_registry_put(<@>, domain="Base"): 2 (new)
jit_var_new_literal(3): mov.$b0 $r0, 0x3f800000
jit_var_inc_ref_ext(3): 1
jit_var_new_literal(4): mov.$b0 $r0, 0x40000000
jit_var_inc_ref_ext(4): 1
jit_var_new(5): mov.u32 $r0, $i
jit_var_inc_ref_ext(5): 1
jit_var_inc_ref_ext(5): 2
jit_var_dec_ref_ext(5): 1
jit_var_inc_ref_ext(5): 2
jit_var_new_literal(6): mov.$b0 $r0, 0x0
jit_var_inc_ref_ext(6): 1
jit_var_new_literal(6): mov.$b0 $r0, 0x0 (reused)
jit_var_inc_ref_ext(6): 2
jit_var_map_mem(7): <@>, size=1, free=0
jit_var_inc_ref_ext(7): 1
jit_var_map_mem(8): <@>, size=1, free=0
jit_var_inc_ref_ext(8): 1
jit_var_inc_ref_ext(6): 3
jit_var_inc_ref_ext(6): 4
jit_var_new(9): .visible .func (.param .align 4 .b8 out[8])               func_<@>(.param .align 4 .b8 params[8], .reg .u64 extra) {
    .reg.b8   %b <5>; .reg.b16 %w<5>; .reg.b32 %r<5>;
    .reg.b64  %rd<5>; .reg.f32 %f<5>; .reg.f64 %d<5>;
    .reg.pred %p <5>;


    // Evaluate %f4
    mov.b32 %f4, 0x0;
    st.param.f32 [out+0], %f4;
    st.param.f32 [out+4], %f4;
    ret;
}

jit_var_inc_ref_ext(9): 1
jit_var_dec_ref_ext(6): 3
jit_var_dec_ref_ext(6): 2
jit_var_dec_ref_ext(8): 0
jit_var_free(8)
jit_var_dec_ref_ext(7): 0
jit_var_free(7)
jit_var_map_mem(10): <@>, size=1, free=0
jit_var_inc_ref_ext(10): 1
jit_var_map_mem(11): <@>, size=1, free=0
jit_var_inc_ref_ext(11): 1
jit_var_inc_ref_ext(10): 2
jit_var_inc_ref_ext(11): 2
jit_var_new_literal(12): mov.$b0 $r0, 0x5
jit_var_inc_ref_ext(12): 1
jit_var_new_literal(13): mov.$b0 $r0, 0x1
jit_var_inc_ref_ext(13): 1
jit_var_inc_ref_ext(2): 3
jit_var_copy_ptr(14 <- 2): <@>
jit_var_inc_ref_ext(14): 1
jit_var_inc_ref_int(14): 1
jit_var_inc_ref_int(11): 1
jit_var_inc_ref_int(12): 1
jit_var_new(15 <- 14, 11, 12): mad.wide.$t3 %rd3, $r3, $s2, $r1$nst.global.$t2 [%rd3], $r2
jit_var_inc_ref_ext(15): 1
jit_var_mark_scatter(15, 2)
jit_var_dec_ref_ext(14): 0
jit_var_dec_ref_ext(13): 0
jit_var_free(13)
jit_var_dec_ref_ext(12): 0
jit_var_inc_ref_int(10): 1
jit_var_inc_ref_int(11): 2
jit_var_new(16 <- 10, 11): add.ftz.$t0 $r0, $r1, $r2
jit_var_inc_ref_ext(16): 1
jit_var_inc_ref_int(10): 2
jit_var_inc_ref_int(11): 3
jit_var_inc_ref_int(11): 4
jit_var_new(17 <- 10, 11, 11): fma.rn.ftz.$t0 $r0, $r1, $r2, $r3
jit_var_inc_ref_ext(17): 1
jit_var_dec_ref_ext(11): 1
jit_var_dec_ref_ext(10): 1
jit_var_inc_ref_ext(14): 1
jit_var_new(18): .visible .func (.param .align 4 .b8 out[8])               func_<@>(.param .align 4 .b8 params[8], .reg .u64 extra) {
    .reg.b8   %b <11>; .reg.b16 %w<11>; .reg.b32 %r<11>;
    .reg.b64  %rd<11>; .reg.f32 %f<11>; .reg.f64 %d<11>;
    .reg.pred %p <11>;


    // Load %f4
    ld.param.f32 %f4, [params+0];

    // Load %f5
    ld.param.f32 %f5, [params+4];

    // Evaluate %f6
    add.ftz.f32 %f6, %f4, %f5;

    // Evaluate %f7
    fma.rn.ftz.f32 %f7, %f4, %f5, %f5;

    // Evaluate %r8
    mov.b32 %r8, 0x5;

    // Evaluate %rd9
    ld.global.nc.u64 %rd9, [extra+0];
    mad.wide.u32 %rd3, %r8, 4, %rd9;
    st.global.f32 [%rd3], %f5;
    st.param.f32 [out+0], %f6;
    st.param.f32 [out+4], %f7;
    ret;
}

jit_var_inc_ref_ext(18): 1
jit_var_dec_ref_ext(15): 0
jit_var_free(15)
jit_var_dec_ref_int(14): 0
jit_var_dec_ref_int(11): 3
jit_var_dec_ref_int(12): 0
jit_var_free(12)
jit_var_dec_ref_ext(17): 0
jit_var_free(17)
jit_var_dec_ref_int(10): 1
jit_var_dec_ref_int(11): 2
jit_var_dec_ref_int(11): 1
jit_var_dec_ref_ext(16): 0
jit_var_free(16)
jit_var_dec_ref_int(10): 0
jit_var_dec_ref_int(11): 0
jit_var_dec_ref_ext(11): 0
jit_var_free(11)
jit_var_dec_ref_ext(10): 0
jit_var_free(10)
jit_var_map_mem(19): <@>, size=1, free=0
jit_var_inc_ref_ext(19): 1
jit_var_map_mem(20): <@>, size=1, free=0
jit_var_inc_ref_ext(20): 1
jit_var_inc_ref_ext(19): 2
jit_var_inc_ref_ext(20): 2
jit_var_inc_ref_int(19): 1
jit_var_inc_ref_int(20): 1
jit_var_new(21 <- 19, 20): mul.ftz.$t0 $r0, $r1, $r2
jit_var_inc_ref_ext(21): 1
jit_var_inc_ref_int(19): 2
jit_var_inc_ref_int(20): 2
jit_var_new(22 <- 19, 20): sub.ftz.$t0 $r0, $r1, $r2
jit_var_inc_ref_ext(22): 1
jit_var_dec_ref_ext(20): 1
jit_var_dec_ref_ext(19): 1
jit_var_new(23): .visible .func (.param .align 4 .b8 out[8])               func_<@>(.param .align 4 .b8 params[8], .reg .u64 extra) {
    .reg.b8   %b <8>; .reg.b16 %w<8>; .reg.b32 %r<8>;
    .reg.b64  %rd<8>; .reg.f32 %f<8>; .reg.f64 %d<8>;
    .reg.pred %p <8>;


    // Load %f4
    ld.param.f32 %f4, [params+0];

    // Load %f5
    ld.param.f32 %f5, [params+4];

    // Evaluate %f6
    mul.ftz.f32 %f6, %f4, %f5;

    // Evaluate %f7
    sub.ftz.f32 %f7, %f4, %f5;
    st.param.f32 [out+0], %f6;
    st.param.f32 [out+4], %f7;
    ret;
}

jit_var_inc_ref_ext(23): 1
jit_var_dec_ref_ext(22): 0
jit_var_free(22)
jit_var_dec_ref_int(19): 1
jit_var_dec_ref_int(20): 1
jit_var_dec_ref_ext(21): 0
jit_var_free(21)
jit_var_dec_ref_int(19): 0
jit_var_dec_ref_int(20): 0
jit_var_dec_ref_ext(20): 0
jit_var_free(20)
jit_var_dec_ref_ext(19): 0
jit_var_free(19)
jit_var_vcall(): 3 instances, 2 in, 2 out, 1 extra, side effects.
jit_var_new(24): 
jit_var_inc_ref_ext(24): 1
jit_var_inc_ref_int(9): 1
jit_var_inc_ref_int(24): 1
jit_var_new(25 <- 9, 24): 
jit_var_inc_ref_ext(25): 1
jit_var_dec_ref_ext(24): 0
jit_var_dec_ref_ext(9): 0
jit_var_inc_ref_int(18): 1
jit_var_inc_ref_int(25): 1
jit_var_new(26 <- 18, 25): 
jit_var_inc_ref_ext(26): 1
jit_var_dec_ref_ext(25): 0
jit_var_dec_ref_ext(18): 0
jit_var_inc_ref_int(23): 1
jit_var_inc_ref_int(26): 1
jit_var_new(27 <- 23, 26): 
jit_var_inc_ref_ext(27): 1
jit_var_dec_ref_ext(26): 0
jit_var_dec_ref_ext(23): 0
jit_var_inc_ref_int(27): 1
jit_var_new(28 <- 27): .global .u64 $r0[] = { func_<@>, func_<@>, func_<@> };

jit_var_inc_ref_ext(28): 1
jit_var_inc_ref_int(5): 1
jit_var_inc_ref_int(28): 1
jit_var_new(29 <- 5, 28): // indirect call via table $r2: 054104e62ea9d7fc, bc6c60f31b08a550, 5f9dbfe80eee64ab
    // OptiX variant:
    // add.u32 %r3, $r1, sbt_id_offset;
    // call ($r0), _optix_call_direct_callable, (%r3);
    // CUDA variant:
       mov.$t0 $r0, $r2;
       mad.wide.u32 $r0, $r1, 8, $r0;
       ld.global.$t0 $r0, [$r0]
jit_var_inc_ref_ext(29): 1
jit_var_inc_ref_int(27): 2
jit_var_new(30 <- 27): 
jit_var_inc_ref_ext(30): 1
jit_var_dec_ref_ext(27): 0
jit_malloc(type=device, device=0, size=64): <@> (new allocation)
jit_malloc(type=host-pinned, size=64): <@> (reused global)
jit_free(<@>, type=host-pinned, size=64)
jit_var_map_mem(31): <@>, size=3, free=1
jit_var_inc_ref_ext(31): 1
jit_var_copy_mem(31, size=3)
jit_malloc(type=device, device=0, size=64): <@> (new allocation)
jit_malloc(type=host-pinned, size=64): <@> (reused global)
jit_free(<@>, type=host-pinned, size=64)
jit_var_map_mem(32): <@>, size=1, free=1
jit_var_inc_ref_ext(32): 1
jit_var_copy_mem(32, size=1)
jit_var_inc_ref_ext(31): 2
jit_var_copy_ptr(33 <- 31): <@>
jit_var_inc_ref_ext(33): 1
jit_var_inc_ref_ext(32): 2
jit_var_copy_ptr(34 <- 32): <@>
jit_var_inc_ref_ext(34): 1
jit_var_dec_ref_ext(31): 1
jit_var_dec_ref_ext(32): 1
jit_var_inc_ref_int(5): 2
jit_var_inc_ref_int(33): 1
jit_var_inc_ref_int(34): 1
jit_var_new(35 <- 5, 33, 34): mad.wide.u32 $r0, $r1, 4, $r2$nld.global.nc.u32 %rd3, [$r0]$nadd.u64 $r0, $r3, %rd3
jit_var_inc_ref_ext(35): 1
jit_var_dec_ref_ext(33): 0
jit_var_dec_ref_ext(34): 0
jit_var_inc_ref_int(29): 1
jit_var_inc_ref_int(35): 1
jit_var_inc_ref_int(30): 1
jit_var_new(36 <- 29, 35, 30): 
jit_var_inc_ref_ext(36): 1
jit_var_dec_ref_ext(29): 0
jit_var_dec_ref_ext(35): 0
jit_var_dec_ref_ext(30): 0
jit_var_inc_ref_ext(3): 2
jit_var_inc_ref_int(3): 1
jit_var_inc_ref_int(36): 1
jit_var_new(37 <- 3, 36): 
jit_var_inc_ref_ext(37): 1
jit_var_dec_ref_ext(3): 1
jit_var_dec_ref_ext(36): 0
jit_var_inc_ref_ext(4): 2
jit_var_inc_ref_int(4): 1
jit_var_inc_ref_int(37): 1
jit_var_new(38 <- 4, 37): 
jit_var_inc_ref_ext(38): 1
jit_var_dec_ref_ext(4): 1
jit_var_dec_ref_ext(37): 0
jit_var_inc_ref_int(38): 1
jit_var_new(39 <- 38): 
    {
        .param .align 4 .b8 param_out[8];
        .param .align 4 .b8 param_in[8];
        Fproto: .callprototype (.param .align 4 .b8 _[8]) _ (.param .align 4 .b8 _[8], .reg .u64 _);

jit_var_inc_ref_ext(39): 1
jit_var_dec_ref_ext(38): 0
jit_var_inc_ref_int(3): 2
jit_var_inc_ref_int(39): 1
jit_var_new(40 <- 3, 39):     st.param.$t1 [param_in+0], $r1
jit_var_inc_ref_ext(40): 1
jit_var_dec_ref_ext(39): 0
jit_var_inc_ref_int(4): 2
jit_var_inc_ref_int(40): 1
jit_var_new(41 <- 4, 40):     st.param.$t1 [param_in+4], $r1
jit_var_inc_ref_ext(41): 1
jit_var_dec_ref_ext(40): 0
jit_var_inc_ref_int(29): 2
jit_var_inc_ref_int(35): 2
jit_var_inc_ref_int(41): 1
jit_var_new(42 <- 29, 35, 41):     call (param_out), $r1, (param_in, $r2), Fproto
jit_var_inc_ref_ext(42): 1
jit_var_dec_ref_ext(28): 0
jit_var_dec_ref_ext(41): 0
jit_var_inc_ref_int(42): 1
jit_var_new(43 <- 42):     ld.param.$t0 $r0, [param_out+0]
jit_var_inc_ref_ext(43): 1
jit_var_dec_ref_ext(42): 0
jit_var_inc_ref_int(43): 1
jit_var_new(44 <- 43):     ld.param.$t0 $r0, [param_out+4]
jit_var_inc_ref_ext(44): 1
jit_var_dec_ref_ext(43): 0
jit_var_inc_ref_int(44): 1
jit_var_new(45 <- 44): }

jit_var_inc_ref_ext(45): 1
jit_var_dec_ref_ext(44): 0
jit_var_inc_ref_ext(45): 2
jit_var_mark_scatter(45, 0)
jit_var_inc_ref_int(43): 2
jit_var_inc_ref_int(45): 1
jit_var_new(46 <- 43, 45): mov.$t0 $r0, $r1
jit_var_inc_ref_ext(46): 1
jit_var_inc_ref_int(44): 2
jit_var_inc_ref_int(45): 2
jit_var_new(47 <- 44, 45): mov.$t0 $r0, $r1
jit_var_inc_ref_ext(47): 1
jit_var_dec_ref_ext(45): 1
jit_var_dec_ref_ext(6): 1
jit_var_dec_ref_ext(6): 0
jit_var_free(6)
jit_var_dec_ref_ext(5): 1
jit_var_schedule(46)
jit_var_schedule(47)
jit_eval(): launching 1 kernel.
jit_assemble(size=3): register map:
   - gl4 -> 9 [scalar]
   - gl5 -> 18 [scalar]
   - gl6 -> 23 [scalar]
   - gl7 -> 28 [scalar]
   - %u8 -> 24 [scalar]
   - %u9 -> 25 [scalar]
   - %u10 -> 26 [scalar]
   - %u11 -> 27 [scalar]
   - %r12 -> 5
   - %rd13 -> 29
   - %u14 -> 30 [scalar]
   - %rd15 -> 33 [scalar] [direct_pointer]
   - %rd16 -> 34 [scalar] [direct_pointer]
   - %rd17 -> 35
   - %u18 -> 36
   - %f19 -> 3 [scalar]
   - %u20 -> 37
   - %f21 -> 4 [scalar]
   - %u22 -> 38
   - %u23 -> 39
   - %u24 -> 40
   - %u25 -> 41
   - %u26 -> 42
   - %f27 -> 43
   - %f28 -> 44
   - %u29 -> 45 [scat]
   - %f30 -> 46 [out]
jit_malloc(type=device, device=0, size=64): <@> (new allocation)
   - %f31 -> 47 [out]
jit_malloc(type=device, device=0, size=64): <@> (new allocation)
jit_malloc(type=host-pinned, size=64): <@> (new allocation)
jit_malloc(type=device, device=0, size=64): <@> (new allocation)
jit_free(<@>, type=host-pinned, size=64)
  -> launching <@> (via OptiX, n=3, in=2, out=3, ops=32):
.version 6.0
.target sm_50
.address_size 64

.visible .func (.param .align 4 .b8 out[8])               func_<@>(.param .align 4 .b8 params[8], .reg .u64 extra) {
    .reg.b8   %b <5>; .reg.b16 %w<5>; .reg.b32 %r<5>;
    .reg.b64  %rd<5>; .reg.f32 %f<5>; .reg.f64 %d<5>;
    .reg.pred %p <5>;


    // Evaluate %f4
    mov.b32 %f4, 0x0;
    st.param.f32 [out+0], %f4;
    st.param.f32 [out+4], %f4;
    ret;
}


.visible .func (.param .align 4 .b8 out[8])               func_<@>(.param .align 4 .b8 params[8], .reg .u64 extra) {
    .reg.b8   %b <11>; .reg.b16 %w<11>; .reg.b32 %r<11>;
    .reg.b64  %rd<11>; .reg.f32 %f<11>; .reg.f64 %d<11>;
    .reg.pred %p <11>;


    // Load %f4
    ld.param.f32 %f4, [params+0];

    // Load %f5
    ld.param.f32 %f5, [params+4];

    // Evaluate %f6
    add.ftz.f32 %f6, %f4, %f5;

    // Evaluate %f7
    fma.rn.ftz.f32 %f7, %f4, %f5, %f5;

    // Evaluate %r8
    mov.b32 %r8, 0x5;

    // Evaluate %rd9
    ld.global.nc.u64 %rd9, [extra+0];
    mad.wide.u32 %rd3, %r8, 4, %rd9;
    st.global.f32 [%rd3], %f5;
    st.param.f32 [out+0], %f6;
    st.param.f32 [out+4], %f7;
    ret;
}


.visible .func (.param .align 4 .b8 out[8])               func_<@>(.param .align 4 .b8 params[8], .reg .u64 extra) {
    .reg.b8   %b <8>; .reg.b16 %w<8>; .reg.b32 %r<8>;
    .reg.b64  %rd<8>; .reg.f32 %f<8>; .reg.f64 %d<8>;
    .reg.pred %p <8>;


    // Load %f4
    ld.param.f32 %f4, [params+0];

    // Load %f5
    ld.param.f32 %f5, [params+4];

    // Evaluate %f6
    mul.ftz.f32 %f6, %f4, %f5;

    // Evaluate %f7
    sub.ftz.f32 %f7, %f4, %f5;
    st.param.f32 [out+0], %f6;
    st.param.f32 [out+4], %f7;
    ret;
}


.global .u64 gl7[] = { func_<@>, func_<@>, func_<@> };


.const .align 8 .b8 params[40];

.entry __raygen__enoki_<@>() {
    .reg.b8   %b <32>; .reg.b16 %w<32>; .reg.b32 %r<32>;
    .reg.b64  %rd<32>; .reg.f32 %f<32>; .reg.f64 %d<32>;
    .reg.pred %p <32>;

    call (%r0), _optix_get_launch_index_x, ();

    // Evaluate %r12
    mov.u32 %r12, %r0;

    // Evaluate %rd13
    // indirect call via table gl7: 054104e62ea9d7fc, bc6c60f31b08a550, 5f9dbfe80eee64ab
    // OptiX variant:
    // add.u32 %r3, %r12, sbt_id_offset;
    // call (%rd13), _optix_call_direct_callable, (%r3);
    // CUDA variant:
       mov.u64 %rd13, gl7;
       mad.wide.u32 %rd13, %r12, 8, %rd13;
       ld.global.u64 %rd13, [%rd13];

    // Load %rd15
    ld.const.u64 %rd15, [params+8];

    // Load %rd16
    ld.const.u64 %rd16, [params+16];

    // Evaluate %rd17
    mad.wide.u32 %rd17, %r12, 4, %rd15;
    ld.global.nc.u32 %rd3, [%rd17];
    add.u64 %rd17, %rd16, %rd3;

    // Evaluate %f19
    mov.b32 %f19, 0x3f800000;

    // Evaluate %f21
    mov.b32 %f21, 0x40000000;
    
    {
        .param .align 4 .b8 param_out[8];
        .param .align 4 .b8 param_in[8];
        Fproto: .callprototype (.param .align 4 .b8 _[8]) _ (.param .align 4 .b8 _[8], .reg .u64 _);

        st.param.f32 [param_in+0], %f19;
        st.param.f32 [param_in+4], %f21;
        call (param_out), %rd13, (param_in, %rd17), Fproto;

    // Evaluate %f27
        ld.param.f32 %f27, [param_out+0];

    // Evaluate %f28
        ld.param.f32 %f28, [param_out+4];
    }


    // Evaluate %f30
    mov.f32 %f30, %f27;

    // Store %f30
    ld.const.u64 %rd0, [params+24];
    mad.wide.u32 %rd0, %r0, 4, %rd0;
    st.global.cs.f32 [%rd0], %f30;

    // Evaluate %f31
    mov.f32 %f31, %f28;

    // Store %f31
    ld.const.u64 %rd0, [params+32];
    mad.wide.u32 %rd0, %r0, 4, %rd0;
    st.global.cs.f32 [%rd0], %f31;
    ret;
}
jit_malloc(type=host, size=128): <@> (new allocation)
jit_malloc(type=device, device=0, size=128): <@> (new allocation)
jit_malloc_migrate(<@> -> <@>, host -> device)
jit_malloc(type=host-pinned, size=128): <@> (new allocation)
jit_free(<@>, type=host-pinned, size=128)
jit_free(<@>, type=host, size=128)
jit_free(<@>, type=device, device=0, size=64)
jit_eval(): cleaning up..
jit_var_dec_ref_ext(45): 0
jit_var_dec_ref_int(44): 1
jit_var_dec_ref_int(43): 1
jit_var_dec_ref_int(45): 1
jit_var_dec_ref_int(44): 0
jit_var_free(44)
jit_var_dec_ref_int(43): 0
jit_var_free(43)
jit_var_dec_ref_int(42): 0
jit_var_free(42)
jit_var_dec_ref_int(29): 1
jit_var_dec_ref_int(35): 1
jit_var_dec_ref_int(41): 0
jit_var_free(41)
jit_var_dec_ref_int(4): 1
jit_var_dec_ref_int(40): 0
jit_var_free(40)
jit_var_dec_ref_int(3): 1
jit_var_dec_ref_int(39): 0
jit_var_free(39)
jit_var_dec_ref_int(38): 0
jit_var_free(38)
jit_var_dec_ref_int(4): 0
jit_var_dec_ref_int(37): 0
jit_var_free(37)
jit_var_dec_ref_int(3): 0
jit_var_dec_ref_int(36): 0
jit_var_free(36)
jit_var_dec_ref_int(29): 0
jit_var_free(29)
jit_var_dec_ref_int(5): 1
jit_var_dec_ref_int(28): 0
jit_var_free(28)
jit_var_dec_ref_int(27): 1
jit_var_dec_ref_int(35): 0
jit_var_free(35)
jit_var_dec_ref_int(5): 0
jit_var_dec_ref_int(33): 0
jit_var_free(33)
jit_var_dec_ref_ext(31): 0
jit_var_free(31)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_int(34): 0
jit_var_free(34)
jit_var_dec_ref_ext(32): 0
jit_var_free(32)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_int(30): 0
jit_var_free(30)
jit_var_dec_ref_int(27): 0
jit_var_free(27)
jit_var_dec_ref_int(23): 0
jit_var_free(23)
jit_var_dec_ref_int(26): 0
jit_var_free(26)
jit_var_dec_ref_int(18): 0
jit_var_free(18)
jit_var_dec_ref_int(25): 0
jit_var_free(25)
jit_var_dec_ref_int(9): 0
jit_var_free(9)
jit_var_dec_ref_int(24): 0
jit_var_free(24)
jit_var_dec_ref_ext(14): 0
jit_var_free(14)
jit_var_dec_ref_ext(2): 2
jit_var_dec_ref_int(45): 0
jit_var_free(45)
jit_free_flush(): scheduling 7 deallocations
jit_eval(): done.
jit_malloc(type=device, device=0, size=64): <@> (reused local)
jit_malloc(type=host-pinned, size=64): <@> (new allocation)
jit_free(<@>, type=host-pinned, size=64)
jit_var_map_mem(48): <@>, size=3, free=1
jit_var_inc_ref_ext(48): 1
jit_var_copy_mem(48, size=3)
jit_var_inc_ref_int(46): 1
jit_var_inc_ref_int(48): 1
jit_var_new(49 <- 46, 48): setp.eq.$t1 $r0, $r1, $r2
jit_var_inc_ref_ext(49): 1
jit_eval(): launching 1 kernel.
jit_assemble(size=3): register map:
   - %f4 -> 46 [in]
   - %f5 -> 48 [in]
   - %p6 -> 49 [out]
jit_malloc(type=device, device=0, size=64): <@> (reused local)
  -> launching <@> (n=3, in=2, out=1, ops=7):
.version 6.0
.target sm_50
.address_size 64

.entry enoki_<@>(.param .align 8 .b8 params[32]) {
    .reg.b8   %b <7>; .reg.b16 %w<7>; .reg.b32 %r<7>;
    .reg.b64  %rd<7>; .reg.f32 %f<7>; .reg.f64 %d<7>;
    .reg.pred %p <7>;

    mov.u32 %r0, %ctaid.x;
    mov.u32 %r1, %ntid.x;
    mov.u32 %r2, %tid.x;
    mad.lo.u32 %r0, %r0, %r1, %r2;
    ld.param.u32 %r2, [params];
    setp.ge.u32 %p0, %r0, %r2;
    @%p0 bra L0;

    mov.u32 %r3, %nctaid.x;
    mul.lo.u32 %r1, %r3, %r1;

L1: // Loop body

    // Load %f4
    ld.param.u64 %rd0, [params+8];
    mad.wide.u32 %rd0, %r0, 4, %rd0;
    ld.global.cs.f32 %f4, [%rd0];

    // Load %f5
    ld.param.u64 %rd0, [params+16];
    mad.wide.u32 %rd0, %r0, 4, %rd0;
    ld.global.cs.f32 %f5, [%rd0];

    // Evaluate %p6
    setp.eq.f32 %p6, %f4, %f5;

    // Store %p6
    ld.param.u64 %rd0, [params+24];
    mad.wide.u32 %rd0, %r0, 1, %rd0;
    selp.u16 %w0, 1, 0, %p6;
    st.global.cs.u8 [%rd0], %w0;

    add.u32 %r0, %r0, %r1;
    setp.ge.u32 %p0, %r0, %r2;
    @!%p0 bra L1;

L0:
    ret;
}
jit_eval(): cleaning up..
jit_var_dec_ref_int(46): 0
jit_var_dec_ref_int(48): 0
jit_free_flush(): scheduling 1 deallocation
jit_eval(): done.
jit_all(<@>, size=3)
jit_memset_async(<@>, isize=1, size=1)
jit_malloc(type=host-pinned, size=64): <@> (reused global)
jit_reduce(<@>, type=uint32, rtype=and, size=1)
jit_free(<@>, type=host-pinned, size=64)
jit_var_dec_ref_ext(49): 0
jit_var_free(49)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_ext(48): 0
jit_var_free(48)
jit_free(<@>, type=device, device=0, size=64)
jit_malloc(type=device, device=0, size=64): <@> (reused local)
jit_malloc(type=host-pinned, size=64): <@> (reused global)
jit_free(<@>, type=host-pinned, size=64)
jit_var_map_mem(50): <@>, size=3, free=1
jit_var_inc_ref_ext(50): 1
jit_var_copy_mem(50, size=3)
jit_var_inc_ref_int(47): 1
jit_var_inc_ref_int(50): 1
jit_var_new(51 <- 47, 50): setp.eq.$t1 $r0, $r1, $r2
jit_var_inc_ref_ext(51): 1
jit_eval(): launching 1 kernel.
jit_assemble(size=3): register map:
   - %f4 -> 47 [in]
   - %f5 -> 50 [in]
   - %p6 -> 51 [out]
jit_malloc(type=device, device=0, size=64): <@> (reused local)
  -> launching <@> (n=3, in=2, out=1, ops=7):
.version 6.0
.target sm_50
.address_size 64

.entry enoki_<@>(.param .align 8 .b8 params[32]) {
    .reg.b8   %b <7>; .reg.b16 %w<7>; .reg.b32 %r<7>;
    .reg.b64  %rd<7>; .reg.f32 %f<7>; .reg.f64 %d<7>;
    .reg.pred %p <7>;

    mov.u32 %r0, %ctaid.x;
    mov.u32 %r1, %ntid.x;
    mov.u32 %r2, %tid.x;
    mad.lo.u32 %r0, %r0, %r1, %r2;
    ld.param.u32 %r2, [params];
    setp.ge.u32 %p0, %r0, %r2;
    @%p0 bra L0;

    mov.u32 %r3, %nctaid.x;
    mul.lo.u32 %r1, %r3, %r1;

L1: // Loop body

    // Load %f4
    ld.param.u64 %rd0, [params+8];
    mad.wide.u32 %rd0, %r0, 4, %rd0;
    ld.global.cs.f32 %f4, [%rd0];

    // Load %f5
    ld.param.u64 %rd0, [params+16];
    mad.wide.u32 %rd0, %r0, 4, %rd0;
    ld.global.cs.f32 %f5, [%rd0];

    // Evaluate %p6
    setp.eq.f32 %p6, %f4, %f5;

    // Store %p6
    ld.param.u64 %rd0, [params+24];
    mad.wide.u32 %rd0, %r0, 1, %rd0;
    selp.u16 %w0, 1, 0, %p6;
    st.global.cs.u8 [%rd0], %w0;

    add.u32 %r0, %r0, %r1;
    setp.ge.u32 %p0, %r0, %r2;
    @!%p0 bra L1;

L0:
    ret;
}
jit_eval(): cleaning up..
jit_var_dec_ref_int(47): 0
jit_var_dec_ref_int(50): 0
jit_free_flush(): scheduling 2 deallocations
jit_eval(): done.
jit_all(<@>, size=3)
jit_memset_async(<@>, isize=1, size=1)
jit_malloc(type=host-pinned, size=64): <@> (reused global)
jit_reduce(<@>, type=uint32, rtype=and, size=1)
jit_free(<@>, type=host-pinned, size=64)
jit_var_dec_ref_ext(51): 0
jit_var_free(51)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_ext(50): 0
jit_var_free(50)
jit_free(<@>, type=device, device=0, size=64)
jit_malloc(type=device, device=0, size=64): <@> (reused local)
jit_malloc(type=host-pinned, size=64): <@> (reused global)
jit_free(<@>, type=host-pinned, size=64)
jit_var_map_mem(52): <@>, size=10, free=1
jit_var_inc_ref_ext(52): 1
jit_var_copy_mem(52, size=10)
jit_var_inc_ref_int(2): 1
jit_var_inc_ref_int(52): 1
jit_var_new(53 <- 2, 52): setp.eq.$t1 $r0, $r1, $r2
jit_var_inc_ref_ext(53): 1
jit_eval(): launching 1 kernel.
jit_assemble(size=10): register map:
   - %f4 -> 2 [in]
   - %f5 -> 52 [in]
   - %p6 -> 53 [out]
jit_malloc(type=device, device=0, size=64): <@> (reused local)
  -> launching <@> (n=10, in=2, out=1, ops=7):
.version 6.0
.target sm_50
.address_size 64

.entry enoki_<@>(.param .align 8 .b8 params[32]) {
    .reg.b8   %b <7>; .reg.b16 %w<7>; .reg.b32 %r<7>;
    .reg.b64  %rd<7>; .reg.f32 %f<7>; .reg.f64 %d<7>;
    .reg.pred %p <7>;

    mov.u32 %r0, %ctaid.x;
    mov.u32 %r1, %ntid.x;
    mov.u32 %r2, %tid.x;
    mad.lo.u32 %r0, %r0, %r1, %r2;
    ld.param.u32 %r2, [params];
    setp.ge.u32 %p0, %r0, %r2;
    @%p0 bra L0;

    mov.u32 %r3, %nctaid.x;
    mul.lo.u32 %r1, %r3, %r1;

L1: // Loop body

    // Load %f4
    ld.param.u64 %rd0, [params+8];
    mad.wide.u32 %rd0, %r0, 4, %rd0;
    ld.global.cs.f32 %f4, [%rd0];

    // Load %f5
    ld.param.u64 %rd0, [params+16];
    mad.wide.u32 %rd0, %r0, 4, %rd0;
    ld.global.cs.f32 %f5, [%rd0];

    // Evaluate %p6
    setp.eq.f32 %p6, %f4, %f5;

    // Store %p6
    ld.param.u64 %rd0, [params+24];
    mad.wide.u32 %rd0, %r0, 1, %rd0;
    selp.u16 %w0, 1, 0, %p6;
    st.global.cs.u8 [%rd0], %w0;

    add.u32 %r0, %r0, %r1;
    setp.ge.u32 %p0, %r0, %r2;
    @!%p0 bra L1;

L0:
    ret;
}
jit_eval(): cleaning up..
jit_var_dec_ref_int(2): 0
jit_var_dec_ref_int(52): 0
jit_free_flush(): scheduling 2 deallocations
jit_eval(): done.
jit_all(<@>, size=10)
jit_memset_async(<@>, isize=1, size=2)
jit_malloc(type=host-pinned, size=64): <@> (reused global)
jit_reduce(<@>, type=uint32, rtype=and, size=3)
jit_free(<@>, type=host-pinned, size=64)
jit_var_dec_ref_ext(53): 0
jit_var_free(53)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_ext(52): 0
jit_var_free(52)
jit_free(<@>, type=device, device=0, size=64)
jit_registry_remove(<@>)
jit_registry_remove(<@>)
jit_registry_trim(): removed 3 / 3 entries.
jit_var_dec_ref_ext(2): 1
jit_var_dec_ref_ext(47): 0
jit_var_free(47)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_ext(46): 0
jit_var_free(46)
jit_free(<@>, type=device, device=0, size=64)
jit_var_dec_ref_ext(5): 0
jit_var_free(5)
jit_var_dec_ref_ext(4): 0
jit_var_free(4)
jit_var_dec_ref_ext(3): 0
jit_var_free(3)
jit_var_dec_ref_ext(2): 0
jit_var_free(2)
jit_free(<@>, type=device, device=0, size=64)
jit_free_flush(): scheduling 6 deallocations
jit_shutdown(): releasing 3 kernels ..
jit_free(<@>, type=device, device=0, size=128)
jit_shutdown(): releasing 1 thread state ..
jit_free_flush(): scheduling 1 deallocation
jit_malloc_trim(): freed
 - host memory: 128 B in 1 allocation
 - host-pinned memory: 384 B in 5 allocations
 - device memory: 512 B in 7 allocations
jit_malloc_shutdown(): leaked
 - device memory: 128 B in 2 allocations
jit_shutdown(): done
